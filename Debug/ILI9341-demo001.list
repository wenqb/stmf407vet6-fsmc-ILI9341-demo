
ILI9341-demo001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00020060  08005938  08005938  00015938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025998  08025998  000400b0  2**0
                  CONTENTS
  4 .ARM          00000008  08025998  08025998  00035998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080259a0  080259a0  000400b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080259a0  080259a0  000359a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080259a4  080259a4  000359a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  080259a8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000400b0  2**0
                  CONTENTS
 10 .bss          0000022c  200000b0  200000b0  000400b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002dc  200002dc  000400b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000400b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e2e7  00000000  00000000  000400e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000271f  00000000  00000000  0004e3c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c98  00000000  00000000  00050ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022489  00000000  00000000  00051780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000100c4  00000000  00000000  00073c09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9b97  00000000  00000000  00083ccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014d864  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00000b10  00000000  00000000  0014d8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003470  00000000  00000000  0014e3c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005920 	.word	0x08005920

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	08005920 	.word	0x08005920

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]
 8000588:	615a      	str	r2, [r3, #20]
 800058a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800058c:	4b27      	ldr	r3, [pc, #156]	; (800062c <MX_FSMC_Init+0xb8>)
 800058e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000592:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000594:	4b25      	ldr	r3, [pc, #148]	; (800062c <MX_FSMC_Init+0xb8>)
 8000596:	4a26      	ldr	r2, [pc, #152]	; (8000630 <MX_FSMC_Init+0xbc>)
 8000598:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800059a:	4b24      	ldr	r3, [pc, #144]	; (800062c <MX_FSMC_Init+0xb8>)
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80005a0:	4b22      	ldr	r3, [pc, #136]	; (800062c <MX_FSMC_Init+0xb8>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80005a6:	4b21      	ldr	r3, [pc, #132]	; (800062c <MX_FSMC_Init+0xb8>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <MX_FSMC_Init+0xb8>)
 80005ae:	2210      	movs	r2, #16
 80005b0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80005b2:	4b1e      	ldr	r3, [pc, #120]	; (800062c <MX_FSMC_Init+0xb8>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80005b8:	4b1c      	ldr	r3, [pc, #112]	; (800062c <MX_FSMC_Init+0xb8>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80005be:	4b1b      	ldr	r3, [pc, #108]	; (800062c <MX_FSMC_Init+0xb8>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80005c4:	4b19      	ldr	r3, [pc, #100]	; (800062c <MX_FSMC_Init+0xb8>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80005ca:	4b18      	ldr	r3, [pc, #96]	; (800062c <MX_FSMC_Init+0xb8>)
 80005cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005d0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80005d2:	4b16      	ldr	r3, [pc, #88]	; (800062c <MX_FSMC_Init+0xb8>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80005d8:	4b14      	ldr	r3, [pc, #80]	; (800062c <MX_FSMC_Init+0xb8>)
 80005da:	2200      	movs	r2, #0
 80005dc:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80005de:	4b13      	ldr	r3, [pc, #76]	; (800062c <MX_FSMC_Init+0xb8>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80005e4:	4b11      	ldr	r3, [pc, #68]	; (800062c <MX_FSMC_Init+0xb8>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80005ea:	4b10      	ldr	r3, [pc, #64]	; (800062c <MX_FSMC_Init+0xb8>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 1;
 80005f0:	2301      	movs	r3, #1
 80005f2:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80005f4:	230f      	movs	r3, #15
 80005f6:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 80005f8:	2305      	movs	r3, #5
 80005fa:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000600:	2310      	movs	r3, #16
 8000602:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000604:	2311      	movs	r3, #17
 8000606:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2200      	movs	r2, #0
 8000610:	4619      	mov	r1, r3
 8000612:	4806      	ldr	r0, [pc, #24]	; (800062c <MX_FSMC_Init+0xb8>)
 8000614:	f004 f903 	bl	800481e <HAL_SRAM_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 800061e:	f002 fed1 	bl	80033c4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000622:	bf00      	nop
 8000624:	3720      	adds	r7, #32
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	200000cc 	.word	0x200000cc
 8000630:	a0000104 	.word	0xa0000104

08000634 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000648:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <HAL_FSMC_MspInit+0x88>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d131      	bne.n	80006b4 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000650:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <HAL_FSMC_MspInit+0x88>)
 8000652:	2201      	movs	r2, #1
 8000654:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	603b      	str	r3, [r7, #0]
 800065a:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <HAL_FSMC_MspInit+0x8c>)
 800065c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800065e:	4a18      	ldr	r2, [pc, #96]	; (80006c0 <HAL_FSMC_MspInit+0x8c>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	6393      	str	r3, [r2, #56]	; 0x38
 8000666:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <HAL_FSMC_MspInit+0x8c>)
 8000668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000672:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000676:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000678:	2302      	movs	r3, #2
 800067a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000680:	2303      	movs	r3, #3
 8000682:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000684:	230c      	movs	r3, #12
 8000686:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	4619      	mov	r1, r3
 800068c:	480d      	ldr	r0, [pc, #52]	; (80006c4 <HAL_FSMC_MspInit+0x90>)
 800068e:	f003 f9ef 	bl	8003a70 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8000692:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 8000696:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000698:	2302      	movs	r3, #2
 800069a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a0:	2303      	movs	r3, #3
 80006a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80006a4:	230c      	movs	r3, #12
 80006a6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	4619      	mov	r1, r3
 80006ac:	4806      	ldr	r0, [pc, #24]	; (80006c8 <HAL_FSMC_MspInit+0x94>)
 80006ae:	f003 f9df 	bl	8003a70 <HAL_GPIO_Init>
 80006b2:	e000      	b.n	80006b6 <HAL_FSMC_MspInit+0x82>
    return;
 80006b4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80006b6:	3718      	adds	r7, #24
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	2000011c 	.word	0x2000011c
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40020c00 	.word	0x40020c00

080006cc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80006d4:	f7ff ffae 	bl	8000634 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <MX_GPIO_Init>:
        * EXTI
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08c      	sub	sp, #48	; 0x30
 80006e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	61bb      	str	r3, [r7, #24]
 80006fa:	4b4c      	ldr	r3, [pc, #304]	; (800082c <MX_GPIO_Init+0x14c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a4b      	ldr	r2, [pc, #300]	; (800082c <MX_GPIO_Init+0x14c>)
 8000700:	f043 0310 	orr.w	r3, r3, #16
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b49      	ldr	r3, [pc, #292]	; (800082c <MX_GPIO_Init+0x14c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0310 	and.w	r3, r3, #16
 800070e:	61bb      	str	r3, [r7, #24]
 8000710:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]
 8000716:	4b45      	ldr	r3, [pc, #276]	; (800082c <MX_GPIO_Init+0x14c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a44      	ldr	r2, [pc, #272]	; (800082c <MX_GPIO_Init+0x14c>)
 800071c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b42      	ldr	r3, [pc, #264]	; (800082c <MX_GPIO_Init+0x14c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072a:	617b      	str	r3, [r7, #20]
 800072c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
 8000732:	4b3e      	ldr	r3, [pc, #248]	; (800082c <MX_GPIO_Init+0x14c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a3d      	ldr	r2, [pc, #244]	; (800082c <MX_GPIO_Init+0x14c>)
 8000738:	f043 0304 	orr.w	r3, r3, #4
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b3b      	ldr	r3, [pc, #236]	; (800082c <MX_GPIO_Init+0x14c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	4b37      	ldr	r3, [pc, #220]	; (800082c <MX_GPIO_Init+0x14c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a36      	ldr	r2, [pc, #216]	; (800082c <MX_GPIO_Init+0x14c>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b34      	ldr	r3, [pc, #208]	; (800082c <MX_GPIO_Init+0x14c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	4b30      	ldr	r3, [pc, #192]	; (800082c <MX_GPIO_Init+0x14c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a2f      	ldr	r2, [pc, #188]	; (800082c <MX_GPIO_Init+0x14c>)
 8000770:	f043 0302 	orr.w	r3, r3, #2
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b2d      	ldr	r3, [pc, #180]	; (800082c <MX_GPIO_Init+0x14c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b29      	ldr	r3, [pc, #164]	; (800082c <MX_GPIO_Init+0x14c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a28      	ldr	r2, [pc, #160]	; (800082c <MX_GPIO_Init+0x14c>)
 800078c:	f043 0308 	orr.w	r3, r3, #8
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b26      	ldr	r3, [pc, #152]	; (800082c <MX_GPIO_Init+0x14c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0308 	and.w	r3, r3, #8
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED0_Pin, GPIO_PIN_SET);
 800079e:	2201      	movs	r2, #1
 80007a0:	21c0      	movs	r1, #192	; 0xc0
 80007a2:	4823      	ldr	r0, [pc, #140]	; (8000830 <MX_GPIO_Init+0x150>)
 80007a4:	f003 fb00 	bl	8003da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 80007a8:	2201      	movs	r2, #1
 80007aa:	2102      	movs	r1, #2
 80007ac:	4821      	ldr	r0, [pc, #132]	; (8000834 <MX_GPIO_Init+0x154>)
 80007ae:	f003 fafb 	bl	8003da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 80007b2:	2318      	movs	r3, #24
 80007b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b6:	2300      	movs	r3, #0
 80007b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	4619      	mov	r1, r3
 80007c4:	481c      	ldr	r0, [pc, #112]	; (8000838 <MX_GPIO_Init+0x158>)
 80007c6:	f003 f953 	bl	8003a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED0_Pin;
 80007ca:	23c0      	movs	r3, #192	; 0xc0
 80007cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	2301      	movs	r3, #1
 80007d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007d2:	2302      	movs	r3, #2
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d6:	2303      	movs	r3, #3
 80007d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	4813      	ldr	r0, [pc, #76]	; (8000830 <MX_GPIO_Init+0x150>)
 80007e2:	f003 f945 	bl	8003a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80007e6:	2302      	movs	r3, #2
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f2:	2303      	movs	r3, #3
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	4619      	mov	r1, r3
 80007fc:	480d      	ldr	r0, [pc, #52]	; (8000834 <MX_GPIO_Init+0x154>)
 80007fe:	f003 f937 	bl	8003a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000802:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000808:	2302      	movs	r3, #2
 800080a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000810:	2303      	movs	r3, #3
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000814:	230a      	movs	r3, #10
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4619      	mov	r1, r3
 800081e:	4804      	ldr	r0, [pc, #16]	; (8000830 <MX_GPIO_Init+0x150>)
 8000820:	f003 f926 	bl	8003a70 <HAL_GPIO_Init>

}
 8000824:	bf00      	nop
 8000826:	3730      	adds	r7, #48	; 0x30
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40023800 	.word	0x40023800
 8000830:	40020000 	.word	0x40020000
 8000834:	40020400 	.word	0x40020400
 8000838:	40021000 	.word	0x40021000

0800083c <lcdInit>:
                                bool colorOrder,
                                bool horizontalRefreshOrder);


void lcdInit(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af02      	add	r7, sp, #8
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 8000842:	2300      	movs	r3, #0
 8000844:	9301      	str	r3, [sp, #4]
 8000846:	2301      	movs	r3, #1
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2300      	movs	r3, #0
 800084c:	2200      	movs	r2, #0
 800084e:	2101      	movs	r1, #1
 8000850:	2000      	movs	r0, #0
 8000852:	f001 fc6d 	bl	8002130 <lcdBuildMemoryAccessControlConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	461a      	mov	r2, r3
 800085a:	4bae      	ldr	r3, [pc, #696]	; (8000b14 <lcdInit+0x2d8>)
 800085c:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlNormalOrder,		// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 800085e:	2300      	movs	r3, #0
 8000860:	9301      	str	r3, [sp, #4]
 8000862:	2301      	movs	r3, #1
 8000864:	9300      	str	r3, [sp, #0]
 8000866:	2300      	movs	r3, #0
 8000868:	2201      	movs	r2, #1
 800086a:	2100      	movs	r1, #0
 800086c:	2000      	movs	r0, #0
 800086e:	f001 fc5f 	bl	8002130 <lcdBuildMemoryAccessControlConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	461a      	mov	r2, r3
 8000876:	4ba8      	ldr	r3, [pc, #672]	; (8000b18 <lcdInit+0x2dc>)
 8000878:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 800087a:	2300      	movs	r3, #0
 800087c:	9301      	str	r3, [sp, #4]
 800087e:	2301      	movs	r3, #1
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	2300      	movs	r3, #0
 8000884:	2200      	movs	r2, #0
 8000886:	2100      	movs	r1, #0
 8000888:	2001      	movs	r0, #1
 800088a:	f001 fc51 	bl	8002130 <lcdBuildMemoryAccessControlConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	461a      	mov	r2, r3
 8000892:	4ba2      	ldr	r3, [pc, #648]	; (8000b1c <lcdInit+0x2e0>)
 8000894:	701a      	strb	r2, [r3, #0]
		                                            MemoryAccessControlNormalOrder,		// rowColumnExchange
		                                            MemoryAccessControlNormalOrder,		// verticalRefreshOrder
		                                            MemoryAccessControlColorOrderBGR,	// colorOrder
		                                            MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8000896:	2300      	movs	r3, #0
 8000898:	9301      	str	r3, [sp, #4]
 800089a:	2301      	movs	r3, #1
 800089c:	9300      	str	r3, [sp, #0]
 800089e:	2300      	movs	r3, #0
 80008a0:	2201      	movs	r2, #1
 80008a2:	2101      	movs	r1, #1
 80008a4:	2001      	movs	r0, #1
 80008a6:	f001 fc43 	bl	8002130 <lcdBuildMemoryAccessControlConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	461a      	mov	r2, r3
 80008ae:	4b9c      	ldr	r3, [pc, #624]	; (8000b20 <lcdInit+0x2e4>)
 80008b0:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdReset();
 80008b2:	f001 fc13 	bl	80020dc <lcdReset>

  lcdWriteCommand(ILI9341_DISPLAYOFF);
 80008b6:	2028      	movs	r0, #40	; 0x28
 80008b8:	f001 fc1a 	bl	80020f0 <lcdWriteCommand>

  lcdWriteCommand(0xCF);
 80008bc:	20cf      	movs	r0, #207	; 0xcf
 80008be:	f001 fc17 	bl	80020f0 <lcdWriteCommand>
  lcdWriteData(0x00);
 80008c2:	2000      	movs	r0, #0
 80008c4:	f001 fc24 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x83);
 80008c8:	2083      	movs	r0, #131	; 0x83
 80008ca:	f001 fc21 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x30);
 80008ce:	2030      	movs	r0, #48	; 0x30
 80008d0:	f001 fc1e 	bl	8002110 <lcdWriteData>

  lcdWriteCommand(0xED);
 80008d4:	20ed      	movs	r0, #237	; 0xed
 80008d6:	f001 fc0b 	bl	80020f0 <lcdWriteCommand>
  lcdWriteData(0x64);
 80008da:	2064      	movs	r0, #100	; 0x64
 80008dc:	f001 fc18 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x03);
 80008e0:	2003      	movs	r0, #3
 80008e2:	f001 fc15 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x12);
 80008e6:	2012      	movs	r0, #18
 80008e8:	f001 fc12 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x81);
 80008ec:	2081      	movs	r0, #129	; 0x81
 80008ee:	f001 fc0f 	bl	8002110 <lcdWriteData>

  lcdWriteCommand(0xE8);
 80008f2:	20e8      	movs	r0, #232	; 0xe8
 80008f4:	f001 fbfc 	bl	80020f0 <lcdWriteCommand>
  lcdWriteData(0x85);
 80008f8:	2085      	movs	r0, #133	; 0x85
 80008fa:	f001 fc09 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x01);
 80008fe:	2001      	movs	r0, #1
 8000900:	f001 fc06 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x79);
 8000904:	2079      	movs	r0, #121	; 0x79
 8000906:	f001 fc03 	bl	8002110 <lcdWriteData>

  lcdWriteCommand(0xCB);
 800090a:	20cb      	movs	r0, #203	; 0xcb
 800090c:	f001 fbf0 	bl	80020f0 <lcdWriteCommand>
  lcdWriteData(0x39);
 8000910:	2039      	movs	r0, #57	; 0x39
 8000912:	f001 fbfd 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x2C);
 8000916:	202c      	movs	r0, #44	; 0x2c
 8000918:	f001 fbfa 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x00);
 800091c:	2000      	movs	r0, #0
 800091e:	f001 fbf7 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x34);
 8000922:	2034      	movs	r0, #52	; 0x34
 8000924:	f001 fbf4 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x02);
 8000928:	2002      	movs	r0, #2
 800092a:	f001 fbf1 	bl	8002110 <lcdWriteData>

  lcdWriteCommand(0xF7);
 800092e:	20f7      	movs	r0, #247	; 0xf7
 8000930:	f001 fbde 	bl	80020f0 <lcdWriteCommand>
  lcdWriteData(0x20);
 8000934:	2020      	movs	r0, #32
 8000936:	f001 fbeb 	bl	8002110 <lcdWriteData>

  lcdWriteCommand(0xEA);
 800093a:	20ea      	movs	r0, #234	; 0xea
 800093c:	f001 fbd8 	bl	80020f0 <lcdWriteCommand>
  lcdWriteData(0x00);
 8000940:	2000      	movs	r0, #0
 8000942:	f001 fbe5 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x00);
 8000946:	2000      	movs	r0, #0
 8000948:	f001 fbe2 	bl	8002110 <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL1);
 800094c:	20c0      	movs	r0, #192	; 0xc0
 800094e:	f001 fbcf 	bl	80020f0 <lcdWriteCommand>
  lcdWriteData(0x26);
 8000952:	2026      	movs	r0, #38	; 0x26
 8000954:	f001 fbdc 	bl	8002110 <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL2);
 8000958:	20c1      	movs	r0, #193	; 0xc1
 800095a:	f001 fbc9 	bl	80020f0 <lcdWriteCommand>
  lcdWriteData(0x11);
 800095e:	2011      	movs	r0, #17
 8000960:	f001 fbd6 	bl	8002110 <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL1);
 8000964:	20c5      	movs	r0, #197	; 0xc5
 8000966:	f001 fbc3 	bl	80020f0 <lcdWriteCommand>
  lcdWriteData(0x35);
 800096a:	2035      	movs	r0, #53	; 0x35
 800096c:	f001 fbd0 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x3E);
 8000970:	203e      	movs	r0, #62	; 0x3e
 8000972:	f001 fbcd 	bl	8002110 <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL2);
 8000976:	20c7      	movs	r0, #199	; 0xc7
 8000978:	f001 fbba 	bl	80020f0 <lcdWriteCommand>
  lcdWriteData(0xBE);
 800097c:	20be      	movs	r0, #190	; 0xbe
 800097e:	f001 fbc7 	bl	8002110 <lcdWriteData>

  lcdWriteCommand(ILI9341_MEMCONTROL);
 8000982:	2036      	movs	r0, #54	; 0x36
 8000984:	f001 fbb4 	bl	80020f0 <lcdWriteCommand>
  lcdWriteData(lcdPortraitConfig);
 8000988:	4b62      	ldr	r3, [pc, #392]	; (8000b14 <lcdInit+0x2d8>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	b29b      	uxth	r3, r3
 800098e:	4618      	mov	r0, r3
 8000990:	f001 fbbe 	bl	8002110 <lcdWriteData>

  lcdWriteCommand(ILI9341_PIXELFORMAT);
 8000994:	203a      	movs	r0, #58	; 0x3a
 8000996:	f001 fbab 	bl	80020f0 <lcdWriteCommand>
  lcdWriteData(0x55);
 800099a:	2055      	movs	r0, #85	; 0x55
 800099c:	f001 fbb8 	bl	8002110 <lcdWriteData>

  lcdWriteCommand(ILI9341_FRAMECONTROLNORMAL);
 80009a0:	20b1      	movs	r0, #177	; 0xb1
 80009a2:	f001 fba5 	bl	80020f0 <lcdWriteCommand>
  lcdWriteData(0x00);
 80009a6:	2000      	movs	r0, #0
 80009a8:	f001 fbb2 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x1B);
 80009ac:	201b      	movs	r0, #27
 80009ae:	f001 fbaf 	bl	8002110 <lcdWriteData>

  lcdWriteCommand(0xF2);
 80009b2:	20f2      	movs	r0, #242	; 0xf2
 80009b4:	f001 fb9c 	bl	80020f0 <lcdWriteCommand>
  lcdWriteData(0x08);
 80009b8:	2008      	movs	r0, #8
 80009ba:	f001 fba9 	bl	8002110 <lcdWriteData>

  lcdWriteCommand(ILI9341_GAMMASET);
 80009be:	2026      	movs	r0, #38	; 0x26
 80009c0:	f001 fb96 	bl	80020f0 <lcdWriteCommand>
  lcdWriteData(0x01);
 80009c4:	2001      	movs	r0, #1
 80009c6:	f001 fba3 	bl	8002110 <lcdWriteData>

  lcdWriteCommand(ILI9341_POSITIVEGAMMCORR);
 80009ca:	20e0      	movs	r0, #224	; 0xe0
 80009cc:	f001 fb90 	bl	80020f0 <lcdWriteCommand>
  lcdWriteData(0x1F);
 80009d0:	201f      	movs	r0, #31
 80009d2:	f001 fb9d 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x1A);
 80009d6:	201a      	movs	r0, #26
 80009d8:	f001 fb9a 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x18);
 80009dc:	2018      	movs	r0, #24
 80009de:	f001 fb97 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x0A);
 80009e2:	200a      	movs	r0, #10
 80009e4:	f001 fb94 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x0F);
 80009e8:	200f      	movs	r0, #15
 80009ea:	f001 fb91 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x06);
 80009ee:	2006      	movs	r0, #6
 80009f0:	f001 fb8e 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x45);
 80009f4:	2045      	movs	r0, #69	; 0x45
 80009f6:	f001 fb8b 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x87);
 80009fa:	2087      	movs	r0, #135	; 0x87
 80009fc:	f001 fb88 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x32);
 8000a00:	2032      	movs	r0, #50	; 0x32
 8000a02:	f001 fb85 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x0A);
 8000a06:	200a      	movs	r0, #10
 8000a08:	f001 fb82 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x07);
 8000a0c:	2007      	movs	r0, #7
 8000a0e:	f001 fb7f 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x02);
 8000a12:	2002      	movs	r0, #2
 8000a14:	f001 fb7c 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x07);
 8000a18:	2007      	movs	r0, #7
 8000a1a:	f001 fb79 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x05);
 8000a1e:	2005      	movs	r0, #5
 8000a20:	f001 fb76 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x00);
 8000a24:	2000      	movs	r0, #0
 8000a26:	f001 fb73 	bl	8002110 <lcdWriteData>

  lcdWriteCommand(ILI9341_NEGATIVEGAMMCORR);
 8000a2a:	20e1      	movs	r0, #225	; 0xe1
 8000a2c:	f001 fb60 	bl	80020f0 <lcdWriteCommand>
  lcdWriteData(0x00);
 8000a30:	2000      	movs	r0, #0
 8000a32:	f001 fb6d 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x25);
 8000a36:	2025      	movs	r0, #37	; 0x25
 8000a38:	f001 fb6a 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x27);
 8000a3c:	2027      	movs	r0, #39	; 0x27
 8000a3e:	f001 fb67 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x05);
 8000a42:	2005      	movs	r0, #5
 8000a44:	f001 fb64 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x10);
 8000a48:	2010      	movs	r0, #16
 8000a4a:	f001 fb61 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x09);
 8000a4e:	2009      	movs	r0, #9
 8000a50:	f001 fb5e 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x3A);
 8000a54:	203a      	movs	r0, #58	; 0x3a
 8000a56:	f001 fb5b 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x78);
 8000a5a:	2078      	movs	r0, #120	; 0x78
 8000a5c:	f001 fb58 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x4D);
 8000a60:	204d      	movs	r0, #77	; 0x4d
 8000a62:	f001 fb55 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x05);
 8000a66:	2005      	movs	r0, #5
 8000a68:	f001 fb52 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x18);
 8000a6c:	2018      	movs	r0, #24
 8000a6e:	f001 fb4f 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x0D);
 8000a72:	200d      	movs	r0, #13
 8000a74:	f001 fb4c 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x38);
 8000a78:	2038      	movs	r0, #56	; 0x38
 8000a7a:	f001 fb49 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x3A);
 8000a7e:	203a      	movs	r0, #58	; 0x3a
 8000a80:	f001 fb46 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x1F);
 8000a84:	201f      	movs	r0, #31
 8000a86:	f001 fb43 	bl	8002110 <lcdWriteData>

  lcdWriteCommand(ILI9341_COLADDRSET);
 8000a8a:	202a      	movs	r0, #42	; 0x2a
 8000a8c:	f001 fb30 	bl	80020f0 <lcdWriteCommand>
  lcdWriteData(0x00);
 8000a90:	2000      	movs	r0, #0
 8000a92:	f001 fb3d 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x00);
 8000a96:	2000      	movs	r0, #0
 8000a98:	f001 fb3a 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x00);
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f001 fb37 	bl	8002110 <lcdWriteData>
  lcdWriteData(0xEF);
 8000aa2:	20ef      	movs	r0, #239	; 0xef
 8000aa4:	f001 fb34 	bl	8002110 <lcdWriteData>

  lcdWriteCommand(ILI9341_PAGEADDRSET);
 8000aa8:	202b      	movs	r0, #43	; 0x2b
 8000aaa:	f001 fb21 	bl	80020f0 <lcdWriteCommand>
  lcdWriteData(0x00);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f001 fb2e 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x00);
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f001 fb2b 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x01);
 8000aba:	2001      	movs	r0, #1
 8000abc:	f001 fb28 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x3F);
 8000ac0:	203f      	movs	r0, #63	; 0x3f
 8000ac2:	f001 fb25 	bl	8002110 <lcdWriteData>

  lcdWriteCommand(ILI9341_ENTRYMODE);
 8000ac6:	20b7      	movs	r0, #183	; 0xb7
 8000ac8:	f001 fb12 	bl	80020f0 <lcdWriteCommand>
  lcdWriteData(0x07);
 8000acc:	2007      	movs	r0, #7
 8000ace:	f001 fb1f 	bl	8002110 <lcdWriteData>

  lcdWriteCommand(ILI9341_DISPLAYFUNC);
 8000ad2:	20b6      	movs	r0, #182	; 0xb6
 8000ad4:	f001 fb0c 	bl	80020f0 <lcdWriteCommand>
  lcdWriteData(0x0A);
 8000ad8:	200a      	movs	r0, #10
 8000ada:	f001 fb19 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x82);
 8000ade:	2082      	movs	r0, #130	; 0x82
 8000ae0:	f001 fb16 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x27);
 8000ae4:	2027      	movs	r0, #39	; 0x27
 8000ae6:	f001 fb13 	bl	8002110 <lcdWriteData>
  lcdWriteData(0x00);
 8000aea:	2000      	movs	r0, #0
 8000aec:	f001 fb10 	bl	8002110 <lcdWriteData>

  lcdWriteCommand(ILI9341_SLEEPOUT);
 8000af0:	2011      	movs	r0, #17
 8000af2:	f001 fafd 	bl	80020f0 <lcdWriteCommand>
  HAL_Delay(100);
 8000af6:	2064      	movs	r0, #100	; 0x64
 8000af8:	f002 feb0 	bl	800385c <HAL_Delay>
  lcdWriteCommand(ILI9341_DISPLAYON);
 8000afc:	2029      	movs	r0, #41	; 0x29
 8000afe:	f001 faf7 	bl	80020f0 <lcdWriteCommand>
  HAL_Delay(100);
 8000b02:	2064      	movs	r0, #100	; 0x64
 8000b04:	f002 feaa 	bl	800385c <HAL_Delay>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 8000b08:	202c      	movs	r0, #44	; 0x2c
 8000b0a:	f001 faf1 	bl	80020f0 <lcdWriteCommand>
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000124 	.word	0x20000124
 8000b18:	20000125 	.word	0x20000125
 8000b1c:	20000126 	.word	0x20000126
 8000b20:	20000127 	.word	0x20000127

08000b24 <lcdTest>:

void lcdTest(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
	lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8000b2a:	4b4e      	ldr	r3, [pc, #312]	; (8000c64 <lcdTest+0x140>)
 8000b2c:	881b      	ldrh	r3, [r3, #0]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	b29a      	uxth	r2, r3
 8000b32:	4b4c      	ldr	r3, [pc, #304]	; (8000c64 <lcdTest+0x140>)
 8000b34:	885b      	ldrh	r3, [r3, #2]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f001 f9ff 	bl	8001f40 <lcdSetWindow>

	uint8_t stripSize = lcdProperties.height / 8;
 8000b42:	4b48      	ldr	r3, [pc, #288]	; (8000c64 <lcdTest+0x140>)
 8000b44:	885b      	ldrh	r3, [r3, #2]
 8000b46:	08db      	lsrs	r3, r3, #3
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	71fb      	strb	r3, [r7, #7]

	for (int y = 0; y < lcdProperties.height; y++)
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	e07c      	b.n	8000c4c <lcdTest+0x128>
	{
		for (int x = 0; x < lcdProperties.width; x++)
 8000b52:	2300      	movs	r3, #0
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	e070      	b.n	8000c3a <lcdTest+0x116>
		{
		  if (y > lcdProperties.height - 1 - (stripSize * 1)) lcdWriteData(COLOR_WHITE);
 8000b58:	4b42      	ldr	r3, [pc, #264]	; (8000c64 <lcdTest+0x140>)
 8000b5a:	885b      	ldrh	r3, [r3, #2]
 8000b5c:	1e5a      	subs	r2, r3, #1
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	dd04      	ble.n	8000b72 <lcdTest+0x4e>
 8000b68:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000b6c:	f001 fad0 	bl	8002110 <lcdWriteData>
 8000b70:	e060      	b.n	8000c34 <lcdTest+0x110>
		  else if (y > lcdProperties.height - 1 - (stripSize * 2)) lcdWriteData(COLOR_BLUE);
 8000b72:	4b3c      	ldr	r3, [pc, #240]	; (8000c64 <lcdTest+0x140>)
 8000b74:	885b      	ldrh	r3, [r3, #2]
 8000b76:	1e5a      	subs	r2, r3, #1
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	dd03      	ble.n	8000b8c <lcdTest+0x68>
 8000b84:	201f      	movs	r0, #31
 8000b86:	f001 fac3 	bl	8002110 <lcdWriteData>
 8000b8a:	e053      	b.n	8000c34 <lcdTest+0x110>
		  else if (y > lcdProperties.height - 1 - (stripSize * 3)) lcdWriteData(COLOR_GREEN);
 8000b8c:	4b35      	ldr	r3, [pc, #212]	; (8000c64 <lcdTest+0x140>)
 8000b8e:	885b      	ldrh	r3, [r3, #2]
 8000b90:	1e5a      	subs	r2, r3, #1
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	4619      	mov	r1, r3
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	1acb      	subs	r3, r1, r3
 8000b9a:	4413      	add	r3, r2
 8000b9c:	68fa      	ldr	r2, [r7, #12]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	dd04      	ble.n	8000bac <lcdTest+0x88>
 8000ba2:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000ba6:	f001 fab3 	bl	8002110 <lcdWriteData>
 8000baa:	e043      	b.n	8000c34 <lcdTest+0x110>
		  else if (y > lcdProperties.height - 1 - (stripSize * 4)) lcdWriteData(COLOR_CYAN);
 8000bac:	4b2d      	ldr	r3, [pc, #180]	; (8000c64 <lcdTest+0x140>)
 8000bae:	885b      	ldrh	r3, [r3, #2]
 8000bb0:	1e5a      	subs	r2, r3, #1
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	1ad3      	subs	r3, r2, r3
 8000bb8:	68fa      	ldr	r2, [r7, #12]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	dd04      	ble.n	8000bc8 <lcdTest+0xa4>
 8000bbe:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8000bc2:	f001 faa5 	bl	8002110 <lcdWriteData>
 8000bc6:	e035      	b.n	8000c34 <lcdTest+0x110>
		  else if (y > lcdProperties.height - 1 - (stripSize * 5)) lcdWriteData(COLOR_RED);
 8000bc8:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <lcdTest+0x140>)
 8000bca:	885b      	ldrh	r3, [r3, #2]
 8000bcc:	1e59      	subs	r1, r3, #1
 8000bce:	79fa      	ldrb	r2, [r7, #7]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	079b      	lsls	r3, r3, #30
 8000bd4:	1a9b      	subs	r3, r3, r2
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	1a9b      	subs	r3, r3, r2
 8000bda:	440b      	add	r3, r1
 8000bdc:	68fa      	ldr	r2, [r7, #12]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	dd04      	ble.n	8000bec <lcdTest+0xc8>
 8000be2:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000be6:	f001 fa93 	bl	8002110 <lcdWriteData>
 8000bea:	e023      	b.n	8000c34 <lcdTest+0x110>
		  else if (y > lcdProperties.height - 1 - (stripSize * 6)) lcdWriteData(COLOR_MAGENTA);
 8000bec:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <lcdTest+0x140>)
 8000bee:	885b      	ldrh	r3, [r3, #2]
 8000bf0:	1e59      	subs	r1, r3, #1
 8000bf2:	79fa      	ldrb	r2, [r7, #7]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	0092      	lsls	r2, r2, #2
 8000bf8:	1a9b      	subs	r3, r3, r2
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	440b      	add	r3, r1
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	dd04      	ble.n	8000c0e <lcdTest+0xea>
 8000c04:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8000c08:	f001 fa82 	bl	8002110 <lcdWriteData>
 8000c0c:	e012      	b.n	8000c34 <lcdTest+0x110>
		  else if (y > lcdProperties.height - 1 - (stripSize * 7)) lcdWriteData(COLOR_YELLOW);
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <lcdTest+0x140>)
 8000c10:	885b      	ldrh	r3, [r3, #2]
 8000c12:	1e5a      	subs	r2, r3, #1
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	4619      	mov	r1, r3
 8000c18:	00db      	lsls	r3, r3, #3
 8000c1a:	1acb      	subs	r3, r1, r3
 8000c1c:	4413      	add	r3, r2
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	dd04      	ble.n	8000c2e <lcdTest+0x10a>
 8000c24:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8000c28:	f001 fa72 	bl	8002110 <lcdWriteData>
 8000c2c:	e002      	b.n	8000c34 <lcdTest+0x110>
		  else lcdWriteData(COLOR_BLACK);
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f001 fa6e 	bl	8002110 <lcdWriteData>
		for (int x = 0; x < lcdProperties.width; x++)
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	3301      	adds	r3, #1
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <lcdTest+0x140>)
 8000c3c:	881b      	ldrh	r3, [r3, #0]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	4293      	cmp	r3, r2
 8000c44:	db88      	blt.n	8000b58 <lcdTest+0x34>
	for (int y = 0; y < lcdProperties.height; y++)
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <lcdTest+0x140>)
 8000c4e:	885b      	ldrh	r3, [r3, #2]
 8000c50:	461a      	mov	r2, r3
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	4293      	cmp	r3, r2
 8000c56:	f6ff af7c 	blt.w	8000b52 <lcdTest+0x2e>
		}
	}
}
 8000c5a:	bf00      	nop
 8000c5c:	bf00      	nop
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000028 	.word	0x20000028

08000c68 <lcdFillRGB>:

void lcdFillRGB(uint16_t color)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	80fb      	strh	r3, [r7, #6]
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <lcdFillRGB+0x50>)
 8000c74:	881b      	ldrh	r3, [r3, #0]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	b29a      	uxth	r2, r3
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <lcdFillRGB+0x50>)
 8000c7c:	885b      	ldrh	r3, [r3, #2]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	2100      	movs	r1, #0
 8000c84:	2000      	movs	r0, #0
 8000c86:	f001 f95b 	bl	8001f40 <lcdSetWindow>
  int dimensions = lcdProperties.width * lcdProperties.height;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <lcdFillRGB+0x50>)
 8000c8c:	881b      	ldrh	r3, [r3, #0]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <lcdFillRGB+0x50>)
 8000c92:	885b      	ldrh	r3, [r3, #2]
 8000c94:	fb02 f303 	mul.w	r3, r2, r3
 8000c98:	60fb      	str	r3, [r7, #12]
  while(dimensions--)
 8000c9a:	e003      	b.n	8000ca4 <lcdFillRGB+0x3c>
  {
    lcdWriteData(color);
 8000c9c:	88fb      	ldrh	r3, [r7, #6]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f001 fa36 	bl	8002110 <lcdWriteData>
  while(dimensions--)
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	1e5a      	subs	r2, r3, #1
 8000ca8:	60fa      	str	r2, [r7, #12]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d1f6      	bne.n	8000c9c <lcdFillRGB+0x34>
  }
}
 8000cae:	bf00      	nop
 8000cb0:	bf00      	nop
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000028 	.word	0x20000028

08000cbc <lcdDrawPixel>:
 * \param color    Color
 *
 * \return void
 */
void lcdDrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	80fb      	strh	r3, [r7, #6]
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	80bb      	strh	r3, [r7, #4]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	807b      	strh	r3, [r7, #2]
    // Clip
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <lcdDrawPixel+0x44>)
 8000cd0:	881b      	ldrh	r3, [r3, #0]
 8000cd2:	88fa      	ldrh	r2, [r7, #6]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d20f      	bcs.n	8000cf8 <lcdDrawPixel+0x3c>
 8000cd8:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <lcdDrawPixel+0x44>)
 8000cda:	885b      	ldrh	r3, [r3, #2]
 8000cdc:	88ba      	ldrh	r2, [r7, #4]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d20a      	bcs.n	8000cf8 <lcdDrawPixel+0x3c>
        return;

    lcdSetWindow(x, y, x, y);
 8000ce2:	88bb      	ldrh	r3, [r7, #4]
 8000ce4:	88fa      	ldrh	r2, [r7, #6]
 8000ce6:	88b9      	ldrh	r1, [r7, #4]
 8000ce8:	88f8      	ldrh	r0, [r7, #6]
 8000cea:	f001 f929 	bl	8001f40 <lcdSetWindow>
    lcdWriteData(color);
 8000cee:	887b      	ldrh	r3, [r7, #2]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f001 fa0d 	bl	8002110 <lcdWriteData>
 8000cf6:	e000      	b.n	8000cfa <lcdDrawPixel+0x3e>
        return;
 8000cf8:	bf00      	nop
}
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000028 	.word	0x20000028

08000d04 <lcdDrawHLine>:

void lcdDrawHLine(uint16_t x0, uint16_t x1, uint16_t y, uint16_t color)
{
 8000d04:	b590      	push	{r4, r7, lr}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	4608      	mov	r0, r1
 8000d0e:	4611      	mov	r1, r2
 8000d10:	461a      	mov	r2, r3
 8000d12:	4623      	mov	r3, r4
 8000d14:	80fb      	strh	r3, [r7, #6]
 8000d16:	4603      	mov	r3, r0
 8000d18:	80bb      	strh	r3, [r7, #4]
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	807b      	strh	r3, [r7, #2]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	803b      	strh	r3, [r7, #0]
  // Allows for slightly better performance than setting individual pixels

	if (x1 < x0)
 8000d22:	88ba      	ldrh	r2, [r7, #4]
 8000d24:	88fb      	ldrh	r3, [r7, #6]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d205      	bcs.n	8000d36 <lcdDrawHLine+0x32>
	{
		// Switch x1 and x0
		swap(x0, x1);
 8000d2a:	88fb      	ldrh	r3, [r7, #6]
 8000d2c:	817b      	strh	r3, [r7, #10]
 8000d2e:	88bb      	ldrh	r3, [r7, #4]
 8000d30:	80fb      	strh	r3, [r7, #6]
 8000d32:	897b      	ldrh	r3, [r7, #10]
 8000d34:	80bb      	strh	r3, [r7, #4]
	}

	// Check limits
	if (x1 >= lcdProperties.width)
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <lcdDrawHLine+0x88>)
 8000d38:	881b      	ldrh	r3, [r3, #0]
 8000d3a:	88ba      	ldrh	r2, [r7, #4]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d303      	bcc.n	8000d48 <lcdDrawHLine+0x44>
	{
		x1 = lcdProperties.width - 1;
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <lcdDrawHLine+0x88>)
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	80bb      	strh	r3, [r7, #4]
	}

	if (x0 >= lcdProperties.width)
 8000d48:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <lcdDrawHLine+0x88>)
 8000d4a:	881b      	ldrh	r3, [r3, #0]
 8000d4c:	88fa      	ldrh	r2, [r7, #6]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d303      	bcc.n	8000d5a <lcdDrawHLine+0x56>
	{
		x0 = lcdProperties.width - 1;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <lcdDrawHLine+0x88>)
 8000d54:	881b      	ldrh	r3, [r3, #0]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	80fb      	strh	r3, [r7, #6]
	}

	lcdSetWindow(x0, y, x1, y);
 8000d5a:	887b      	ldrh	r3, [r7, #2]
 8000d5c:	88ba      	ldrh	r2, [r7, #4]
 8000d5e:	8879      	ldrh	r1, [r7, #2]
 8000d60:	88f8      	ldrh	r0, [r7, #6]
 8000d62:	f001 f8ed 	bl	8001f40 <lcdSetWindow>

	for (int line = x0; line <= x1; line++)
 8000d66:	88fb      	ldrh	r3, [r7, #6]
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	e006      	b.n	8000d7a <lcdDrawHLine+0x76>
	{
		lcdWriteData(color);
 8000d6c:	883b      	ldrh	r3, [r7, #0]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f001 f9ce 	bl	8002110 <lcdWriteData>
	for (int line = x0; line <= x1; line++)
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	3301      	adds	r3, #1
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	88bb      	ldrh	r3, [r7, #4]
 8000d7c:	68fa      	ldr	r2, [r7, #12]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	ddf4      	ble.n	8000d6c <lcdDrawHLine+0x68>
	}
}
 8000d82:	bf00      	nop
 8000d84:	bf00      	nop
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd90      	pop	{r4, r7, pc}
 8000d8c:	20000028 	.word	0x20000028

08000d90 <lcdDrawVLine>:

void lcdDrawVLine(uint16_t x, uint16_t y0, uint16_t y1, uint16_t color)
{
 8000d90:	b590      	push	{r4, r7, lr}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4604      	mov	r4, r0
 8000d98:	4608      	mov	r0, r1
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4623      	mov	r3, r4
 8000da0:	80fb      	strh	r3, [r7, #6]
 8000da2:	4603      	mov	r3, r0
 8000da4:	80bb      	strh	r3, [r7, #4]
 8000da6:	460b      	mov	r3, r1
 8000da8:	807b      	strh	r3, [r7, #2]
 8000daa:	4613      	mov	r3, r2
 8000dac:	803b      	strh	r3, [r7, #0]
  if (y1 < y0)
 8000dae:	887a      	ldrh	r2, [r7, #2]
 8000db0:	88bb      	ldrh	r3, [r7, #4]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d205      	bcs.n	8000dc2 <lcdDrawVLine+0x32>
  {
	  swap(y0, y1);
 8000db6:	88bb      	ldrh	r3, [r7, #4]
 8000db8:	817b      	strh	r3, [r7, #10]
 8000dba:	887b      	ldrh	r3, [r7, #2]
 8000dbc:	80bb      	strh	r3, [r7, #4]
 8000dbe:	897b      	ldrh	r3, [r7, #10]
 8000dc0:	807b      	strh	r3, [r7, #2]
  }

  if (x >= lcdProperties.width)
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <lcdDrawVLine+0x9c>)
 8000dc4:	881b      	ldrh	r3, [r3, #0]
 8000dc6:	88fa      	ldrh	r2, [r7, #6]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d303      	bcc.n	8000dd4 <lcdDrawVLine+0x44>
  {
    x = lcdProperties.width - 1;
 8000dcc:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <lcdDrawVLine+0x9c>)
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	80fb      	strh	r3, [r7, #6]
  }

  if (y0 >= lcdProperties.height)
 8000dd4:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <lcdDrawVLine+0x9c>)
 8000dd6:	885b      	ldrh	r3, [r3, #2]
 8000dd8:	88ba      	ldrh	r2, [r7, #4]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d303      	bcc.n	8000de6 <lcdDrawVLine+0x56>
  {
    y0 = lcdProperties.height - 1;
 8000dde:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <lcdDrawVLine+0x9c>)
 8000de0:	885b      	ldrh	r3, [r3, #2]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	80bb      	strh	r3, [r7, #4]
  }

  if (y1 >= lcdProperties.height)
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <lcdDrawVLine+0x9c>)
 8000de8:	885b      	ldrh	r3, [r3, #2]
 8000dea:	887a      	ldrh	r2, [r7, #2]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d303      	bcc.n	8000df8 <lcdDrawVLine+0x68>
  {
    y1 = lcdProperties.height - 1;
 8000df0:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <lcdDrawVLine+0x9c>)
 8000df2:	885b      	ldrh	r3, [r3, #2]
 8000df4:	3b01      	subs	r3, #1
 8000df6:	807b      	strh	r3, [r7, #2]
  }

  lcdSetWindow(x, y0, x, y1);
 8000df8:	887b      	ldrh	r3, [r7, #2]
 8000dfa:	88fa      	ldrh	r2, [r7, #6]
 8000dfc:	88b9      	ldrh	r1, [r7, #4]
 8000dfe:	88f8      	ldrh	r0, [r7, #6]
 8000e00:	f001 f89e 	bl	8001f40 <lcdSetWindow>

  for(int line = y0; line <= y1; line++)
 8000e04:	88bb      	ldrh	r3, [r7, #4]
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	e006      	b.n	8000e18 <lcdDrawVLine+0x88>
  {
	  lcdWriteData(color);
 8000e0a:	883b      	ldrh	r3, [r7, #0]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f001 f97f 	bl	8002110 <lcdWriteData>
  for(int line = y0; line <= y1; line++)
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	3301      	adds	r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	887b      	ldrh	r3, [r7, #2]
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	ddf4      	ble.n	8000e0a <lcdDrawVLine+0x7a>
  }
}
 8000e20:	bf00      	nop
 8000e22:	bf00      	nop
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd90      	pop	{r4, r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000028 	.word	0x20000028

08000e30 <lcdDrawLine>:
 * \param color	Color
 *
 * \return void
 */
void lcdDrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8000e30:	b590      	push	{r4, r7, lr}
 8000e32:	b089      	sub	sp, #36	; 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4604      	mov	r4, r0
 8000e38:	4608      	mov	r0, r1
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4623      	mov	r3, r4
 8000e40:	80fb      	strh	r3, [r7, #6]
 8000e42:	4603      	mov	r3, r0
 8000e44:	80bb      	strh	r3, [r7, #4]
 8000e46:	460b      	mov	r3, r1
 8000e48:	807b      	strh	r3, [r7, #2]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	803b      	strh	r3, [r7, #0]
	// Bresenham's algorithm - thx wikpedia

	int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 8000e4e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000e52:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000e5c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000e60:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000e64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e68:	1acb      	subs	r3, r1, r3
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	bfb8      	it	lt
 8000e6e:	425b      	neglt	r3, r3
 8000e70:	429a      	cmp	r2, r3
 8000e72:	bfcc      	ite	gt
 8000e74:	2301      	movgt	r3, #1
 8000e76:	2300      	movle	r3, #0
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	837b      	strh	r3, [r7, #26]
	if (steep)
 8000e7c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d00b      	beq.n	8000e9c <lcdDrawLine+0x6c>
	{
		swap(x1, y1);
 8000e84:	88fb      	ldrh	r3, [r7, #6]
 8000e86:	833b      	strh	r3, [r7, #24]
 8000e88:	88bb      	ldrh	r3, [r7, #4]
 8000e8a:	80fb      	strh	r3, [r7, #6]
 8000e8c:	8b3b      	ldrh	r3, [r7, #24]
 8000e8e:	80bb      	strh	r3, [r7, #4]
		swap(x2, y2);
 8000e90:	887b      	ldrh	r3, [r7, #2]
 8000e92:	82fb      	strh	r3, [r7, #22]
 8000e94:	883b      	ldrh	r3, [r7, #0]
 8000e96:	807b      	strh	r3, [r7, #2]
 8000e98:	8afb      	ldrh	r3, [r7, #22]
 8000e9a:	803b      	strh	r3, [r7, #0]
	}

	if (x1 > x2)
 8000e9c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000ea0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	dd0b      	ble.n	8000ec0 <lcdDrawLine+0x90>
	{
		swap(x1, x2);
 8000ea8:	88fb      	ldrh	r3, [r7, #6]
 8000eaa:	82bb      	strh	r3, [r7, #20]
 8000eac:	887b      	ldrh	r3, [r7, #2]
 8000eae:	80fb      	strh	r3, [r7, #6]
 8000eb0:	8abb      	ldrh	r3, [r7, #20]
 8000eb2:	807b      	strh	r3, [r7, #2]
		swap(y1, y2);
 8000eb4:	88bb      	ldrh	r3, [r7, #4]
 8000eb6:	827b      	strh	r3, [r7, #18]
 8000eb8:	883b      	ldrh	r3, [r7, #0]
 8000eba:	80bb      	strh	r3, [r7, #4]
 8000ebc:	8a7b      	ldrh	r3, [r7, #18]
 8000ebe:	803b      	strh	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x2 - x1;
 8000ec0:	887a      	ldrh	r2, [r7, #2]
 8000ec2:	88fb      	ldrh	r3, [r7, #6]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	823b      	strh	r3, [r7, #16]
	dy = abs(y2 - y1);
 8000eca:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000ece:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	bfb8      	it	lt
 8000ed8:	425b      	neglt	r3, r3
 8000eda:	81fb      	strh	r3, [r7, #14]

	int16_t err = dx / 2;
 8000edc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000ee0:	0fda      	lsrs	r2, r3, #31
 8000ee2:	4413      	add	r3, r2
 8000ee4:	105b      	asrs	r3, r3, #1
 8000ee6:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y1 < y2)
 8000ee8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000eec:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	da02      	bge.n	8000efa <lcdDrawLine+0xca>
	{
		ystep = 1;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	83bb      	strh	r3, [r7, #28]
 8000ef8:	e02d      	b.n	8000f56 <lcdDrawLine+0x126>
	}
	else
	{
		ystep = -1;
 8000efa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000efe:	83bb      	strh	r3, [r7, #28]
	}

	for (; x1 <= x2; x1++)
 8000f00:	e029      	b.n	8000f56 <lcdDrawLine+0x126>
	{
		if (steep)
 8000f02:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d006      	beq.n	8000f18 <lcdDrawLine+0xe8>
		{
			lcdDrawPixel(y1, x1, color);
 8000f0a:	88bb      	ldrh	r3, [r7, #4]
 8000f0c:	88f9      	ldrh	r1, [r7, #6]
 8000f0e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fed3 	bl	8000cbc <lcdDrawPixel>
 8000f16:	e005      	b.n	8000f24 <lcdDrawLine+0xf4>
		}
		else
		{
			lcdDrawPixel(x1, y1, color);
 8000f18:	88fb      	ldrh	r3, [r7, #6]
 8000f1a:	88b9      	ldrh	r1, [r7, #4]
 8000f1c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fecc 	bl	8000cbc <lcdDrawPixel>
		}
		err -= dy;
 8000f24:	8bfa      	ldrh	r2, [r7, #30]
 8000f26:	89fb      	ldrh	r3, [r7, #14]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	83fb      	strh	r3, [r7, #30]
		if (err < 0)
 8000f2e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	da09      	bge.n	8000f4a <lcdDrawLine+0x11a>
		{
			y1 += ystep;
 8000f36:	88ba      	ldrh	r2, [r7, #4]
 8000f38:	8bbb      	ldrh	r3, [r7, #28]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	80bb      	strh	r3, [r7, #4]
			err += dx;
 8000f40:	8bfa      	ldrh	r2, [r7, #30]
 8000f42:	8a3b      	ldrh	r3, [r7, #16]
 8000f44:	4413      	add	r3, r2
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	83fb      	strh	r3, [r7, #30]
	for (; x1 <= x2; x1++)
 8000f4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	3301      	adds	r3, #1
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	80fb      	strh	r3, [r7, #6]
 8000f56:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000f5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	ddcf      	ble.n	8000f02 <lcdDrawLine+0xd2>
		}
	}
}
 8000f62:	bf00      	nop
 8000f64:	bf00      	nop
 8000f66:	3724      	adds	r7, #36	; 0x24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd90      	pop	{r4, r7, pc}

08000f6c <lcdDrawRect>:
 * \param color		Color
 *
 * \return void
 */
void lcdDrawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000f6c:	b590      	push	{r4, r7, lr}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4604      	mov	r4, r0
 8000f74:	4608      	mov	r0, r1
 8000f76:	4611      	mov	r1, r2
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4623      	mov	r3, r4
 8000f7c:	80fb      	strh	r3, [r7, #6]
 8000f7e:	4603      	mov	r3, r0
 8000f80:	80bb      	strh	r3, [r7, #4]
 8000f82:	460b      	mov	r3, r1
 8000f84:	807b      	strh	r3, [r7, #2]
 8000f86:	4613      	mov	r3, r2
 8000f88:	803b      	strh	r3, [r7, #0]
	lcdDrawHLine(x, x + w - 1, y, color);
 8000f8a:	88f8      	ldrh	r0, [r7, #6]
 8000f8c:	88fa      	ldrh	r2, [r7, #6]
 8000f8e:	887b      	ldrh	r3, [r7, #2]
 8000f90:	4413      	add	r3, r2
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	3b01      	subs	r3, #1
 8000f96:	b299      	uxth	r1, r3
 8000f98:	88ba      	ldrh	r2, [r7, #4]
 8000f9a:	8b3b      	ldrh	r3, [r7, #24]
 8000f9c:	f7ff feb2 	bl	8000d04 <lcdDrawHLine>
	lcdDrawHLine(x, x + w - 1, y + h - 1, color);
 8000fa0:	88f8      	ldrh	r0, [r7, #6]
 8000fa2:	88fa      	ldrh	r2, [r7, #6]
 8000fa4:	887b      	ldrh	r3, [r7, #2]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	3b01      	subs	r3, #1
 8000fac:	b299      	uxth	r1, r3
 8000fae:	88ba      	ldrh	r2, [r7, #4]
 8000fb0:	883b      	ldrh	r3, [r7, #0]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	8b3b      	ldrh	r3, [r7, #24]
 8000fbc:	f7ff fea2 	bl	8000d04 <lcdDrawHLine>
	lcdDrawVLine(x, y, y + h - 1, color);
 8000fc0:	88f8      	ldrh	r0, [r7, #6]
 8000fc2:	88b9      	ldrh	r1, [r7, #4]
 8000fc4:	88ba      	ldrh	r2, [r7, #4]
 8000fc6:	883b      	ldrh	r3, [r7, #0]
 8000fc8:	4413      	add	r3, r2
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	8b3b      	ldrh	r3, [r7, #24]
 8000fd2:	f7ff fedd 	bl	8000d90 <lcdDrawVLine>
	lcdDrawVLine(x + w - 1, y, y + h - 1, color);
 8000fd6:	88fa      	ldrh	r2, [r7, #6]
 8000fd8:	887b      	ldrh	r3, [r7, #2]
 8000fda:	4413      	add	r3, r2
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	b298      	uxth	r0, r3
 8000fe2:	88b9      	ldrh	r1, [r7, #4]
 8000fe4:	88ba      	ldrh	r2, [r7, #4]
 8000fe6:	883b      	ldrh	r3, [r7, #0]
 8000fe8:	4413      	add	r3, r2
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	3b01      	subs	r3, #1
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	8b3b      	ldrh	r3, [r7, #24]
 8000ff2:	f7ff fecd 	bl	8000d90 <lcdDrawVLine>
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd90      	pop	{r4, r7, pc}

08000ffe <lcdDrawRoundRect>:
 * \param color		Color
 *
 * \return void
 */
void lcdDrawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8000ffe:	b590      	push	{r4, r7, lr}
 8001000:	b085      	sub	sp, #20
 8001002:	af02      	add	r7, sp, #8
 8001004:	4604      	mov	r4, r0
 8001006:	4608      	mov	r0, r1
 8001008:	4611      	mov	r1, r2
 800100a:	461a      	mov	r2, r3
 800100c:	4623      	mov	r3, r4
 800100e:	80fb      	strh	r3, [r7, #6]
 8001010:	4603      	mov	r3, r0
 8001012:	80bb      	strh	r3, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	807b      	strh	r3, [r7, #2]
 8001018:	4613      	mov	r3, r2
 800101a:	803b      	strh	r3, [r7, #0]
	// smarter version
	lcdDrawHLine(x + r, x + w - r, y, color);
 800101c:	88fa      	ldrh	r2, [r7, #6]
 800101e:	8b3b      	ldrh	r3, [r7, #24]
 8001020:	4413      	add	r3, r2
 8001022:	b298      	uxth	r0, r3
 8001024:	88fa      	ldrh	r2, [r7, #6]
 8001026:	887b      	ldrh	r3, [r7, #2]
 8001028:	4413      	add	r3, r2
 800102a:	b29a      	uxth	r2, r3
 800102c:	8b3b      	ldrh	r3, [r7, #24]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	b299      	uxth	r1, r3
 8001032:	88ba      	ldrh	r2, [r7, #4]
 8001034:	8bbb      	ldrh	r3, [r7, #28]
 8001036:	f7ff fe65 	bl	8000d04 <lcdDrawHLine>
	lcdDrawHLine(x + r, x + w - r, y + h - 1, color);
 800103a:	88fa      	ldrh	r2, [r7, #6]
 800103c:	8b3b      	ldrh	r3, [r7, #24]
 800103e:	4413      	add	r3, r2
 8001040:	b298      	uxth	r0, r3
 8001042:	88fa      	ldrh	r2, [r7, #6]
 8001044:	887b      	ldrh	r3, [r7, #2]
 8001046:	4413      	add	r3, r2
 8001048:	b29a      	uxth	r2, r3
 800104a:	8b3b      	ldrh	r3, [r7, #24]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	b299      	uxth	r1, r3
 8001050:	88ba      	ldrh	r2, [r7, #4]
 8001052:	883b      	ldrh	r3, [r7, #0]
 8001054:	4413      	add	r3, r2
 8001056:	b29b      	uxth	r3, r3
 8001058:	3b01      	subs	r3, #1
 800105a:	b29a      	uxth	r2, r3
 800105c:	8bbb      	ldrh	r3, [r7, #28]
 800105e:	f7ff fe51 	bl	8000d04 <lcdDrawHLine>
	lcdDrawVLine(x, y + r, y + h - r, color);
 8001062:	88f8      	ldrh	r0, [r7, #6]
 8001064:	88ba      	ldrh	r2, [r7, #4]
 8001066:	8b3b      	ldrh	r3, [r7, #24]
 8001068:	4413      	add	r3, r2
 800106a:	b299      	uxth	r1, r3
 800106c:	88ba      	ldrh	r2, [r7, #4]
 800106e:	883b      	ldrh	r3, [r7, #0]
 8001070:	4413      	add	r3, r2
 8001072:	b29a      	uxth	r2, r3
 8001074:	8b3b      	ldrh	r3, [r7, #24]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	b29a      	uxth	r2, r3
 800107a:	8bbb      	ldrh	r3, [r7, #28]
 800107c:	f7ff fe88 	bl	8000d90 <lcdDrawVLine>
	lcdDrawVLine(x + w - 1, y + r, y + h - r, color);
 8001080:	88fa      	ldrh	r2, [r7, #6]
 8001082:	887b      	ldrh	r3, [r7, #2]
 8001084:	4413      	add	r3, r2
 8001086:	b29b      	uxth	r3, r3
 8001088:	3b01      	subs	r3, #1
 800108a:	b298      	uxth	r0, r3
 800108c:	88ba      	ldrh	r2, [r7, #4]
 800108e:	8b3b      	ldrh	r3, [r7, #24]
 8001090:	4413      	add	r3, r2
 8001092:	b299      	uxth	r1, r3
 8001094:	88ba      	ldrh	r2, [r7, #4]
 8001096:	883b      	ldrh	r3, [r7, #0]
 8001098:	4413      	add	r3, r2
 800109a:	b29a      	uxth	r2, r3
 800109c:	8b3b      	ldrh	r3, [r7, #24]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	8bbb      	ldrh	r3, [r7, #28]
 80010a4:	f7ff fe74 	bl	8000d90 <lcdDrawVLine>

	// draw four corners
	lcdDrawCircleHelper(x + r, y + r, r, 1, color);
 80010a8:	88fa      	ldrh	r2, [r7, #6]
 80010aa:	8b3b      	ldrh	r3, [r7, #24]
 80010ac:	4413      	add	r3, r2
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	b218      	sxth	r0, r3
 80010b2:	88ba      	ldrh	r2, [r7, #4]
 80010b4:	8b3b      	ldrh	r3, [r7, #24]
 80010b6:	4413      	add	r3, r2
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	b219      	sxth	r1, r3
 80010bc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80010c0:	8bbb      	ldrh	r3, [r7, #28]
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2301      	movs	r3, #1
 80010c6:	f000 f84b 	bl	8001160 <lcdDrawCircleHelper>
	lcdDrawCircleHelper(x + w - r - 1, y + r, r, 2, color);
 80010ca:	88fa      	ldrh	r2, [r7, #6]
 80010cc:	887b      	ldrh	r3, [r7, #2]
 80010ce:	4413      	add	r3, r2
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	8b3b      	ldrh	r3, [r7, #24]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	3b01      	subs	r3, #1
 80010da:	b29b      	uxth	r3, r3
 80010dc:	b218      	sxth	r0, r3
 80010de:	88ba      	ldrh	r2, [r7, #4]
 80010e0:	8b3b      	ldrh	r3, [r7, #24]
 80010e2:	4413      	add	r3, r2
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	b219      	sxth	r1, r3
 80010e8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80010ec:	8bbb      	ldrh	r3, [r7, #28]
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2302      	movs	r3, #2
 80010f2:	f000 f835 	bl	8001160 <lcdDrawCircleHelper>
	lcdDrawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4, color);
 80010f6:	88fa      	ldrh	r2, [r7, #6]
 80010f8:	887b      	ldrh	r3, [r7, #2]
 80010fa:	4413      	add	r3, r2
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	8b3b      	ldrh	r3, [r7, #24]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	b29b      	uxth	r3, r3
 8001104:	3b01      	subs	r3, #1
 8001106:	b29b      	uxth	r3, r3
 8001108:	b218      	sxth	r0, r3
 800110a:	88ba      	ldrh	r2, [r7, #4]
 800110c:	883b      	ldrh	r3, [r7, #0]
 800110e:	4413      	add	r3, r2
 8001110:	b29a      	uxth	r2, r3
 8001112:	8b3b      	ldrh	r3, [r7, #24]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	b29b      	uxth	r3, r3
 8001118:	3b01      	subs	r3, #1
 800111a:	b29b      	uxth	r3, r3
 800111c:	b219      	sxth	r1, r3
 800111e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001122:	8bbb      	ldrh	r3, [r7, #28]
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	2304      	movs	r3, #4
 8001128:	f000 f81a 	bl	8001160 <lcdDrawCircleHelper>
	lcdDrawCircleHelper(x + r, y + h - r - 1, r, 8, color);
 800112c:	88fa      	ldrh	r2, [r7, #6]
 800112e:	8b3b      	ldrh	r3, [r7, #24]
 8001130:	4413      	add	r3, r2
 8001132:	b29b      	uxth	r3, r3
 8001134:	b218      	sxth	r0, r3
 8001136:	88ba      	ldrh	r2, [r7, #4]
 8001138:	883b      	ldrh	r3, [r7, #0]
 800113a:	4413      	add	r3, r2
 800113c:	b29a      	uxth	r2, r3
 800113e:	8b3b      	ldrh	r3, [r7, #24]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	b29b      	uxth	r3, r3
 8001144:	3b01      	subs	r3, #1
 8001146:	b29b      	uxth	r3, r3
 8001148:	b219      	sxth	r1, r3
 800114a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800114e:	8bbb      	ldrh	r3, [r7, #28]
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2308      	movs	r3, #8
 8001154:	f000 f804 	bl	8001160 <lcdDrawCircleHelper>
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	bd90      	pop	{r4, r7, pc}

08001160 <lcdDrawCircleHelper>:
 * \param color			Color
 *
 * \return void
 */
void lcdDrawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b087      	sub	sp, #28
 8001164:	af00      	add	r7, sp, #0
 8001166:	4604      	mov	r4, r0
 8001168:	4608      	mov	r0, r1
 800116a:	4611      	mov	r1, r2
 800116c:	461a      	mov	r2, r3
 800116e:	4623      	mov	r3, r4
 8001170:	80fb      	strh	r3, [r7, #6]
 8001172:	4603      	mov	r3, r0
 8001174:	80bb      	strh	r3, [r7, #4]
 8001176:	460b      	mov	r3, r1
 8001178:	807b      	strh	r3, [r7, #2]
 800117a:	4613      	mov	r3, r2
 800117c:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 800117e:	887b      	ldrh	r3, [r7, #2]
 8001180:	f1c3 0301 	rsb	r3, r3, #1
 8001184:	b29b      	uxth	r3, r3
 8001186:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8001188:	2301      	movs	r3, #1
 800118a:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 800118c:	887b      	ldrh	r3, [r7, #2]
 800118e:	461a      	mov	r2, r3
 8001190:	03d2      	lsls	r2, r2, #15
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	b29b      	uxth	r3, r3
 8001198:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800119e:	887b      	ldrh	r3, [r7, #2]
 80011a0:	81fb      	strh	r3, [r7, #14]

	while (x < y)
 80011a2:	e095      	b.n	80012d0 <lcdDrawCircleHelper+0x170>
	{
		if (f >= 0)
 80011a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	db0e      	blt.n	80011ca <lcdDrawCircleHelper+0x6a>
		{
			y--;
 80011ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	3b01      	subs	r3, #1
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80011b8:	8a7b      	ldrh	r3, [r7, #18]
 80011ba:	3302      	adds	r3, #2
 80011bc:	b29b      	uxth	r3, r3
 80011be:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 80011c0:	8afa      	ldrh	r2, [r7, #22]
 80011c2:	8a7b      	ldrh	r3, [r7, #18]
 80011c4:	4413      	add	r3, r2
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 80011ca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	3301      	adds	r3, #1
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 80011d6:	8abb      	ldrh	r3, [r7, #20]
 80011d8:	3302      	adds	r3, #2
 80011da:	b29b      	uxth	r3, r3
 80011dc:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 80011de:	8afa      	ldrh	r2, [r7, #22]
 80011e0:	8abb      	ldrh	r3, [r7, #20]
 80011e2:	4413      	add	r3, r2
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	82fb      	strh	r3, [r7, #22]
		if (cornername & 0x4)
 80011e8:	787b      	ldrb	r3, [r7, #1]
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d017      	beq.n	8001222 <lcdDrawCircleHelper+0xc2>
		{
			lcdDrawPixel(x0 + x, y0 + y, color);
 80011f2:	88fa      	ldrh	r2, [r7, #6]
 80011f4:	8a3b      	ldrh	r3, [r7, #16]
 80011f6:	4413      	add	r3, r2
 80011f8:	b298      	uxth	r0, r3
 80011fa:	88ba      	ldrh	r2, [r7, #4]
 80011fc:	89fb      	ldrh	r3, [r7, #14]
 80011fe:	4413      	add	r3, r2
 8001200:	b29b      	uxth	r3, r3
 8001202:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001204:	4619      	mov	r1, r3
 8001206:	f7ff fd59 	bl	8000cbc <lcdDrawPixel>
			lcdDrawPixel(x0 + y, y0 + x, color);
 800120a:	88fa      	ldrh	r2, [r7, #6]
 800120c:	89fb      	ldrh	r3, [r7, #14]
 800120e:	4413      	add	r3, r2
 8001210:	b298      	uxth	r0, r3
 8001212:	88ba      	ldrh	r2, [r7, #4]
 8001214:	8a3b      	ldrh	r3, [r7, #16]
 8001216:	4413      	add	r3, r2
 8001218:	b29b      	uxth	r3, r3
 800121a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800121c:	4619      	mov	r1, r3
 800121e:	f7ff fd4d 	bl	8000cbc <lcdDrawPixel>
		}
		if (cornername & 0x2)
 8001222:	787b      	ldrb	r3, [r7, #1]
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d017      	beq.n	800125c <lcdDrawCircleHelper+0xfc>
		{
			lcdDrawPixel(x0 + x, y0 - y, color);
 800122c:	88fa      	ldrh	r2, [r7, #6]
 800122e:	8a3b      	ldrh	r3, [r7, #16]
 8001230:	4413      	add	r3, r2
 8001232:	b298      	uxth	r0, r3
 8001234:	88ba      	ldrh	r2, [r7, #4]
 8001236:	89fb      	ldrh	r3, [r7, #14]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	b29b      	uxth	r3, r3
 800123c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800123e:	4619      	mov	r1, r3
 8001240:	f7ff fd3c 	bl	8000cbc <lcdDrawPixel>
			lcdDrawPixel(x0 + y, y0 - x, color);
 8001244:	88fa      	ldrh	r2, [r7, #6]
 8001246:	89fb      	ldrh	r3, [r7, #14]
 8001248:	4413      	add	r3, r2
 800124a:	b298      	uxth	r0, r3
 800124c:	88ba      	ldrh	r2, [r7, #4]
 800124e:	8a3b      	ldrh	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	b29b      	uxth	r3, r3
 8001254:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001256:	4619      	mov	r1, r3
 8001258:	f7ff fd30 	bl	8000cbc <lcdDrawPixel>
		}
		if (cornername & 0x8)
 800125c:	787b      	ldrb	r3, [r7, #1]
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	2b00      	cmp	r3, #0
 8001264:	d017      	beq.n	8001296 <lcdDrawCircleHelper+0x136>
		{
			lcdDrawPixel(x0 - y, y0 + x, color);
 8001266:	88fa      	ldrh	r2, [r7, #6]
 8001268:	89fb      	ldrh	r3, [r7, #14]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	b298      	uxth	r0, r3
 800126e:	88ba      	ldrh	r2, [r7, #4]
 8001270:	8a3b      	ldrh	r3, [r7, #16]
 8001272:	4413      	add	r3, r2
 8001274:	b29b      	uxth	r3, r3
 8001276:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001278:	4619      	mov	r1, r3
 800127a:	f7ff fd1f 	bl	8000cbc <lcdDrawPixel>
			lcdDrawPixel(x0 - x, y0 + y, color);
 800127e:	88fa      	ldrh	r2, [r7, #6]
 8001280:	8a3b      	ldrh	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	b298      	uxth	r0, r3
 8001286:	88ba      	ldrh	r2, [r7, #4]
 8001288:	89fb      	ldrh	r3, [r7, #14]
 800128a:	4413      	add	r3, r2
 800128c:	b29b      	uxth	r3, r3
 800128e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001290:	4619      	mov	r1, r3
 8001292:	f7ff fd13 	bl	8000cbc <lcdDrawPixel>
		}
		if (cornername & 0x1)
 8001296:	787b      	ldrb	r3, [r7, #1]
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	2b00      	cmp	r3, #0
 800129e:	d017      	beq.n	80012d0 <lcdDrawCircleHelper+0x170>
		{
			lcdDrawPixel(x0 - y, y0 - x, color);
 80012a0:	88fa      	ldrh	r2, [r7, #6]
 80012a2:	89fb      	ldrh	r3, [r7, #14]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	b298      	uxth	r0, r3
 80012a8:	88ba      	ldrh	r2, [r7, #4]
 80012aa:	8a3b      	ldrh	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80012b2:	4619      	mov	r1, r3
 80012b4:	f7ff fd02 	bl	8000cbc <lcdDrawPixel>
			lcdDrawPixel(x0 - x, y0 - y, color);
 80012b8:	88fa      	ldrh	r2, [r7, #6]
 80012ba:	8a3b      	ldrh	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	b298      	uxth	r0, r3
 80012c0:	88ba      	ldrh	r2, [r7, #4]
 80012c2:	89fb      	ldrh	r3, [r7, #14]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80012ca:	4619      	mov	r1, r3
 80012cc:	f7ff fcf6 	bl	8000cbc <lcdDrawPixel>
	while (x < y)
 80012d0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80012d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012d8:	429a      	cmp	r2, r3
 80012da:	f6ff af63 	blt.w	80011a4 <lcdDrawCircleHelper+0x44>
		}
	}
}
 80012de:	bf00      	nop
 80012e0:	bf00      	nop
 80012e2:	371c      	adds	r7, #28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd90      	pop	{r4, r7, pc}

080012e8 <lcdDrawCircle>:
 * \param color		Color
 *
 * \return void
 */
void lcdDrawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b087      	sub	sp, #28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4604      	mov	r4, r0
 80012f0:	4608      	mov	r0, r1
 80012f2:	4611      	mov	r1, r2
 80012f4:	461a      	mov	r2, r3
 80012f6:	4623      	mov	r3, r4
 80012f8:	80fb      	strh	r3, [r7, #6]
 80012fa:	4603      	mov	r3, r0
 80012fc:	80bb      	strh	r3, [r7, #4]
 80012fe:	460b      	mov	r3, r1
 8001300:	807b      	strh	r3, [r7, #2]
 8001302:	4613      	mov	r3, r2
 8001304:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 8001306:	887b      	ldrh	r3, [r7, #2]
 8001308:	f1c3 0301 	rsb	r3, r3, #1
 800130c:	b29b      	uxth	r3, r3
 800130e:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8001310:	2301      	movs	r3, #1
 8001312:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8001314:	887b      	ldrh	r3, [r7, #2]
 8001316:	461a      	mov	r2, r3
 8001318:	03d2      	lsls	r2, r2, #15
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	b29b      	uxth	r3, r3
 8001320:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8001326:	887b      	ldrh	r3, [r7, #2]
 8001328:	81fb      	strh	r3, [r7, #14]

	lcdDrawPixel(x0, y0 + r, color);
 800132a:	88f8      	ldrh	r0, [r7, #6]
 800132c:	88ba      	ldrh	r2, [r7, #4]
 800132e:	887b      	ldrh	r3, [r7, #2]
 8001330:	4413      	add	r3, r2
 8001332:	b29b      	uxth	r3, r3
 8001334:	883a      	ldrh	r2, [r7, #0]
 8001336:	4619      	mov	r1, r3
 8001338:	f7ff fcc0 	bl	8000cbc <lcdDrawPixel>
	lcdDrawPixel(x0, y0 - r, color);
 800133c:	88f8      	ldrh	r0, [r7, #6]
 800133e:	88ba      	ldrh	r2, [r7, #4]
 8001340:	887b      	ldrh	r3, [r7, #2]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	b29b      	uxth	r3, r3
 8001346:	883a      	ldrh	r2, [r7, #0]
 8001348:	4619      	mov	r1, r3
 800134a:	f7ff fcb7 	bl	8000cbc <lcdDrawPixel>
	lcdDrawPixel(x0 + r, y0, color);
 800134e:	88fa      	ldrh	r2, [r7, #6]
 8001350:	887b      	ldrh	r3, [r7, #2]
 8001352:	4413      	add	r3, r2
 8001354:	b29b      	uxth	r3, r3
 8001356:	88b9      	ldrh	r1, [r7, #4]
 8001358:	883a      	ldrh	r2, [r7, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fcae 	bl	8000cbc <lcdDrawPixel>
	lcdDrawPixel(x0 - r, y0, color);
 8001360:	88fa      	ldrh	r2, [r7, #6]
 8001362:	887b      	ldrh	r3, [r7, #2]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	b29b      	uxth	r3, r3
 8001368:	88b9      	ldrh	r1, [r7, #4]
 800136a:	883a      	ldrh	r2, [r7, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fca5 	bl	8000cbc <lcdDrawPixel>

	while (x < y)
 8001372:	e081      	b.n	8001478 <lcdDrawCircle+0x190>
	{
		if (f >= 0)
 8001374:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001378:	2b00      	cmp	r3, #0
 800137a:	db0e      	blt.n	800139a <lcdDrawCircle+0xb2>
		{
			y--;
 800137c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001380:	b29b      	uxth	r3, r3
 8001382:	3b01      	subs	r3, #1
 8001384:	b29b      	uxth	r3, r3
 8001386:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8001388:	8a7b      	ldrh	r3, [r7, #18]
 800138a:	3302      	adds	r3, #2
 800138c:	b29b      	uxth	r3, r3
 800138e:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8001390:	8afa      	ldrh	r2, [r7, #22]
 8001392:	8a7b      	ldrh	r3, [r7, #18]
 8001394:	4413      	add	r3, r2
 8001396:	b29b      	uxth	r3, r3
 8001398:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 800139a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800139e:	b29b      	uxth	r3, r3
 80013a0:	3301      	adds	r3, #1
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 80013a6:	8abb      	ldrh	r3, [r7, #20]
 80013a8:	3302      	adds	r3, #2
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 80013ae:	8afa      	ldrh	r2, [r7, #22]
 80013b0:	8abb      	ldrh	r3, [r7, #20]
 80013b2:	4413      	add	r3, r2
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	82fb      	strh	r3, [r7, #22]

		lcdDrawPixel(x0 + x, y0 + y, color);
 80013b8:	88fa      	ldrh	r2, [r7, #6]
 80013ba:	8a3b      	ldrh	r3, [r7, #16]
 80013bc:	4413      	add	r3, r2
 80013be:	b298      	uxth	r0, r3
 80013c0:	88ba      	ldrh	r2, [r7, #4]
 80013c2:	89fb      	ldrh	r3, [r7, #14]
 80013c4:	4413      	add	r3, r2
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	883a      	ldrh	r2, [r7, #0]
 80013ca:	4619      	mov	r1, r3
 80013cc:	f7ff fc76 	bl	8000cbc <lcdDrawPixel>
		lcdDrawPixel(x0 - x, y0 + y, color);
 80013d0:	88fa      	ldrh	r2, [r7, #6]
 80013d2:	8a3b      	ldrh	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	b298      	uxth	r0, r3
 80013d8:	88ba      	ldrh	r2, [r7, #4]
 80013da:	89fb      	ldrh	r3, [r7, #14]
 80013dc:	4413      	add	r3, r2
 80013de:	b29b      	uxth	r3, r3
 80013e0:	883a      	ldrh	r2, [r7, #0]
 80013e2:	4619      	mov	r1, r3
 80013e4:	f7ff fc6a 	bl	8000cbc <lcdDrawPixel>
		lcdDrawPixel(x0 + x, y0 - y, color);
 80013e8:	88fa      	ldrh	r2, [r7, #6]
 80013ea:	8a3b      	ldrh	r3, [r7, #16]
 80013ec:	4413      	add	r3, r2
 80013ee:	b298      	uxth	r0, r3
 80013f0:	88ba      	ldrh	r2, [r7, #4]
 80013f2:	89fb      	ldrh	r3, [r7, #14]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	883a      	ldrh	r2, [r7, #0]
 80013fa:	4619      	mov	r1, r3
 80013fc:	f7ff fc5e 	bl	8000cbc <lcdDrawPixel>
		lcdDrawPixel(x0 - x, y0 - y, color);
 8001400:	88fa      	ldrh	r2, [r7, #6]
 8001402:	8a3b      	ldrh	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	b298      	uxth	r0, r3
 8001408:	88ba      	ldrh	r2, [r7, #4]
 800140a:	89fb      	ldrh	r3, [r7, #14]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	b29b      	uxth	r3, r3
 8001410:	883a      	ldrh	r2, [r7, #0]
 8001412:	4619      	mov	r1, r3
 8001414:	f7ff fc52 	bl	8000cbc <lcdDrawPixel>
		lcdDrawPixel(x0 + y, y0 + x, color);
 8001418:	88fa      	ldrh	r2, [r7, #6]
 800141a:	89fb      	ldrh	r3, [r7, #14]
 800141c:	4413      	add	r3, r2
 800141e:	b298      	uxth	r0, r3
 8001420:	88ba      	ldrh	r2, [r7, #4]
 8001422:	8a3b      	ldrh	r3, [r7, #16]
 8001424:	4413      	add	r3, r2
 8001426:	b29b      	uxth	r3, r3
 8001428:	883a      	ldrh	r2, [r7, #0]
 800142a:	4619      	mov	r1, r3
 800142c:	f7ff fc46 	bl	8000cbc <lcdDrawPixel>
		lcdDrawPixel(x0 - y, y0 + x, color);
 8001430:	88fa      	ldrh	r2, [r7, #6]
 8001432:	89fb      	ldrh	r3, [r7, #14]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	b298      	uxth	r0, r3
 8001438:	88ba      	ldrh	r2, [r7, #4]
 800143a:	8a3b      	ldrh	r3, [r7, #16]
 800143c:	4413      	add	r3, r2
 800143e:	b29b      	uxth	r3, r3
 8001440:	883a      	ldrh	r2, [r7, #0]
 8001442:	4619      	mov	r1, r3
 8001444:	f7ff fc3a 	bl	8000cbc <lcdDrawPixel>
		lcdDrawPixel(x0 + y, y0 - x, color);
 8001448:	88fa      	ldrh	r2, [r7, #6]
 800144a:	89fb      	ldrh	r3, [r7, #14]
 800144c:	4413      	add	r3, r2
 800144e:	b298      	uxth	r0, r3
 8001450:	88ba      	ldrh	r2, [r7, #4]
 8001452:	8a3b      	ldrh	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	b29b      	uxth	r3, r3
 8001458:	883a      	ldrh	r2, [r7, #0]
 800145a:	4619      	mov	r1, r3
 800145c:	f7ff fc2e 	bl	8000cbc <lcdDrawPixel>
		lcdDrawPixel(x0 - y, y0 - x, color);
 8001460:	88fa      	ldrh	r2, [r7, #6]
 8001462:	89fb      	ldrh	r3, [r7, #14]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	b298      	uxth	r0, r3
 8001468:	88ba      	ldrh	r2, [r7, #4]
 800146a:	8a3b      	ldrh	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	b29b      	uxth	r3, r3
 8001470:	883a      	ldrh	r2, [r7, #0]
 8001472:	4619      	mov	r1, r3
 8001474:	f7ff fc22 	bl	8000cbc <lcdDrawPixel>
	while (x < y)
 8001478:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800147c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001480:	429a      	cmp	r2, r3
 8001482:	f6ff af77 	blt.w	8001374 <lcdDrawCircle+0x8c>
	}
}
 8001486:	bf00      	nop
 8001488:	bf00      	nop
 800148a:	371c      	adds	r7, #28
 800148c:	46bd      	mov	sp, r7
 800148e:	bd90      	pop	{r4, r7, pc}

08001490 <lcdDrawTriangle>:
    @param    y2  Vertex #2 y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void lcdDrawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8001490:	b590      	push	{r4, r7, lr}
 8001492:	b085      	sub	sp, #20
 8001494:	af02      	add	r7, sp, #8
 8001496:	4604      	mov	r4, r0
 8001498:	4608      	mov	r0, r1
 800149a:	4611      	mov	r1, r2
 800149c:	461a      	mov	r2, r3
 800149e:	4623      	mov	r3, r4
 80014a0:	80fb      	strh	r3, [r7, #6]
 80014a2:	4603      	mov	r3, r0
 80014a4:	80bb      	strh	r3, [r7, #4]
 80014a6:	460b      	mov	r3, r1
 80014a8:	807b      	strh	r3, [r7, #2]
 80014aa:	4613      	mov	r3, r2
 80014ac:	803b      	strh	r3, [r7, #0]
    lcdDrawLine(x0, y0, x1, y1, color);
 80014ae:	f9b7 4000 	ldrsh.w	r4, [r7]
 80014b2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80014b6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80014ba:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80014be:	8c3b      	ldrh	r3, [r7, #32]
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	4623      	mov	r3, r4
 80014c4:	f7ff fcb4 	bl	8000e30 <lcdDrawLine>
    lcdDrawLine(x1, y1, x2, y2, color);
 80014c8:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 80014cc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80014d0:	f9b7 1000 	ldrsh.w	r1, [r7]
 80014d4:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80014d8:	8c3b      	ldrh	r3, [r7, #32]
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	4623      	mov	r3, r4
 80014de:	f7ff fca7 	bl	8000e30 <lcdDrawLine>
    lcdDrawLine(x2, y2, x0, y0, color);
 80014e2:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80014e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014ea:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 80014ee:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80014f2:	8c3b      	ldrh	r3, [r7, #32]
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	4623      	mov	r3, r4
 80014f8:	f7ff fc9a 	bl	8000e30 <lcdDrawLine>
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	bd90      	pop	{r4, r7, pc}

08001504 <lcdFillCircle>:
 * \param color		Color
 *
 * \return void
 */
void lcdFillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8001504:	b590      	push	{r4, r7, lr}
 8001506:	b085      	sub	sp, #20
 8001508:	af02      	add	r7, sp, #8
 800150a:	4604      	mov	r4, r0
 800150c:	4608      	mov	r0, r1
 800150e:	4611      	mov	r1, r2
 8001510:	461a      	mov	r2, r3
 8001512:	4623      	mov	r3, r4
 8001514:	80fb      	strh	r3, [r7, #6]
 8001516:	4603      	mov	r3, r0
 8001518:	80bb      	strh	r3, [r7, #4]
 800151a:	460b      	mov	r3, r1
 800151c:	807b      	strh	r3, [r7, #2]
 800151e:	4613      	mov	r3, r2
 8001520:	803b      	strh	r3, [r7, #0]
	lcdDrawVLine(x0, y0 - r, y0 + r + 1, color);
 8001522:	88f8      	ldrh	r0, [r7, #6]
 8001524:	88ba      	ldrh	r2, [r7, #4]
 8001526:	887b      	ldrh	r3, [r7, #2]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	b299      	uxth	r1, r3
 800152c:	88ba      	ldrh	r2, [r7, #4]
 800152e:	887b      	ldrh	r3, [r7, #2]
 8001530:	4413      	add	r3, r2
 8001532:	b29b      	uxth	r3, r3
 8001534:	3301      	adds	r3, #1
 8001536:	b29a      	uxth	r2, r3
 8001538:	883b      	ldrh	r3, [r7, #0]
 800153a:	f7ff fc29 	bl	8000d90 <lcdDrawVLine>
	lcdFillCircleHelper(x0, y0, r, 3, 0, color);
 800153e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001542:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001546:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800154a:	883b      	ldrh	r3, [r7, #0]
 800154c:	9301      	str	r3, [sp, #4]
 800154e:	2300      	movs	r3, #0
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	2303      	movs	r3, #3
 8001554:	f000 f804 	bl	8001560 <lcdFillCircleHelper>
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	bd90      	pop	{r4, r7, pc}

08001560 <lcdFillCircleHelper>:
 * \param color			Color
 *
 * \return void
 */
void lcdFillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b087      	sub	sp, #28
 8001564:	af00      	add	r7, sp, #0
 8001566:	4604      	mov	r4, r0
 8001568:	4608      	mov	r0, r1
 800156a:	4611      	mov	r1, r2
 800156c:	461a      	mov	r2, r3
 800156e:	4623      	mov	r3, r4
 8001570:	80fb      	strh	r3, [r7, #6]
 8001572:	4603      	mov	r3, r0
 8001574:	80bb      	strh	r3, [r7, #4]
 8001576:	460b      	mov	r3, r1
 8001578:	807b      	strh	r3, [r7, #2]
 800157a:	4613      	mov	r3, r2
 800157c:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 800157e:	887b      	ldrh	r3, [r7, #2]
 8001580:	f1c3 0301 	rsb	r3, r3, #1
 8001584:	b29b      	uxth	r3, r3
 8001586:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8001588:	2301      	movs	r3, #1
 800158a:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 800158c:	887b      	ldrh	r3, [r7, #2]
 800158e:	461a      	mov	r2, r3
 8001590:	03d2      	lsls	r2, r2, #15
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	b29b      	uxth	r3, r3
 8001598:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800159e:	887b      	ldrh	r3, [r7, #2]
 80015a0:	81fb      	strh	r3, [r7, #14]

	while (x < y)
 80015a2:	e07b      	b.n	800169c <lcdFillCircleHelper+0x13c>
	{
		if (f >= 0)
 80015a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	db0e      	blt.n	80015ca <lcdFillCircleHelper+0x6a>
		{
			y--;
 80015ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	3b01      	subs	r3, #1
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80015b8:	8a7b      	ldrh	r3, [r7, #18]
 80015ba:	3302      	adds	r3, #2
 80015bc:	b29b      	uxth	r3, r3
 80015be:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 80015c0:	8afa      	ldrh	r2, [r7, #22]
 80015c2:	8a7b      	ldrh	r3, [r7, #18]
 80015c4:	4413      	add	r3, r2
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 80015ca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	3301      	adds	r3, #1
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 80015d6:	8abb      	ldrh	r3, [r7, #20]
 80015d8:	3302      	adds	r3, #2
 80015da:	b29b      	uxth	r3, r3
 80015dc:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 80015de:	8afa      	ldrh	r2, [r7, #22]
 80015e0:	8abb      	ldrh	r3, [r7, #20]
 80015e2:	4413      	add	r3, r2
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	82fb      	strh	r3, [r7, #22]

		if (cornername & 0x1)
 80015e8:	787b      	ldrb	r3, [r7, #1]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d027      	beq.n	8001642 <lcdFillCircleHelper+0xe2>
		{
			lcdDrawVLine(x0 + x, y0 - y, y0 + y + 1 + delta, color);
 80015f2:	88fa      	ldrh	r2, [r7, #6]
 80015f4:	8a3b      	ldrh	r3, [r7, #16]
 80015f6:	4413      	add	r3, r2
 80015f8:	b298      	uxth	r0, r3
 80015fa:	88ba      	ldrh	r2, [r7, #4]
 80015fc:	89fb      	ldrh	r3, [r7, #14]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	b299      	uxth	r1, r3
 8001602:	88ba      	ldrh	r2, [r7, #4]
 8001604:	89fb      	ldrh	r3, [r7, #14]
 8001606:	4413      	add	r3, r2
 8001608:	b29a      	uxth	r2, r3
 800160a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800160c:	4413      	add	r3, r2
 800160e:	b29b      	uxth	r3, r3
 8001610:	3301      	adds	r3, #1
 8001612:	b29a      	uxth	r2, r3
 8001614:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001616:	f7ff fbbb 	bl	8000d90 <lcdDrawVLine>
			lcdDrawVLine(x0 + y, y0 - x, y0 + x + 1 + delta, color);
 800161a:	88fa      	ldrh	r2, [r7, #6]
 800161c:	89fb      	ldrh	r3, [r7, #14]
 800161e:	4413      	add	r3, r2
 8001620:	b298      	uxth	r0, r3
 8001622:	88ba      	ldrh	r2, [r7, #4]
 8001624:	8a3b      	ldrh	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	b299      	uxth	r1, r3
 800162a:	88ba      	ldrh	r2, [r7, #4]
 800162c:	8a3b      	ldrh	r3, [r7, #16]
 800162e:	4413      	add	r3, r2
 8001630:	b29a      	uxth	r2, r3
 8001632:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001634:	4413      	add	r3, r2
 8001636:	b29b      	uxth	r3, r3
 8001638:	3301      	adds	r3, #1
 800163a:	b29a      	uxth	r2, r3
 800163c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800163e:	f7ff fba7 	bl	8000d90 <lcdDrawVLine>
		}
		if (cornername & 0x2)
 8001642:	787b      	ldrb	r3, [r7, #1]
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d027      	beq.n	800169c <lcdFillCircleHelper+0x13c>
		{
			lcdDrawVLine(x0 - x, y0 - y, y0 + y + 1 + delta, color);
 800164c:	88fa      	ldrh	r2, [r7, #6]
 800164e:	8a3b      	ldrh	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	b298      	uxth	r0, r3
 8001654:	88ba      	ldrh	r2, [r7, #4]
 8001656:	89fb      	ldrh	r3, [r7, #14]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	b299      	uxth	r1, r3
 800165c:	88ba      	ldrh	r2, [r7, #4]
 800165e:	89fb      	ldrh	r3, [r7, #14]
 8001660:	4413      	add	r3, r2
 8001662:	b29a      	uxth	r2, r3
 8001664:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001666:	4413      	add	r3, r2
 8001668:	b29b      	uxth	r3, r3
 800166a:	3301      	adds	r3, #1
 800166c:	b29a      	uxth	r2, r3
 800166e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001670:	f7ff fb8e 	bl	8000d90 <lcdDrawVLine>
			lcdDrawVLine(x0 - y, y0 - x, y0 + x + 1 + delta, color);
 8001674:	88fa      	ldrh	r2, [r7, #6]
 8001676:	89fb      	ldrh	r3, [r7, #14]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	b298      	uxth	r0, r3
 800167c:	88ba      	ldrh	r2, [r7, #4]
 800167e:	8a3b      	ldrh	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	b299      	uxth	r1, r3
 8001684:	88ba      	ldrh	r2, [r7, #4]
 8001686:	8a3b      	ldrh	r3, [r7, #16]
 8001688:	4413      	add	r3, r2
 800168a:	b29a      	uxth	r2, r3
 800168c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800168e:	4413      	add	r3, r2
 8001690:	b29b      	uxth	r3, r3
 8001692:	3301      	adds	r3, #1
 8001694:	b29a      	uxth	r2, r3
 8001696:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001698:	f7ff fb7a 	bl	8000d90 <lcdDrawVLine>
	while (x < y)
 800169c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80016a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	f6ff af7d 	blt.w	80015a4 <lcdFillCircleHelper+0x44>
		}
	}
}
 80016aa:	bf00      	nop
 80016ac:	bf00      	nop
 80016ae:	371c      	adds	r7, #28
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd90      	pop	{r4, r7, pc}

080016b4 <lcdFillRect>:
 * \param fillcolor		Color
 *
 * \return void
 */
void lcdFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t fillcolor)
{
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4604      	mov	r4, r0
 80016bc:	4608      	mov	r0, r1
 80016be:	4611      	mov	r1, r2
 80016c0:	461a      	mov	r2, r3
 80016c2:	4623      	mov	r3, r4
 80016c4:	80fb      	strh	r3, [r7, #6]
 80016c6:	4603      	mov	r3, r0
 80016c8:	80bb      	strh	r3, [r7, #4]
 80016ca:	460b      	mov	r3, r1
 80016cc:	807b      	strh	r3, [r7, #2]
 80016ce:	4613      	mov	r3, r2
 80016d0:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 80016d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016d6:	4a24      	ldr	r2, [pc, #144]	; (8001768 <lcdFillRect+0xb4>)
 80016d8:	8812      	ldrh	r2, [r2, #0]
 80016da:	4293      	cmp	r3, r2
 80016dc:	da3f      	bge.n	800175e <lcdFillRect+0xaa>
 80016de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016e2:	4a21      	ldr	r2, [pc, #132]	; (8001768 <lcdFillRect+0xb4>)
 80016e4:	8852      	ldrh	r2, [r2, #2]
 80016e6:	4293      	cmp	r3, r2
 80016e8:	da39      	bge.n	800175e <lcdFillRect+0xaa>
	if((x + w - 1) >= lcdProperties.width) w = lcdProperties.width - x;
 80016ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80016ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80016f2:	4413      	add	r3, r2
 80016f4:	4a1c      	ldr	r2, [pc, #112]	; (8001768 <lcdFillRect+0xb4>)
 80016f6:	8812      	ldrh	r2, [r2, #0]
 80016f8:	4293      	cmp	r3, r2
 80016fa:	dd05      	ble.n	8001708 <lcdFillRect+0x54>
 80016fc:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <lcdFillRect+0xb4>)
 80016fe:	881a      	ldrh	r2, [r3, #0]
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	b29b      	uxth	r3, r3
 8001706:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= lcdProperties.height) h = lcdProperties.height - y;
 8001708:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800170c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001710:	4413      	add	r3, r2
 8001712:	4a15      	ldr	r2, [pc, #84]	; (8001768 <lcdFillRect+0xb4>)
 8001714:	8852      	ldrh	r2, [r2, #2]
 8001716:	4293      	cmp	r3, r2
 8001718:	dd05      	ble.n	8001726 <lcdFillRect+0x72>
 800171a:	4b13      	ldr	r3, [pc, #76]	; (8001768 <lcdFillRect+0xb4>)
 800171c:	885a      	ldrh	r2, [r3, #2]
 800171e:	88bb      	ldrh	r3, [r7, #4]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	b29b      	uxth	r3, r3
 8001724:	803b      	strh	r3, [r7, #0]

	for(int16_t y1 = y; y1 <= y + h; y1++)
 8001726:	88bb      	ldrh	r3, [r7, #4]
 8001728:	81fb      	strh	r3, [r7, #14]
 800172a:	e00e      	b.n	800174a <lcdFillRect+0x96>
	{
		lcdDrawHLine(x, x + w, y1, fillcolor);
 800172c:	88f8      	ldrh	r0, [r7, #6]
 800172e:	88fa      	ldrh	r2, [r7, #6]
 8001730:	887b      	ldrh	r3, [r7, #2]
 8001732:	4413      	add	r3, r2
 8001734:	b299      	uxth	r1, r3
 8001736:	89fa      	ldrh	r2, [r7, #14]
 8001738:	8c3b      	ldrh	r3, [r7, #32]
 800173a:	f7ff fae3 	bl	8000d04 <lcdDrawHLine>
	for(int16_t y1 = y; y1 <= y + h; y1++)
 800173e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001742:	b29b      	uxth	r3, r3
 8001744:	3301      	adds	r3, #1
 8001746:	b29b      	uxth	r3, r3
 8001748:	81fb      	strh	r3, [r7, #14]
 800174a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800174e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001752:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001756:	440b      	add	r3, r1
 8001758:	429a      	cmp	r2, r3
 800175a:	dde7      	ble.n	800172c <lcdFillRect+0x78>
 800175c:	e000      	b.n	8001760 <lcdFillRect+0xac>
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 800175e:	bf00      	nop
	}
}
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	bd90      	pop	{r4, r7, pc}
 8001766:	bf00      	nop
 8001768:	20000028 	.word	0x20000028

0800176c <lcdFillRoundRect>:
 * \param fillcolor		Color
 *
 * \return void
 */
void lcdFillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 800176c:	b590      	push	{r4, r7, lr}
 800176e:	b085      	sub	sp, #20
 8001770:	af02      	add	r7, sp, #8
 8001772:	4604      	mov	r4, r0
 8001774:	4608      	mov	r0, r1
 8001776:	4611      	mov	r1, r2
 8001778:	461a      	mov	r2, r3
 800177a:	4623      	mov	r3, r4
 800177c:	80fb      	strh	r3, [r7, #6]
 800177e:	4603      	mov	r3, r0
 8001780:	80bb      	strh	r3, [r7, #4]
 8001782:	460b      	mov	r3, r1
 8001784:	807b      	strh	r3, [r7, #2]
 8001786:	4613      	mov	r3, r2
 8001788:	803b      	strh	r3, [r7, #0]
	// smarter version
	lcdFillRect(x + r, y, w - 2 * r, h, color);
 800178a:	88fa      	ldrh	r2, [r7, #6]
 800178c:	8b3b      	ldrh	r3, [r7, #24]
 800178e:	4413      	add	r3, r2
 8001790:	b29b      	uxth	r3, r3
 8001792:	b218      	sxth	r0, r3
 8001794:	887a      	ldrh	r2, [r7, #2]
 8001796:	8b3b      	ldrh	r3, [r7, #24]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	b29b      	uxth	r3, r3
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	b29b      	uxth	r3, r3
 80017a0:	b21a      	sxth	r2, r3
 80017a2:	f9b7 4000 	ldrsh.w	r4, [r7]
 80017a6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80017aa:	8bbb      	ldrh	r3, [r7, #28]
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	4623      	mov	r3, r4
 80017b0:	f7ff ff80 	bl	80016b4 <lcdFillRect>

	// draw four corners
	lcdFillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
 80017b4:	88fa      	ldrh	r2, [r7, #6]
 80017b6:	887b      	ldrh	r3, [r7, #2]
 80017b8:	4413      	add	r3, r2
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	8b3b      	ldrh	r3, [r7, #24]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	3b01      	subs	r3, #1
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	b218      	sxth	r0, r3
 80017c8:	88ba      	ldrh	r2, [r7, #4]
 80017ca:	8b3b      	ldrh	r3, [r7, #24]
 80017cc:	4413      	add	r3, r2
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	b219      	sxth	r1, r3
 80017d2:	883a      	ldrh	r2, [r7, #0]
 80017d4:	8b3b      	ldrh	r3, [r7, #24]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	b29b      	uxth	r3, r3
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	b29b      	uxth	r3, r3
 80017de:	3b01      	subs	r3, #1
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	b21b      	sxth	r3, r3
 80017e4:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 80017e8:	8bba      	ldrh	r2, [r7, #28]
 80017ea:	9201      	str	r2, [sp, #4]
 80017ec:	9300      	str	r3, [sp, #0]
 80017ee:	2301      	movs	r3, #1
 80017f0:	4622      	mov	r2, r4
 80017f2:	f7ff feb5 	bl	8001560 <lcdFillCircleHelper>
	lcdFillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
 80017f6:	88fa      	ldrh	r2, [r7, #6]
 80017f8:	8b3b      	ldrh	r3, [r7, #24]
 80017fa:	4413      	add	r3, r2
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	b218      	sxth	r0, r3
 8001800:	88ba      	ldrh	r2, [r7, #4]
 8001802:	8b3b      	ldrh	r3, [r7, #24]
 8001804:	4413      	add	r3, r2
 8001806:	b29b      	uxth	r3, r3
 8001808:	b219      	sxth	r1, r3
 800180a:	883a      	ldrh	r2, [r7, #0]
 800180c:	8b3b      	ldrh	r3, [r7, #24]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	b29b      	uxth	r3, r3
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	b29b      	uxth	r3, r3
 8001816:	3b01      	subs	r3, #1
 8001818:	b29b      	uxth	r3, r3
 800181a:	b21b      	sxth	r3, r3
 800181c:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8001820:	8bba      	ldrh	r2, [r7, #28]
 8001822:	9201      	str	r2, [sp, #4]
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	2302      	movs	r3, #2
 8001828:	4622      	mov	r2, r4
 800182a:	f7ff fe99 	bl	8001560 <lcdFillCircleHelper>
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	bd90      	pop	{r4, r7, pc}

08001836 <lcdFillTriangle>:
    @param    y2  Vertex #2 y coordinate
    @param    color 16-bit 5-6-5 Color to fill/draw with
*/
/**************************************************************************/
void lcdFillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8001836:	b590      	push	{r4, r7, lr}
 8001838:	b08f      	sub	sp, #60	; 0x3c
 800183a:	af00      	add	r7, sp, #0
 800183c:	4604      	mov	r4, r0
 800183e:	4608      	mov	r0, r1
 8001840:	4611      	mov	r1, r2
 8001842:	461a      	mov	r2, r3
 8001844:	4623      	mov	r3, r4
 8001846:	80fb      	strh	r3, [r7, #6]
 8001848:	4603      	mov	r3, r0
 800184a:	80bb      	strh	r3, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	807b      	strh	r3, [r7, #2]
 8001850:	4613      	mov	r3, r2
 8001852:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1)
 8001854:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001858:	f9b7 3000 	ldrsh.w	r3, [r7]
 800185c:	429a      	cmp	r2, r3
 800185e:	dd0b      	ble.n	8001878 <lcdFillTriangle+0x42>
    {
        swap(y0, y1); swap(x0, x1);
 8001860:	88bb      	ldrh	r3, [r7, #4]
 8001862:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001864:	883b      	ldrh	r3, [r7, #0]
 8001866:	80bb      	strh	r3, [r7, #4]
 8001868:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800186a:	803b      	strh	r3, [r7, #0]
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001870:	887b      	ldrh	r3, [r7, #2]
 8001872:	80fb      	strh	r3, [r7, #6]
 8001874:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001876:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2)
 8001878:	f9b7 2000 	ldrsh.w	r2, [r7]
 800187c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001880:	429a      	cmp	r2, r3
 8001882:	dd0f      	ble.n	80018a4 <lcdFillTriangle+0x6e>
    {
        swap(y2, y1); swap(x2, x1);
 8001884:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001888:	847b      	strh	r3, [r7, #34]	; 0x22
 800188a:	883b      	ldrh	r3, [r7, #0]
 800188c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001890:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001892:	803b      	strh	r3, [r7, #0]
 8001894:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001898:	843b      	strh	r3, [r7, #32]
 800189a:	887b      	ldrh	r3, [r7, #2]
 800189c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80018a0:	8c3b      	ldrh	r3, [r7, #32]
 80018a2:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1)
 80018a4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80018a8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	dd0b      	ble.n	80018c8 <lcdFillTriangle+0x92>
    {
        swap(y0, y1); swap(x0, x1);
 80018b0:	88bb      	ldrh	r3, [r7, #4]
 80018b2:	83fb      	strh	r3, [r7, #30]
 80018b4:	883b      	ldrh	r3, [r7, #0]
 80018b6:	80bb      	strh	r3, [r7, #4]
 80018b8:	8bfb      	ldrh	r3, [r7, #30]
 80018ba:	803b      	strh	r3, [r7, #0]
 80018bc:	88fb      	ldrh	r3, [r7, #6]
 80018be:	83bb      	strh	r3, [r7, #28]
 80018c0:	887b      	ldrh	r3, [r7, #2]
 80018c2:	80fb      	strh	r3, [r7, #6]
 80018c4:	8bbb      	ldrh	r3, [r7, #28]
 80018c6:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2)
 80018c8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80018cc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d131      	bne.n	8001938 <lcdFillTriangle+0x102>
    { // Handle awkward all-on-same-line case as its own thing
        a = b = x0;
 80018d4:	88fb      	ldrh	r3, [r7, #6]
 80018d6:	86bb      	strh	r3, [r7, #52]	; 0x34
 80018d8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80018da:	86fb      	strh	r3, [r7, #54]	; 0x36
        if(x1 < a)      a = x1;
 80018dc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80018e0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80018e4:	429a      	cmp	r2, r3
 80018e6:	da02      	bge.n	80018ee <lcdFillTriangle+0xb8>
 80018e8:	887b      	ldrh	r3, [r7, #2]
 80018ea:	86fb      	strh	r3, [r7, #54]	; 0x36
 80018ec:	e007      	b.n	80018fe <lcdFillTriangle+0xc8>
        else if(x1 > b) b = x1;
 80018ee:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80018f2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80018f6:	429a      	cmp	r2, r3
 80018f8:	dd01      	ble.n	80018fe <lcdFillTriangle+0xc8>
 80018fa:	887b      	ldrh	r3, [r7, #2]
 80018fc:	86bb      	strh	r3, [r7, #52]	; 0x34
        if(x2 < a)      a = x2;
 80018fe:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8001902:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001906:	429a      	cmp	r2, r3
 8001908:	da03      	bge.n	8001912 <lcdFillTriangle+0xdc>
 800190a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800190e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001910:	e008      	b.n	8001924 <lcdFillTriangle+0xee>
        else if(x2 > b) b = x2;
 8001912:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8001916:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800191a:	429a      	cmp	r2, r3
 800191c:	dd02      	ble.n	8001924 <lcdFillTriangle+0xee>
 800191e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001922:	86bb      	strh	r3, [r7, #52]	; 0x34
        lcdDrawHLine(a, b + 1, y0, color);
 8001924:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 8001926:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001928:	3301      	adds	r3, #1
 800192a:	b299      	uxth	r1, r3
 800192c:	88ba      	ldrh	r2, [r7, #4]
 800192e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001932:	f7ff f9e7 	bl	8000d04 <lcdDrawHLine>
        return;
 8001936:	e0c8      	b.n	8001aca <lcdFillTriangle+0x294>
    }

    int16_t
    dx01 = x1 - x0,
 8001938:	887a      	ldrh	r2, [r7, #2]
 800193a:	88fb      	ldrh	r3, [r7, #6]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	b29b      	uxth	r3, r3
 8001940:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 8001942:	883a      	ldrh	r2, [r7, #0]
 8001944:	88bb      	ldrh	r3, [r7, #4]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	b29b      	uxth	r3, r3
 800194a:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 800194c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001950:	88fb      	ldrh	r3, [r7, #6]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	b29b      	uxth	r3, r3
 8001956:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 8001958:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800195c:	88bb      	ldrh	r3, [r7, #4]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	b29b      	uxth	r3, r3
 8001962:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 8001964:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001968:	887b      	ldrh	r3, [r7, #2]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	b29b      	uxth	r3, r3
 800196e:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 8001970:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001974:	883b      	ldrh	r3, [r7, #0]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	b29b      	uxth	r3, r3
 800197a:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 800197c:	2300      	movs	r3, #0
 800197e:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 8001984:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001988:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800198c:	429a      	cmp	r2, r3
 800198e:	d102      	bne.n	8001996 <lcdFillTriangle+0x160>
 8001990:	883b      	ldrh	r3, [r7, #0]
 8001992:	863b      	strh	r3, [r7, #48]	; 0x30
 8001994:	e003      	b.n	800199e <lcdFillTriangle+0x168>
    else         last = y1-1; // Skip it
 8001996:	883b      	ldrh	r3, [r7, #0]
 8001998:	3b01      	subs	r3, #1
 800199a:	b29b      	uxth	r3, r3
 800199c:	863b      	strh	r3, [r7, #48]	; 0x30

    for(y=y0; y<=last; y++)
 800199e:	88bb      	ldrh	r3, [r7, #4]
 80019a0:	867b      	strh	r3, [r7, #50]	; 0x32
 80019a2:	e038      	b.n	8001a16 <lcdFillTriangle+0x1e0>
    {
        a   = x0 + sa / dy01;
 80019a4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80019a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	88fb      	ldrh	r3, [r7, #6]
 80019b2:	4413      	add	r3, r2
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 80019b8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80019bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019be:	fb92 f3f3 	sdiv	r3, r2, r3
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	88fb      	ldrh	r3, [r7, #6]
 80019c6:	4413      	add	r3, r2
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx01;
 80019cc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80019d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019d2:	4413      	add	r3, r2
 80019d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 80019d6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019dc:	4413      	add	r3, r2
 80019de:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) swap(a,b);
 80019e0:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80019e4:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80019e8:	429a      	cmp	r2, r3
 80019ea:	dd05      	ble.n	80019f8 <lcdFillTriangle+0x1c2>
 80019ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019ee:	81bb      	strh	r3, [r7, #12]
 80019f0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80019f2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80019f4:	89bb      	ldrh	r3, [r7, #12]
 80019f6:	86bb      	strh	r3, [r7, #52]	; 0x34
        lcdDrawHLine(a, b + 1, y, color);
 80019f8:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 80019fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80019fc:	3301      	adds	r3, #1
 80019fe:	b299      	uxth	r1, r3
 8001a00:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8001a02:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a06:	f7ff f97d 	bl	8000d04 <lcdDrawHLine>
    for(y=y0; y<=last; y++)
 8001a0a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	3301      	adds	r3, #1
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	867b      	strh	r3, [r7, #50]	; 0x32
 8001a16:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8001a1a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	ddc0      	ble.n	80019a4 <lcdFillTriangle+0x16e>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 8001a22:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a26:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8001a2a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001a2e:	1a8a      	subs	r2, r1, r2
 8001a30:	fb02 f303 	mul.w	r3, r2, r3
 8001a34:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 8001a36:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a3a:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8001a3e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001a42:	1a8a      	subs	r2, r1, r2
 8001a44:	fb02 f303 	mul.w	r3, r2, r3
 8001a48:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++)
 8001a4a:	e038      	b.n	8001abe <lcdFillTriangle+0x288>
    {
        a   = x1 + sa / dy12;
 8001a4c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001a50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a52:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	887b      	ldrh	r3, [r7, #2]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	86fb      	strh	r3, [r7, #54]	; 0x36
        b   = x0 + sb / dy02;
 8001a60:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a66:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	88fb      	ldrh	r3, [r7, #6]
 8001a6e:	4413      	add	r3, r2
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	86bb      	strh	r3, [r7, #52]	; 0x34
        sa += dx12;
 8001a74:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a7a:	4413      	add	r3, r2
 8001a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8001a7e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a84:	4413      	add	r3, r2
 8001a86:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) swap(a,b);
 8001a88:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8001a8c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001a90:	429a      	cmp	r2, r3
 8001a92:	dd05      	ble.n	8001aa0 <lcdFillTriangle+0x26a>
 8001a94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a96:	81fb      	strh	r3, [r7, #14]
 8001a98:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001a9a:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001a9c:	89fb      	ldrh	r3, [r7, #14]
 8001a9e:	86bb      	strh	r3, [r7, #52]	; 0x34
        lcdDrawHLine(a, b + 1, y, color);
 8001aa0:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 8001aa2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	b299      	uxth	r1, r3
 8001aa8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8001aaa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001aae:	f7ff f929 	bl	8000d04 <lcdDrawHLine>
    for(; y<=y2; y++)
 8001ab2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	3301      	adds	r3, #1
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	867b      	strh	r3, [r7, #50]	; 0x32
 8001abe:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8001ac2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	ddc0      	ble.n	8001a4c <lcdFillTriangle+0x216>
    }
}
 8001aca:	373c      	adds	r7, #60	; 0x3c
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd90      	pop	{r4, r7, pc}

08001ad0 <lcdDrawImage>:

void lcdDrawImage(uint16_t x, uint16_t y, GUI_CONST_STORAGE GUI_BITMAP* pBitmap)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	603a      	str	r2, [r7, #0]
 8001ada:	80fb      	strh	r3, [r7, #6]
 8001adc:	460b      	mov	r3, r1
 8001ade:	80bb      	strh	r3, [r7, #4]
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8001ae0:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <lcdDrawImage+0xa4>)
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	88fa      	ldrh	r2, [r7, #6]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d23b      	bcs.n	8001b62 <lcdDrawImage+0x92>
 8001aea:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <lcdDrawImage+0xa4>)
 8001aec:	885b      	ldrh	r3, [r3, #2]
 8001aee:	88ba      	ldrh	r2, [r7, #4]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d236      	bcs.n	8001b62 <lcdDrawImage+0x92>
	if((x + pBitmap->xSize - 1) >= lcdProperties.width) return;
 8001af4:	88fb      	ldrh	r3, [r7, #6]
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	8812      	ldrh	r2, [r2, #0]
 8001afa:	4413      	add	r3, r2
 8001afc:	4a1d      	ldr	r2, [pc, #116]	; (8001b74 <lcdDrawImage+0xa4>)
 8001afe:	8812      	ldrh	r2, [r2, #0]
 8001b00:	4293      	cmp	r3, r2
 8001b02:	dc30      	bgt.n	8001b66 <lcdDrawImage+0x96>
	if((y + pBitmap->ySize - 1) >= lcdProperties.height) return;
 8001b04:	88bb      	ldrh	r3, [r7, #4]
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	8852      	ldrh	r2, [r2, #2]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	4a19      	ldr	r2, [pc, #100]	; (8001b74 <lcdDrawImage+0xa4>)
 8001b0e:	8852      	ldrh	r2, [r2, #2]
 8001b10:	4293      	cmp	r3, r2
 8001b12:	dc2a      	bgt.n	8001b6a <lcdDrawImage+0x9a>

	for (int i = 0; i < pBitmap->ySize; ++i)
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	e01c      	b.n	8001b54 <lcdDrawImage+0x84>
	{
		lcdDrawPixels(x, y + i, (uint16_t*)(pBitmap->pData + i * pBitmap->bytesPerLine), pBitmap->bytesPerLine / (pBitmap->bitsPerPixel / 8));
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	88bb      	ldrh	r3, [r7, #4]
 8001b20:	4413      	add	r3, r2
 8001b22:	b299      	uxth	r1, r3
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	8892      	ldrh	r2, [r2, #4]
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	fb00 f202 	mul.w	r2, r0, r2
 8001b34:	441a      	add	r2, r3
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	889b      	ldrh	r3, [r3, #4]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	799b      	ldrb	r3, [r3, #6]
 8001b40:	08db      	lsrs	r3, r3, #3
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	fb90 f3f3 	sdiv	r3, r0, r3
 8001b48:	88f8      	ldrh	r0, [r7, #6]
 8001b4a:	f000 fa9b 	bl	8002084 <lcdDrawPixels>
	for (int i = 0; i < pBitmap->ySize; ++i)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	3301      	adds	r3, #1
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	885b      	ldrh	r3, [r3, #2]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	dbdc      	blt.n	8001b1a <lcdDrawImage+0x4a>
 8001b60:	e004      	b.n	8001b6c <lcdDrawImage+0x9c>
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8001b62:	bf00      	nop
 8001b64:	e002      	b.n	8001b6c <lcdDrawImage+0x9c>
	if((x + pBitmap->xSize - 1) >= lcdProperties.width) return;
 8001b66:	bf00      	nop
 8001b68:	e000      	b.n	8001b6c <lcdDrawImage+0x9c>
	if((y + pBitmap->ySize - 1) >= lcdProperties.height) return;
 8001b6a:	bf00      	nop
	}
}
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000028 	.word	0x20000028

08001b78 <lcdDrawChar>:
 * \param size		Character Size
 *
 * \return void
 */
void lcdDrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg)
{
 8001b78:	b590      	push	{r4, r7, lr}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4604      	mov	r4, r0
 8001b80:	4608      	mov	r0, r1
 8001b82:	4611      	mov	r1, r2
 8001b84:	461a      	mov	r2, r3
 8001b86:	4623      	mov	r3, r4
 8001b88:	80fb      	strh	r3, [r7, #6]
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	80bb      	strh	r3, [r7, #4]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	70fb      	strb	r3, [r7, #3]
 8001b92:	4613      	mov	r3, r2
 8001b94:	803b      	strh	r3, [r7, #0]
	if ((x >= lcdProperties.width) || 			// Clip right
 8001b96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b9a:	4a4a      	ldr	r2, [pc, #296]	; (8001cc4 <lcdDrawChar+0x14c>)
 8001b9c:	8812      	ldrh	r2, [r2, #0]
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	f280 808c 	bge.w	8001cbc <lcdDrawChar+0x144>
			(y >= lcdProperties.height) || 		// Clip bottom
 8001ba4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ba8:	4a46      	ldr	r2, [pc, #280]	; (8001cc4 <lcdDrawChar+0x14c>)
 8001baa:	8852      	ldrh	r2, [r2, #2]
	if ((x >= lcdProperties.width) || 			// Clip right
 8001bac:	4293      	cmp	r3, r2
 8001bae:	f280 8085 	bge.w	8001cbc <lcdDrawChar+0x144>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8001bb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bb6:	4a44      	ldr	r2, [pc, #272]	; (8001cc8 <lcdDrawChar+0x150>)
 8001bb8:	6892      	ldr	r2, [r2, #8]
 8001bba:	8892      	ldrh	r2, [r2, #4]
 8001bbc:	4413      	add	r3, r2
			(y >= lcdProperties.height) || 		// Clip bottom
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	db7c      	blt.n	8001cbc <lcdDrawChar+0x144>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 8001bc2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001bc6:	4a40      	ldr	r2, [pc, #256]	; (8001cc8 <lcdDrawChar+0x150>)
 8001bc8:	6892      	ldr	r2, [r2, #8]
 8001bca:	88d2      	ldrh	r2, [r2, #6]
 8001bcc:	4413      	add	r3, r2
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	db74      	blt.n	8001cbc <lcdDrawChar+0x144>
		return;

	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 8001bd2:	4b3d      	ldr	r3, [pc, #244]	; (8001cc8 <lcdDrawChar+0x150>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	88db      	ldrh	r3, [r3, #6]
 8001bd8:	08db      	lsrs	r3, r3, #3
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	72bb      	strb	r3, [r7, #10]
	uint8_t xP = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8001be2:	2300      	movs	r3, #0
 8001be4:	73bb      	strb	r3, [r7, #14]
 8001be6:	e061      	b.n	8001cac <lcdDrawChar+0x134>
	{
		uint8_t line;

		for(uint8_t k = 0; k < fontCoeff; k++)
 8001be8:	2300      	movs	r3, #0
 8001bea:	733b      	strb	r3, [r7, #12]
 8001bec:	e055      	b.n	8001c9a <lcdDrawChar+0x122>
		{
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 8001bee:	4b36      	ldr	r3, [pc, #216]	; (8001cc8 <lcdDrawChar+0x150>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	78fa      	ldrb	r2, [r7, #3]
 8001bf6:	3a20      	subs	r2, #32
 8001bf8:	4933      	ldr	r1, [pc, #204]	; (8001cc8 <lcdDrawChar+0x150>)
 8001bfa:	6889      	ldr	r1, [r1, #8]
 8001bfc:	88c9      	ldrh	r1, [r1, #6]
 8001bfe:	fb01 f202 	mul.w	r2, r1, r2
 8001c02:	7ab9      	ldrb	r1, [r7, #10]
 8001c04:	fb02 f101 	mul.w	r1, r2, r1
 8001c08:	7bba      	ldrb	r2, [r7, #14]
 8001c0a:	7ab8      	ldrb	r0, [r7, #10]
 8001c0c:	fb00 f202 	mul.w	r2, r0, r2
 8001c10:	4411      	add	r1, r2
 8001c12:	7b3a      	ldrb	r2, [r7, #12]
 8001c14:	440a      	add	r2, r1
 8001c16:	4413      	add	r3, r2
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	737b      	strb	r3, [r7, #13]

			for(uint8_t j = 0; j < 8; j++)
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	72fb      	strb	r3, [r7, #11]
 8001c20:	e032      	b.n	8001c88 <lcdDrawChar+0x110>
			{
				if((line & 0x80) == 0x80)
 8001c22:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	da12      	bge.n	8001c50 <lcdDrawChar+0xd8>
				{
					lcdDrawPixel(x + j + xP, y + i, color);
 8001c2a:	7afb      	ldrb	r3, [r7, #11]
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	88fb      	ldrh	r3, [r7, #6]
 8001c30:	4413      	add	r3, r2
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	4413      	add	r3, r2
 8001c3a:	b298      	uxth	r0, r3
 8001c3c:	7bbb      	ldrb	r3, [r7, #14]
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	88bb      	ldrh	r3, [r7, #4]
 8001c42:	4413      	add	r3, r2
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	883a      	ldrh	r2, [r7, #0]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f7ff f837 	bl	8000cbc <lcdDrawPixel>
 8001c4e:	e015      	b.n	8001c7c <lcdDrawChar+0x104>
				}
				else if (bg != color)
 8001c50:	8c3a      	ldrh	r2, [r7, #32]
 8001c52:	883b      	ldrh	r3, [r7, #0]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d011      	beq.n	8001c7c <lcdDrawChar+0x104>
				{
					lcdDrawPixel(x + j + xP, y + i, bg);
 8001c58:	7afb      	ldrb	r3, [r7, #11]
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	88fb      	ldrh	r3, [r7, #6]
 8001c5e:	4413      	add	r3, r2
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	7bfb      	ldrb	r3, [r7, #15]
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	4413      	add	r3, r2
 8001c68:	b298      	uxth	r0, r3
 8001c6a:	7bbb      	ldrb	r3, [r7, #14]
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	88bb      	ldrh	r3, [r7, #4]
 8001c70:	4413      	add	r3, r2
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	8c3a      	ldrh	r2, [r7, #32]
 8001c76:	4619      	mov	r1, r3
 8001c78:	f7ff f820 	bl	8000cbc <lcdDrawPixel>
				}
				line <<= 1;
 8001c7c:	7b7b      	ldrb	r3, [r7, #13]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	737b      	strb	r3, [r7, #13]
			for(uint8_t j = 0; j < 8; j++)
 8001c82:	7afb      	ldrb	r3, [r7, #11]
 8001c84:	3301      	adds	r3, #1
 8001c86:	72fb      	strb	r3, [r7, #11]
 8001c88:	7afb      	ldrb	r3, [r7, #11]
 8001c8a:	2b07      	cmp	r3, #7
 8001c8c:	d9c9      	bls.n	8001c22 <lcdDrawChar+0xaa>
			}

			xP += 8;
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
 8001c90:	3308      	adds	r3, #8
 8001c92:	73fb      	strb	r3, [r7, #15]
		for(uint8_t k = 0; k < fontCoeff; k++)
 8001c94:	7b3b      	ldrb	r3, [r7, #12]
 8001c96:	3301      	adds	r3, #1
 8001c98:	733b      	strb	r3, [r7, #12]
 8001c9a:	7b3a      	ldrb	r2, [r7, #12]
 8001c9c:	7abb      	ldrb	r3, [r7, #10]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d3a5      	bcc.n	8001bee <lcdDrawChar+0x76>
		}

		xP = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8001ca6:	7bbb      	ldrb	r3, [r7, #14]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	73bb      	strb	r3, [r7, #14]
 8001cac:	7bbb      	ldrb	r3, [r7, #14]
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <lcdDrawChar+0x150>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	88db      	ldrh	r3, [r3, #6]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d396      	bcc.n	8001be8 <lcdDrawChar+0x70>
 8001cba:	e000      	b.n	8001cbe <lcdDrawChar+0x146>
		return;
 8001cbc:	bf00      	nop
	}
}
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd90      	pop	{r4, r7, pc}
 8001cc4:	20000028 	.word	0x20000028
 8001cc8:	20000030 	.word	0x20000030

08001ccc <lcdPrintf>:
 * \param
 *
 * \return void
 */
void lcdPrintf(const char *fmt, ...)
{
 8001ccc:	b40f      	push	{r0, r1, r2, r3}
 8001cce:	b590      	push	{r4, r7, lr}
 8001cd0:	b085      	sub	sp, #20
 8001cd2:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8001cd4:	f107 031c 	add.w	r3, r7, #28
 8001cd8:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	69b9      	ldr	r1, [r7, #24]
 8001cde:	483d      	ldr	r0, [pc, #244]	; (8001dd4 <lcdPrintf+0x108>)
 8001ce0:	f003 f9c6 	bl	8005070 <vsiprintf>
	va_end(lst);

	p = buf;
 8001ce4:	4b3b      	ldr	r3, [pc, #236]	; (8001dd4 <lcdPrintf+0x108>)
 8001ce6:	607b      	str	r3, [r7, #4]
	while (*p)
 8001ce8:	e067      	b.n	8001dba <lcdPrintf+0xee>
	{
		if (*p == '\n')
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b0a      	cmp	r3, #10
 8001cf0:	d10c      	bne.n	8001d0c <lcdPrintf+0x40>
		{
			cursorXY.y += lcdFont.pFont->Height;
 8001cf2:	4b39      	ldr	r3, [pc, #228]	; (8001dd8 <lcdPrintf+0x10c>)
 8001cf4:	885a      	ldrh	r2, [r3, #2]
 8001cf6:	4b39      	ldr	r3, [pc, #228]	; (8001ddc <lcdPrintf+0x110>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	88db      	ldrh	r3, [r3, #6]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	4b35      	ldr	r3, [pc, #212]	; (8001dd8 <lcdPrintf+0x10c>)
 8001d02:	805a      	strh	r2, [r3, #2]
			cursorXY.x = 0;
 8001d04:	4b34      	ldr	r3, [pc, #208]	; (8001dd8 <lcdPrintf+0x10c>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	801a      	strh	r2, [r3, #0]
 8001d0a:	e04a      	b.n	8001da2 <lcdPrintf+0xd6>
		}
		else if (*p == '\r')
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b0d      	cmp	r3, #13
 8001d12:	d046      	beq.n	8001da2 <lcdPrintf+0xd6>
		{
			// skip em
		}
		else if (*p == '\t')
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b09      	cmp	r3, #9
 8001d1a:	d10b      	bne.n	8001d34 <lcdPrintf+0x68>
		{
			cursorXY.x += lcdFont.pFont->Width * 4;
 8001d1c:	4b2e      	ldr	r3, [pc, #184]	; (8001dd8 <lcdPrintf+0x10c>)
 8001d1e:	881a      	ldrh	r2, [r3, #0]
 8001d20:	4b2e      	ldr	r3, [pc, #184]	; (8001ddc <lcdPrintf+0x110>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	889b      	ldrh	r3, [r3, #4]
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	4b2a      	ldr	r3, [pc, #168]	; (8001dd8 <lcdPrintf+0x10c>)
 8001d30:	801a      	strh	r2, [r3, #0]
 8001d32:	e036      	b.n	8001da2 <lcdPrintf+0xd6>
		}
		else
		{
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 8001d34:	4b28      	ldr	r3, [pc, #160]	; (8001dd8 <lcdPrintf+0x10c>)
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	b218      	sxth	r0, r3
 8001d3a:	4b27      	ldr	r3, [pc, #156]	; (8001dd8 <lcdPrintf+0x10c>)
 8001d3c:	885b      	ldrh	r3, [r3, #2]
 8001d3e:	b219      	sxth	r1, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	781a      	ldrb	r2, [r3, #0]
 8001d44:	4b25      	ldr	r3, [pc, #148]	; (8001ddc <lcdPrintf+0x110>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	b29c      	uxth	r4, r3
 8001d4a:	4b24      	ldr	r3, [pc, #144]	; (8001ddc <lcdPrintf+0x110>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	4623      	mov	r3, r4
 8001d54:	f7ff ff10 	bl	8001b78 <lcdDrawChar>
			cursorXY.x += lcdFont.pFont->Width;
 8001d58:	4b1f      	ldr	r3, [pc, #124]	; (8001dd8 <lcdPrintf+0x10c>)
 8001d5a:	881a      	ldrh	r2, [r3, #0]
 8001d5c:	4b1f      	ldr	r3, [pc, #124]	; (8001ddc <lcdPrintf+0x110>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	889b      	ldrh	r3, [r3, #4]
 8001d62:	4413      	add	r3, r2
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	4b1c      	ldr	r3, [pc, #112]	; (8001dd8 <lcdPrintf+0x10c>)
 8001d68:	801a      	strh	r2, [r3, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 8001d6a:	4b1c      	ldr	r3, [pc, #112]	; (8001ddc <lcdPrintf+0x110>)
 8001d6c:	7b1b      	ldrb	r3, [r3, #12]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d017      	beq.n	8001da2 <lcdPrintf+0xd6>
 8001d72:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <lcdPrintf+0x10c>)
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <lcdPrintf+0x114>)
 8001d7a:	881b      	ldrh	r3, [r3, #0]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <lcdPrintf+0x110>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	889b      	ldrh	r3, [r3, #4]
 8001d84:	1acb      	subs	r3, r1, r3
 8001d86:	429a      	cmp	r2, r3
 8001d88:	dd0b      	ble.n	8001da2 <lcdPrintf+0xd6>
			{
				cursorXY.y += lcdFont.pFont->Height;
 8001d8a:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <lcdPrintf+0x10c>)
 8001d8c:	885a      	ldrh	r2, [r3, #2]
 8001d8e:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <lcdPrintf+0x110>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	88db      	ldrh	r3, [r3, #6]
 8001d94:	4413      	add	r3, r2
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <lcdPrintf+0x10c>)
 8001d9a:	805a      	strh	r2, [r3, #2]
				cursorXY.x = 0;
 8001d9c:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <lcdPrintf+0x10c>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3301      	adds	r3, #1
 8001da6:	607b      	str	r3, [r7, #4]

		if (cursorXY.y >= lcdProperties.height)
 8001da8:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <lcdPrintf+0x10c>)
 8001daa:	885a      	ldrh	r2, [r3, #2]
 8001dac:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <lcdPrintf+0x114>)
 8001dae:	885b      	ldrh	r3, [r3, #2]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d302      	bcc.n	8001dba <lcdPrintf+0xee>
		{
			cursorXY.y = 0;
 8001db4:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <lcdPrintf+0x10c>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	805a      	strh	r2, [r3, #2]
	while (*p)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d193      	bne.n	8001cea <lcdPrintf+0x1e>
		}
	}
}
 8001dc2:	bf00      	nop
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001dce:	b004      	add	sp, #16
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	20000128 	.word	0x20000128
 8001dd8:	20000120 	.word	0x20000120
 8001ddc:	20000030 	.word	0x20000030
 8001de0:	20000028 	.word	0x20000028

08001de4 <lcdSetTextFont>:
 * \param font pointer font
 *
 * \return void
 */
void lcdSetTextFont(sFONT* font)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
	lcdFont.pFont = font;
 8001dec:	4a04      	ldr	r2, [pc, #16]	; (8001e00 <lcdSetTextFont+0x1c>)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6093      	str	r3, [r2, #8]
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	20000030 	.word	0x20000030

08001e04 <lcdSetTextColor>:
 * \param b		Background color
 *
 * \return void
 */
void lcdSetTextColor(uint16_t c, uint16_t b)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	460a      	mov	r2, r1
 8001e0e:	80fb      	strh	r3, [r7, #6]
 8001e10:	4613      	mov	r3, r2
 8001e12:	80bb      	strh	r3, [r7, #4]
	lcdFont.TextColor = c;
 8001e14:	88fb      	ldrh	r3, [r7, #6]
 8001e16:	4a05      	ldr	r2, [pc, #20]	; (8001e2c <lcdSetTextColor+0x28>)
 8001e18:	6013      	str	r3, [r2, #0]
	lcdFont.BackColor = b;
 8001e1a:	88bb      	ldrh	r3, [r7, #4]
 8001e1c:	4a03      	ldr	r2, [pc, #12]	; (8001e2c <lcdSetTextColor+0x28>)
 8001e1e:	6053      	str	r3, [r2, #4]
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	20000030 	.word	0x20000030

08001e30 <lcdSetOrientation>:
{
	lcdFont.TextWrap = w;
}

void lcdSetOrientation(lcdOrientationTypeDef value)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	71fb      	strb	r3, [r7, #7]
	lcdProperties.orientation = value;
 8001e3a:	4a2f      	ldr	r2, [pc, #188]	; (8001ef8 <lcdSetOrientation+0xc8>)
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	7113      	strb	r3, [r2, #4]
	lcdWriteCommand(ILI9341_MEMCONTROL);
 8001e40:	2036      	movs	r0, #54	; 0x36
 8001e42:	f000 f955 	bl	80020f0 <lcdWriteCommand>

	switch (lcdProperties.orientation)
 8001e46:	4b2c      	ldr	r3, [pc, #176]	; (8001ef8 <lcdSetOrientation+0xc8>)
 8001e48:	791b      	ldrb	r3, [r3, #4]
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	d842      	bhi.n	8001ed4 <lcdSetOrientation+0xa4>
 8001e4e:	a201      	add	r2, pc, #4	; (adr r2, 8001e54 <lcdSetOrientation+0x24>)
 8001e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e54:	08001e65 	.word	0x08001e65
 8001e58:	08001e9d 	.word	0x08001e9d
 8001e5c:	08001e81 	.word	0x08001e81
 8001e60:	08001eb9 	.word	0x08001eb9
	{
		case LCD_ORIENTATION_PORTRAIT:
			lcdWriteData(lcdPortraitConfig);
 8001e64:	4b25      	ldr	r3, [pc, #148]	; (8001efc <lcdSetOrientation+0xcc>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 f950 	bl	8002110 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8001e70:	4b21      	ldr	r3, [pc, #132]	; (8001ef8 <lcdSetOrientation+0xc8>)
 8001e72:	22f0      	movs	r2, #240	; 0xf0
 8001e74:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8001e76:	4b20      	ldr	r3, [pc, #128]	; (8001ef8 <lcdSetOrientation+0xc8>)
 8001e78:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e7c:	805a      	strh	r2, [r3, #2]
			break;
 8001e7e:	e02a      	b.n	8001ed6 <lcdSetOrientation+0xa6>
		case LCD_ORIENTATION_PORTRAIT_MIRROR:
			lcdWriteData(lcdPortraitMirrorConfig);
 8001e80:	4b1f      	ldr	r3, [pc, #124]	; (8001f00 <lcdSetOrientation+0xd0>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 f942 	bl	8002110 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8001e8c:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <lcdSetOrientation+0xc8>)
 8001e8e:	22f0      	movs	r2, #240	; 0xf0
 8001e90:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8001e92:	4b19      	ldr	r3, [pc, #100]	; (8001ef8 <lcdSetOrientation+0xc8>)
 8001e94:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e98:	805a      	strh	r2, [r3, #2]
			break;
 8001e9a:	e01c      	b.n	8001ed6 <lcdSetOrientation+0xa6>
		case LCD_ORIENTATION_LANDSCAPE:
			lcdWriteData(lcdLandscapeConfig);
 8001e9c:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <lcdSetOrientation+0xd4>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f000 f934 	bl	8002110 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8001ea8:	4b13      	ldr	r3, [pc, #76]	; (8001ef8 <lcdSetOrientation+0xc8>)
 8001eaa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001eae:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8001eb0:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <lcdSetOrientation+0xc8>)
 8001eb2:	22f0      	movs	r2, #240	; 0xf0
 8001eb4:	805a      	strh	r2, [r3, #2]
			break;
 8001eb6:	e00e      	b.n	8001ed6 <lcdSetOrientation+0xa6>
		case LCD_ORIENTATION_LANDSCAPE_MIRROR:
			lcdWriteData(lcdLandscapeMirrorConfig);
 8001eb8:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <lcdSetOrientation+0xd8>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 f926 	bl	8002110 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <lcdSetOrientation+0xc8>)
 8001ec6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001eca:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8001ecc:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <lcdSetOrientation+0xc8>)
 8001ece:	22f0      	movs	r2, #240	; 0xf0
 8001ed0:	805a      	strh	r2, [r3, #2]
			break;
 8001ed2:	e000      	b.n	8001ed6 <lcdSetOrientation+0xa6>
		default:
			break;
 8001ed4:	bf00      	nop
	}

	//lcdWriteCommand(ILI9341_MEMORYWRITE);
	lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8001ed6:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <lcdSetOrientation+0xc8>)
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <lcdSetOrientation+0xc8>)
 8001ee0:	885b      	ldrh	r3, [r3, #2]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	2000      	movs	r0, #0
 8001eea:	f000 f829 	bl	8001f40 <lcdSetWindow>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000028 	.word	0x20000028
 8001efc:	20000124 	.word	0x20000124
 8001f00:	20000126 	.word	0x20000126
 8001f04:	20000125 	.word	0x20000125
 8001f08:	20000127 	.word	0x20000127

08001f0c <lcdSetCursor>:

void lcdSetCursor(unsigned short x, unsigned short y)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	460a      	mov	r2, r1
 8001f16:	80fb      	strh	r3, [r7, #6]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	80bb      	strh	r3, [r7, #4]
	cursorXY.x = x;
 8001f1c:	4a07      	ldr	r2, [pc, #28]	; (8001f3c <lcdSetCursor+0x30>)
 8001f1e:	88fb      	ldrh	r3, [r7, #6]
 8001f20:	8013      	strh	r3, [r2, #0]
	cursorXY.y = y;
 8001f22:	4a06      	ldr	r2, [pc, #24]	; (8001f3c <lcdSetCursor+0x30>)
 8001f24:	88bb      	ldrh	r3, [r7, #4]
 8001f26:	8053      	strh	r3, [r2, #2]
	lcdSetWindow(x, y, x, y);
 8001f28:	88bb      	ldrh	r3, [r7, #4]
 8001f2a:	88fa      	ldrh	r2, [r7, #6]
 8001f2c:	88b9      	ldrh	r1, [r7, #4]
 8001f2e:	88f8      	ldrh	r0, [r7, #6]
 8001f30:	f000 f806 	bl	8001f40 <lcdSetWindow>
}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000120 	.word	0x20000120

08001f40 <lcdSetWindow>:
 * \param y1         Rigth bottom window y-coordinate
 *
 * \return void
 */
void lcdSetWindow(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1)
{
 8001f40:	b590      	push	{r4, r7, lr}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4604      	mov	r4, r0
 8001f48:	4608      	mov	r0, r1
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4623      	mov	r3, r4
 8001f50:	80fb      	strh	r3, [r7, #6]
 8001f52:	4603      	mov	r3, r0
 8001f54:	80bb      	strh	r3, [r7, #4]
 8001f56:	460b      	mov	r3, r1
 8001f58:	807b      	strh	r3, [r7, #2]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	803b      	strh	r3, [r7, #0]
  lcdWriteCommand(ILI9341_COLADDRSET);
 8001f5e:	202a      	movs	r0, #42	; 0x2a
 8001f60:	f000 f8c6 	bl	80020f0 <lcdWriteCommand>
  lcdWriteData((x0 >> 8) & 0xFF);
 8001f64:	88fb      	ldrh	r3, [r7, #6]
 8001f66:	0a1b      	lsrs	r3, r3, #8
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 f8d0 	bl	8002110 <lcdWriteData>
  lcdWriteData(x0 & 0xFF);
 8001f70:	88fb      	ldrh	r3, [r7, #6]
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 f8ca 	bl	8002110 <lcdWriteData>
  lcdWriteData((x1 >> 8) & 0xFF);
 8001f7c:	887b      	ldrh	r3, [r7, #2]
 8001f7e:	0a1b      	lsrs	r3, r3, #8
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 f8c4 	bl	8002110 <lcdWriteData>
  lcdWriteData(x1 & 0xFF);
 8001f88:	887b      	ldrh	r3, [r7, #2]
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 f8be 	bl	8002110 <lcdWriteData>
  lcdWriteCommand(ILI9341_PAGEADDRSET);
 8001f94:	202b      	movs	r0, #43	; 0x2b
 8001f96:	f000 f8ab 	bl	80020f0 <lcdWriteCommand>
  lcdWriteData((y0 >> 8) & 0xFF);
 8001f9a:	88bb      	ldrh	r3, [r7, #4]
 8001f9c:	0a1b      	lsrs	r3, r3, #8
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 f8b5 	bl	8002110 <lcdWriteData>
  lcdWriteData(y0 & 0xFF);
 8001fa6:	88bb      	ldrh	r3, [r7, #4]
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 f8af 	bl	8002110 <lcdWriteData>
  lcdWriteData((y1 >> 8) & 0xFF);
 8001fb2:	883b      	ldrh	r3, [r7, #0]
 8001fb4:	0a1b      	lsrs	r3, r3, #8
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f000 f8a9 	bl	8002110 <lcdWriteData>
  lcdWriteData(y1 & 0xFF);
 8001fbe:	883b      	ldrh	r3, [r7, #0]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f000 f8a3 	bl	8002110 <lcdWriteData>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 8001fca:	202c      	movs	r0, #44	; 0x2c
 8001fcc:	f000 f890 	bl	80020f0 <lcdWriteCommand>
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd90      	pop	{r4, r7, pc}

08001fd8 <lcdGetWidth>:
	lcdWriteCommand(ILI9341_TEARINGEFFECTON);
	lcdWriteData(m);
}

uint16_t lcdGetWidth(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return lcdProperties.width;
 8001fdc:	4b03      	ldr	r3, [pc, #12]	; (8001fec <lcdGetWidth+0x14>)
 8001fde:	881b      	ldrh	r3, [r3, #0]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20000028 	.word	0x20000028

08001ff0 <lcdGetHeight>:

uint16_t lcdGetHeight(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  return lcdProperties.height;
 8001ff4:	4b03      	ldr	r3, [pc, #12]	; (8002004 <lcdGetHeight+0x14>)
 8001ff6:	885b      	ldrh	r3, [r3, #2]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	20000028 	.word	0x20000028

08002008 <lcdGetOrientation>:
	id |= lcdReadData();
	return id;
}

lcdOrientationTypeDef lcdGetOrientation(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return lcdProperties.orientation;
 800200c:	4b03      	ldr	r3, [pc, #12]	; (800201c <lcdGetOrientation+0x14>)
 800200e:	791b      	ldrb	r3, [r3, #4]
}
 8002010:	4618      	mov	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	20000028 	.word	0x20000028

08002020 <lcdGetTextFont>:

sFONT* lcdGetTextFont(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
	return lcdFont.pFont;
 8002024:	4b03      	ldr	r3, [pc, #12]	; (8002034 <lcdGetTextFont+0x14>)
 8002026:	689b      	ldr	r3, [r3, #8]
}
 8002028:	4618      	mov	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	20000030 	.word	0x20000030

08002038 <lcdColor565>:

    return lcdColor565((temp[1] >> 8) & 0xFF, temp[1] & 0xFF, (temp[2] >> 8) & 0xFF);
}

uint16_t lcdColor565(uint8_t r, uint8_t g, uint8_t b)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	71fb      	strb	r3, [r7, #7]
 8002042:	460b      	mov	r3, r1
 8002044:	71bb      	strb	r3, [r7, #6]
 8002046:	4613      	mov	r3, r2
 8002048:	717b      	strb	r3, [r7, #5]
	return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	021b      	lsls	r3, r3, #8
 800204e:	b21b      	sxth	r3, r3
 8002050:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002054:	f023 0307 	bic.w	r3, r3, #7
 8002058:	b21a      	sxth	r2, r3
 800205a:	79bb      	ldrb	r3, [r7, #6]
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	b21b      	sxth	r3, r3
 8002060:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8002064:	b21b      	sxth	r3, r3
 8002066:	4313      	orrs	r3, r2
 8002068:	b21a      	sxth	r2, r3
 800206a:	797b      	ldrb	r3, [r7, #5]
 800206c:	08db      	lsrs	r3, r3, #3
 800206e:	b2db      	uxtb	r3, r3
 8002070:	b21b      	sxth	r3, r3
 8002072:	4313      	orrs	r3, r2
 8002074:	b21b      	sxth	r3, r3
 8002076:	b29b      	uxth	r3, r3
}
 8002078:	4618      	mov	r0, r3
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <lcdDrawPixels>:

/*---------Static functions--------------------------*/

static void lcdDrawPixels(uint16_t x, uint16_t y, uint16_t *data, uint32_t dataLength)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60ba      	str	r2, [r7, #8]
 800208c:	607b      	str	r3, [r7, #4]
 800208e:	4603      	mov	r3, r0
 8002090:	81fb      	strh	r3, [r7, #14]
 8002092:	460b      	mov	r3, r1
 8002094:	81bb      	strh	r3, [r7, #12]
  uint32_t i = 0;
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]

  lcdSetWindow(x, y, lcdProperties.width - 1, lcdProperties.height - 1);
 800209a:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <lcdDrawPixels+0x54>)
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	3b01      	subs	r3, #1
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	4b0d      	ldr	r3, [pc, #52]	; (80020d8 <lcdDrawPixels+0x54>)
 80020a4:	885b      	ldrh	r3, [r3, #2]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	89b9      	ldrh	r1, [r7, #12]
 80020ac:	89f8      	ldrh	r0, [r7, #14]
 80020ae:	f7ff ff47 	bl	8001f40 <lcdSetWindow>

  do
  {
    lcdWriteData(data[i++]);
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	1c5a      	adds	r2, r3, #1
 80020b6:	617a      	str	r2, [r7, #20]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	4413      	add	r3, r2
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f000 f825 	bl	8002110 <lcdWriteData>
  }
  while (i < dataLength);
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d3f1      	bcc.n	80020b2 <lcdDrawPixels+0x2e>
}
 80020ce:	bf00      	nop
 80020d0:	bf00      	nop
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	20000028 	.word	0x20000028

080020dc <lcdReset>:

static void lcdReset(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
	lcdWriteCommand(ILI9341_SOFTRESET);
 80020e0:	2001      	movs	r0, #1
 80020e2:	f000 f805 	bl	80020f0 <lcdWriteCommand>
	HAL_Delay(50);
 80020e6:	2032      	movs	r0, #50	; 0x32
 80020e8:	f001 fbb8 	bl	800385c <HAL_Delay>
}
 80020ec:	bf00      	nop
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <lcdWriteCommand>:

// Write an 8 bit command to the IC driver
static void lcdWriteCommand(unsigned char command)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	71fb      	strb	r3, [r7, #7]
	LCD_CmdWrite(command);
 80020fa:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80020fe:	79fa      	ldrb	r2, [r7, #7]
 8002100:	b292      	uxth	r2, r2
 8002102:	801a      	strh	r2, [r3, #0]
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <lcdWriteData>:

// Write an 16 bit data word to the IC driver
static void lcdWriteData(unsigned short data)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	80fb      	strh	r3, [r7, #6]
	LCD_DataWrite(data);
 800211a:	4a04      	ldr	r2, [pc, #16]	; (800212c <lcdWriteData+0x1c>)
 800211c:	88fb      	ldrh	r3, [r7, #6]
 800211e:	8013      	strh	r3, [r2, #0]
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	60080000 	.word	0x60080000

08002130 <lcdBuildMemoryAccessControlConfig>:
                        bool columnAddressOrder,
                        bool rowColumnExchange,
                        bool verticalRefreshOrder,
                        bool colorOrder,
                        bool horizontalRefreshOrder)
{
 8002130:	b490      	push	{r4, r7}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	4604      	mov	r4, r0
 8002138:	4608      	mov	r0, r1
 800213a:	4611      	mov	r1, r2
 800213c:	461a      	mov	r2, r3
 800213e:	4623      	mov	r3, r4
 8002140:	71fb      	strb	r3, [r7, #7]
 8002142:	4603      	mov	r3, r0
 8002144:	71bb      	strb	r3, [r7, #6]
 8002146:	460b      	mov	r3, r1
 8002148:	717b      	strb	r3, [r7, #5]
 800214a:	4613      	mov	r3, r2
 800214c:	713b      	strb	r3, [r7, #4]
  unsigned char value 				= 0;
 800214e:	2300      	movs	r3, #0
 8002150:	73fb      	strb	r3, [r7, #15]
  if(horizontalRefreshOrder) value 	|= ILI9341_MADCTL_MH;
 8002152:	7f3b      	ldrb	r3, [r7, #28]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <lcdBuildMemoryAccessControlConfig+0x30>
 8002158:	7bfb      	ldrb	r3, [r7, #15]
 800215a:	f043 0304 	orr.w	r3, r3, #4
 800215e:	73fb      	strb	r3, [r7, #15]
  if(colorOrder) value 				|= ILI9341_MADCTL_BGR;
 8002160:	7e3b      	ldrb	r3, [r7, #24]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <lcdBuildMemoryAccessControlConfig+0x3e>
 8002166:	7bfb      	ldrb	r3, [r7, #15]
 8002168:	f043 0308 	orr.w	r3, r3, #8
 800216c:	73fb      	strb	r3, [r7, #15]
  if(verticalRefreshOrder) value 	|= ILI9341_MADCTL_ML;
 800216e:	793b      	ldrb	r3, [r7, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <lcdBuildMemoryAccessControlConfig+0x4c>
 8002174:	7bfb      	ldrb	r3, [r7, #15]
 8002176:	f043 0310 	orr.w	r3, r3, #16
 800217a:	73fb      	strb	r3, [r7, #15]
  if(rowColumnExchange) value 		|= ILI9341_MADCTL_MV;
 800217c:	797b      	ldrb	r3, [r7, #5]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <lcdBuildMemoryAccessControlConfig+0x5a>
 8002182:	7bfb      	ldrb	r3, [r7, #15]
 8002184:	f043 0320 	orr.w	r3, r3, #32
 8002188:	73fb      	strb	r3, [r7, #15]
  if(columnAddressOrder) value 		|= ILI9341_MADCTL_MX;
 800218a:	79bb      	ldrb	r3, [r7, #6]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <lcdBuildMemoryAccessControlConfig+0x68>
 8002190:	7bfb      	ldrb	r3, [r7, #15]
 8002192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002196:	73fb      	strb	r3, [r7, #15]
  if(rowAddressOrder) value 		|= ILI9341_MADCTL_MY;
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <lcdBuildMemoryAccessControlConfig+0x76>
 800219e:	7bfb      	ldrb	r3, [r7, #15]
 80021a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021a4:	73fb      	strb	r3, [r7, #15]
  return value;
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc90      	pop	{r4, r7}
 80021b0:	4770      	bx	lr
	...

080021b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021ba:	f001 fadd 	bl	8003778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021be:	f000 f843 	bl	8002248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021c2:	f7fe fa8d 	bl	80006e0 <MX_GPIO_Init>
  MX_FSMC_Init();
 80021c6:	f7fe f9d5 	bl	8000574 <MX_FSMC_Init>
  MX_SPI2_Init();
 80021ca:	f001 f901 	bl	80033d0 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80021ce:	f001 fa37 	bl	8003640 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LCD_BL_ON();
 80021d2:	2201      	movs	r2, #1
 80021d4:	2102      	movs	r1, #2
 80021d6:	481a      	ldr	r0, [pc, #104]	; (8002240 <main+0x8c>)
 80021d8:	f001 fde6 	bl	8003da8 <HAL_GPIO_WritePin>
  lcdInit();
 80021dc:	f7fe fb2e 	bl	800083c <lcdInit>
  int i = 1;
 80021e0:	2301      	movs	r3, #1
 80021e2:	607b      	str	r3, [r7, #4]

  HAL_GPIO_WritePin(GPIOA, LED0_Pin, GPIO_PIN_SET);
 80021e4:	2201      	movs	r2, #1
 80021e6:	2180      	movs	r1, #128	; 0x80
 80021e8:	4816      	ldr	r0, [pc, #88]	; (8002244 <main+0x90>)
 80021ea:	f001 fddd 	bl	8003da8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_RESET);
 80021ee:	2200      	movs	r2, #0
 80021f0:	2140      	movs	r1, #64	; 0x40
 80021f2:	4814      	ldr	r0, [pc, #80]	; (8002244 <main+0x90>)
 80021f4:	f001 fdd8 	bl	8003da8 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  demoLCD(i);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f88f 	bl	800231c <demoLCD>
	  i++;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3301      	adds	r3, #1
 8002202:	607b      	str	r3, [r7, #4]
	  if(i % 2 == 0){
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10a      	bne.n	8002224 <main+0x70>
		  HAL_GPIO_WritePin(GPIOA, LED0_Pin, GPIO_PIN_SET);
 800220e:	2201      	movs	r2, #1
 8002210:	2180      	movs	r1, #128	; 0x80
 8002212:	480c      	ldr	r0, [pc, #48]	; (8002244 <main+0x90>)
 8002214:	f001 fdc8 	bl	8003da8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_RESET);
 8002218:	2200      	movs	r2, #0
 800221a:	2140      	movs	r1, #64	; 0x40
 800221c:	4809      	ldr	r0, [pc, #36]	; (8002244 <main+0x90>)
 800221e:	f001 fdc3 	bl	8003da8 <HAL_GPIO_WritePin>
 8002222:	e009      	b.n	8002238 <main+0x84>
	  }else{
		  HAL_GPIO_WritePin(GPIOA, LED0_Pin, GPIO_PIN_RESET);
 8002224:	2200      	movs	r2, #0
 8002226:	2180      	movs	r1, #128	; 0x80
 8002228:	4806      	ldr	r0, [pc, #24]	; (8002244 <main+0x90>)
 800222a:	f001 fdbd 	bl	8003da8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_SET);
 800222e:	2201      	movs	r2, #1
 8002230:	2140      	movs	r1, #64	; 0x40
 8002232:	4804      	ldr	r0, [pc, #16]	; (8002244 <main+0x90>)
 8002234:	f001 fdb8 	bl	8003da8 <HAL_GPIO_WritePin>
	  }
	  HAL_Delay(100);
 8002238:	2064      	movs	r0, #100	; 0x64
 800223a:	f001 fb0f 	bl	800385c <HAL_Delay>
	  demoLCD(i);
 800223e:	e7db      	b.n	80021f8 <main+0x44>
 8002240:	40020400 	.word	0x40020400
 8002244:	40020000 	.word	0x40020000

08002248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b094      	sub	sp, #80	; 0x50
 800224c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800224e:	f107 0320 	add.w	r3, r7, #32
 8002252:	2230      	movs	r2, #48	; 0x30
 8002254:	2100      	movs	r1, #0
 8002256:	4618      	mov	r0, r3
 8002258:	f002 feec 	bl	8005034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800225c:	f107 030c 	add.w	r3, r7, #12
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
 800226a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800226c:	2300      	movs	r3, #0
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	4b28      	ldr	r3, [pc, #160]	; (8002314 <SystemClock_Config+0xcc>)
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	4a27      	ldr	r2, [pc, #156]	; (8002314 <SystemClock_Config+0xcc>)
 8002276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227a:	6413      	str	r3, [r2, #64]	; 0x40
 800227c:	4b25      	ldr	r3, [pc, #148]	; (8002314 <SystemClock_Config+0xcc>)
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002288:	2300      	movs	r3, #0
 800228a:	607b      	str	r3, [r7, #4]
 800228c:	4b22      	ldr	r3, [pc, #136]	; (8002318 <SystemClock_Config+0xd0>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a21      	ldr	r2, [pc, #132]	; (8002318 <SystemClock_Config+0xd0>)
 8002292:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	4b1f      	ldr	r3, [pc, #124]	; (8002318 <SystemClock_Config+0xd0>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a0:	607b      	str	r3, [r7, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022a4:	2301      	movs	r3, #1
 80022a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022ae:	2302      	movs	r3, #2
 80022b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80022b8:	2304      	movs	r3, #4
 80022ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80022bc:	23a8      	movs	r3, #168	; 0xa8
 80022be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022c0:	2302      	movs	r3, #2
 80022c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80022c4:	2304      	movs	r3, #4
 80022c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022c8:	f107 0320 	add.w	r3, r7, #32
 80022cc:	4618      	mov	r0, r3
 80022ce:	f001 fd85 	bl	8003ddc <HAL_RCC_OscConfig>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80022d8:	f001 f874 	bl	80033c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022dc:	230f      	movs	r3, #15
 80022de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022e0:	2302      	movs	r3, #2
 80022e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80022f4:	f107 030c 	add.w	r3, r7, #12
 80022f8:	2105      	movs	r1, #5
 80022fa:	4618      	mov	r0, r3
 80022fc:	f001 ffe6 	bl	80042cc <HAL_RCC_ClockConfig>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002306:	f001 f85d 	bl	80033c4 <Error_Handler>
  }
}
 800230a:	bf00      	nop
 800230c:	3750      	adds	r7, #80	; 0x50
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40023800 	.word	0x40023800
 8002318:	40007000 	.word	0x40007000

0800231c <demoLCD>:

/* USER CODE BEGIN 4 */
void demoLCD(int i)
{
 800231c:	b590      	push	{r4, r7, lr}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
	lcdSetOrientation(i % 4);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	425a      	negs	r2, r3
 8002328:	f003 0303 	and.w	r3, r3, #3
 800232c:	f002 0203 	and.w	r2, r2, #3
 8002330:	bf58      	it	pl
 8002332:	4253      	negpl	r3, r2
 8002334:	b2db      	uxtb	r3, r3
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff fd7a 	bl	8001e30 <lcdSetOrientation>

	uint32_t t = testFillScreen();
 800233c:	f000 fa0e 	bl	800275c <testFillScreen>
 8002340:	60f8      	str	r0, [r7, #12]
	lcdSetTextFont(&Font16);
 8002342:	48dd      	ldr	r0, [pc, #884]	; (80026b8 <demoLCD+0x39c>)
 8002344:	f7ff fd4e 	bl	8001de4 <lcdSetTextFont>
	lcdSetCursor(0, lcdGetHeight() - lcdGetTextFont()->Height - 1);
 8002348:	f7ff fe52 	bl	8001ff0 <lcdGetHeight>
 800234c:	4603      	mov	r3, r0
 800234e:	461c      	mov	r4, r3
 8002350:	f7ff fe66 	bl	8002020 <lcdGetTextFont>
 8002354:	4603      	mov	r3, r0
 8002356:	88db      	ldrh	r3, [r3, #6]
 8002358:	1ae3      	subs	r3, r4, r3
 800235a:	b29b      	uxth	r3, r3
 800235c:	3b01      	subs	r3, #1
 800235e:	b29b      	uxth	r3, r3
 8002360:	4619      	mov	r1, r3
 8002362:	2000      	movs	r0, #0
 8002364:	f7ff fdd2 	bl	8001f0c <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 8002368:	2100      	movs	r1, #0
 800236a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800236e:	f7ff fd49 	bl	8001e04 <lcdSetTextColor>
	lcdPrintf("Time: %4lu ms", t);
 8002372:	68f9      	ldr	r1, [r7, #12]
 8002374:	48d1      	ldr	r0, [pc, #836]	; (80026bc <demoLCD+0x3a0>)
 8002376:	f7ff fca9 	bl	8001ccc <lcdPrintf>
	HAL_Delay(2000);
 800237a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800237e:	f001 fa6d 	bl	800385c <HAL_Delay>

	t = HAL_GetTick();
 8002382:	f001 fa5f 	bl	8003844 <HAL_GetTick>
 8002386:	60f8      	str	r0, [r7, #12]
	lcdTest();
 8002388:	f7fe fbcc 	bl	8000b24 <lcdTest>
	lcdSetTextFont(&Font16);
 800238c:	48ca      	ldr	r0, [pc, #808]	; (80026b8 <demoLCD+0x39c>)
 800238e:	f7ff fd29 	bl	8001de4 <lcdSetTextFont>
	lcdSetCursor(0, lcdGetHeight() - lcdGetTextFont()->Height - 1);
 8002392:	f7ff fe2d 	bl	8001ff0 <lcdGetHeight>
 8002396:	4603      	mov	r3, r0
 8002398:	461c      	mov	r4, r3
 800239a:	f7ff fe41 	bl	8002020 <lcdGetTextFont>
 800239e:	4603      	mov	r3, r0
 80023a0:	88db      	ldrh	r3, [r3, #6]
 80023a2:	1ae3      	subs	r3, r4, r3
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	4619      	mov	r1, r3
 80023ac:	2000      	movs	r0, #0
 80023ae:	f7ff fdad 	bl	8001f0c <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 80023b2:	2100      	movs	r1, #0
 80023b4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80023b8:	f7ff fd24 	bl	8001e04 <lcdSetTextColor>
	lcdPrintf("Time: %4lu ms", HAL_GetTick() - t);
 80023bc:	f001 fa42 	bl	8003844 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	4619      	mov	r1, r3
 80023c8:	48bc      	ldr	r0, [pc, #752]	; (80026bc <demoLCD+0x3a0>)
 80023ca:	f7ff fc7f 	bl	8001ccc <lcdPrintf>
	HAL_Delay(2000);
 80023ce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80023d2:	f001 fa43 	bl	800385c <HAL_Delay>

	t = testText();
 80023d6:	f000 fa69 	bl	80028ac <testText>
 80023da:	60f8      	str	r0, [r7, #12]
	lcdSetTextFont(&Font16);
 80023dc:	48b6      	ldr	r0, [pc, #728]	; (80026b8 <demoLCD+0x39c>)
 80023de:	f7ff fd01 	bl	8001de4 <lcdSetTextFont>
	lcdSetCursor(0, lcdGetHeight() - lcdGetTextFont()->Height - 1);
 80023e2:	f7ff fe05 	bl	8001ff0 <lcdGetHeight>
 80023e6:	4603      	mov	r3, r0
 80023e8:	461c      	mov	r4, r3
 80023ea:	f7ff fe19 	bl	8002020 <lcdGetTextFont>
 80023ee:	4603      	mov	r3, r0
 80023f0:	88db      	ldrh	r3, [r3, #6]
 80023f2:	1ae3      	subs	r3, r4, r3
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	4619      	mov	r1, r3
 80023fc:	2000      	movs	r0, #0
 80023fe:	f7ff fd85 	bl	8001f0c <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 8002402:	2100      	movs	r1, #0
 8002404:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002408:	f7ff fcfc 	bl	8001e04 <lcdSetTextColor>
	lcdPrintf("Time: %4lu ms", t);
 800240c:	68f9      	ldr	r1, [r7, #12]
 800240e:	48ab      	ldr	r0, [pc, #684]	; (80026bc <demoLCD+0x3a0>)
 8002410:	f7ff fc5c 	bl	8001ccc <lcdPrintf>
	HAL_Delay(2000);
 8002414:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002418:	f001 fa20 	bl	800385c <HAL_Delay>

	lcdSetTextFont(&Font16);
 800241c:	48a6      	ldr	r0, [pc, #664]	; (80026b8 <demoLCD+0x39c>)
 800241e:	f7ff fce1 	bl	8001de4 <lcdSetTextFont>
	lcdSetCursor(0, lcdGetHeight() - lcdGetTextFont()->Height - 1);
 8002422:	f7ff fde5 	bl	8001ff0 <lcdGetHeight>
 8002426:	4603      	mov	r3, r0
 8002428:	461c      	mov	r4, r3
 800242a:	f7ff fdf9 	bl	8002020 <lcdGetTextFont>
 800242e:	4603      	mov	r3, r0
 8002430:	88db      	ldrh	r3, [r3, #6]
 8002432:	1ae3      	subs	r3, r4, r3
 8002434:	b29b      	uxth	r3, r3
 8002436:	3b01      	subs	r3, #1
 8002438:	b29b      	uxth	r3, r3
 800243a:	4619      	mov	r1, r3
 800243c:	2000      	movs	r0, #0
 800243e:	f7ff fd65 	bl	8001f0c <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 8002442:	2100      	movs	r1, #0
 8002444:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002448:	f7ff fcdc 	bl	8001e04 <lcdSetTextColor>
	lcdPrintf("Time: %4lu ms", testLines(COLOR_CYAN));
 800244c:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8002450:	f000 fab8 	bl	80029c4 <testLines>
 8002454:	4603      	mov	r3, r0
 8002456:	4619      	mov	r1, r3
 8002458:	4898      	ldr	r0, [pc, #608]	; (80026bc <demoLCD+0x3a0>)
 800245a:	f7ff fc37 	bl	8001ccc <lcdPrintf>
	HAL_Delay(2000);
 800245e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002462:	f001 f9fb 	bl	800385c <HAL_Delay>

	lcdSetTextFont(&Font16);
 8002466:	4894      	ldr	r0, [pc, #592]	; (80026b8 <demoLCD+0x39c>)
 8002468:	f7ff fcbc 	bl	8001de4 <lcdSetTextFont>
	lcdSetCursor(0, lcdGetHeight() - lcdGetTextFont()->Height - 1);
 800246c:	f7ff fdc0 	bl	8001ff0 <lcdGetHeight>
 8002470:	4603      	mov	r3, r0
 8002472:	461c      	mov	r4, r3
 8002474:	f7ff fdd4 	bl	8002020 <lcdGetTextFont>
 8002478:	4603      	mov	r3, r0
 800247a:	88db      	ldrh	r3, [r3, #6]
 800247c:	1ae3      	subs	r3, r4, r3
 800247e:	b29b      	uxth	r3, r3
 8002480:	3b01      	subs	r3, #1
 8002482:	b29b      	uxth	r3, r3
 8002484:	4619      	mov	r1, r3
 8002486:	2000      	movs	r0, #0
 8002488:	f7ff fd40 	bl	8001f0c <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 800248c:	2100      	movs	r1, #0
 800248e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002492:	f7ff fcb7 	bl	8001e04 <lcdSetTextColor>
	lcdPrintf("Time: %4lu ms", testFastLines(COLOR_RED, COLOR_BLUE));
 8002496:	211f      	movs	r1, #31
 8002498:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800249c:	f000 fbc6 	bl	8002c2c <testFastLines>
 80024a0:	4603      	mov	r3, r0
 80024a2:	4619      	mov	r1, r3
 80024a4:	4885      	ldr	r0, [pc, #532]	; (80026bc <demoLCD+0x3a0>)
 80024a6:	f7ff fc11 	bl	8001ccc <lcdPrintf>
	HAL_Delay(2000);
 80024aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80024ae:	f001 f9d5 	bl	800385c <HAL_Delay>

	lcdSetTextFont(&Font16);
 80024b2:	4881      	ldr	r0, [pc, #516]	; (80026b8 <demoLCD+0x39c>)
 80024b4:	f7ff fc96 	bl	8001de4 <lcdSetTextFont>
	lcdSetCursor(0, lcdGetHeight() - lcdGetTextFont()->Height - 1);
 80024b8:	f7ff fd9a 	bl	8001ff0 <lcdGetHeight>
 80024bc:	4603      	mov	r3, r0
 80024be:	461c      	mov	r4, r3
 80024c0:	f7ff fdae 	bl	8002020 <lcdGetTextFont>
 80024c4:	4603      	mov	r3, r0
 80024c6:	88db      	ldrh	r3, [r3, #6]
 80024c8:	1ae3      	subs	r3, r4, r3
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	3b01      	subs	r3, #1
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	4619      	mov	r1, r3
 80024d2:	2000      	movs	r0, #0
 80024d4:	f7ff fd1a 	bl	8001f0c <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 80024d8:	2100      	movs	r1, #0
 80024da:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80024de:	f7ff fc91 	bl	8001e04 <lcdSetTextColor>
	lcdPrintf("Time: %4lu ms", testRects(COLOR_GREEN));
 80024e2:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80024e6:	f000 fbe4 	bl	8002cb2 <testRects>
 80024ea:	4603      	mov	r3, r0
 80024ec:	4619      	mov	r1, r3
 80024ee:	4873      	ldr	r0, [pc, #460]	; (80026bc <demoLCD+0x3a0>)
 80024f0:	f7ff fbec 	bl	8001ccc <lcdPrintf>
	HAL_Delay(2000);
 80024f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80024f8:	f001 f9b0 	bl	800385c <HAL_Delay>

	lcdSetTextFont(&Font16);
 80024fc:	486e      	ldr	r0, [pc, #440]	; (80026b8 <demoLCD+0x39c>)
 80024fe:	f7ff fc71 	bl	8001de4 <lcdSetTextFont>
	lcdSetCursor(0, lcdGetHeight() - lcdGetTextFont()->Height - 1);
 8002502:	f7ff fd75 	bl	8001ff0 <lcdGetHeight>
 8002506:	4603      	mov	r3, r0
 8002508:	461c      	mov	r4, r3
 800250a:	f7ff fd89 	bl	8002020 <lcdGetTextFont>
 800250e:	4603      	mov	r3, r0
 8002510:	88db      	ldrh	r3, [r3, #6]
 8002512:	1ae3      	subs	r3, r4, r3
 8002514:	b29b      	uxth	r3, r3
 8002516:	3b01      	subs	r3, #1
 8002518:	b29b      	uxth	r3, r3
 800251a:	4619      	mov	r1, r3
 800251c:	2000      	movs	r0, #0
 800251e:	f7ff fcf5 	bl	8001f0c <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 8002522:	2100      	movs	r1, #0
 8002524:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002528:	f7ff fc6c 	bl	8001e04 <lcdSetTextColor>
	lcdPrintf("Time: %4lu ms", testFilledRects(COLOR_YELLOW, COLOR_MAGENTA));
 800252c:	f64f 011f 	movw	r1, #63519	; 0xf81f
 8002530:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002534:	f000 fc14 	bl	8002d60 <testFilledRects>
 8002538:	4603      	mov	r3, r0
 800253a:	4619      	mov	r1, r3
 800253c:	485f      	ldr	r0, [pc, #380]	; (80026bc <demoLCD+0x3a0>)
 800253e:	f7ff fbc5 	bl	8001ccc <lcdPrintf>
	HAL_Delay(2000);
 8002542:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002546:	f001 f989 	bl	800385c <HAL_Delay>

	lcdSetTextFont(&Font16);
 800254a:	485b      	ldr	r0, [pc, #364]	; (80026b8 <demoLCD+0x39c>)
 800254c:	f7ff fc4a 	bl	8001de4 <lcdSetTextFont>
	lcdSetCursor(0, lcdGetHeight() - lcdGetTextFont()->Height - 1);
 8002550:	f7ff fd4e 	bl	8001ff0 <lcdGetHeight>
 8002554:	4603      	mov	r3, r0
 8002556:	461c      	mov	r4, r3
 8002558:	f7ff fd62 	bl	8002020 <lcdGetTextFont>
 800255c:	4603      	mov	r3, r0
 800255e:	88db      	ldrh	r3, [r3, #6]
 8002560:	1ae3      	subs	r3, r4, r3
 8002562:	b29b      	uxth	r3, r3
 8002564:	3b01      	subs	r3, #1
 8002566:	b29b      	uxth	r3, r3
 8002568:	4619      	mov	r1, r3
 800256a:	2000      	movs	r0, #0
 800256c:	f7ff fcce 	bl	8001f0c <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 8002570:	2100      	movs	r1, #0
 8002572:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002576:	f7ff fc45 	bl	8001e04 <lcdSetTextColor>
	lcdPrintf("Time: %4lu ms", testFilledCircles(10, COLOR_MAGENTA));
 800257a:	f64f 011f 	movw	r1, #63519	; 0xf81f
 800257e:	200a      	movs	r0, #10
 8002580:	f000 fc66 	bl	8002e50 <testFilledCircles>
 8002584:	4603      	mov	r3, r0
 8002586:	4619      	mov	r1, r3
 8002588:	484c      	ldr	r0, [pc, #304]	; (80026bc <demoLCD+0x3a0>)
 800258a:	f7ff fb9f 	bl	8001ccc <lcdPrintf>
	HAL_Delay(2000);
 800258e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002592:	f001 f963 	bl	800385c <HAL_Delay>

	lcdSetTextFont(&Font16);
 8002596:	4848      	ldr	r0, [pc, #288]	; (80026b8 <demoLCD+0x39c>)
 8002598:	f7ff fc24 	bl	8001de4 <lcdSetTextFont>
	lcdSetCursor(0, lcdGetHeight() - lcdGetTextFont()->Height - 1);
 800259c:	f7ff fd28 	bl	8001ff0 <lcdGetHeight>
 80025a0:	4603      	mov	r3, r0
 80025a2:	461c      	mov	r4, r3
 80025a4:	f7ff fd3c 	bl	8002020 <lcdGetTextFont>
 80025a8:	4603      	mov	r3, r0
 80025aa:	88db      	ldrh	r3, [r3, #6]
 80025ac:	1ae3      	subs	r3, r4, r3
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	4619      	mov	r1, r3
 80025b6:	2000      	movs	r0, #0
 80025b8:	f7ff fca8 	bl	8001f0c <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 80025bc:	2100      	movs	r1, #0
 80025be:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80025c2:	f7ff fc1f 	bl	8001e04 <lcdSetTextColor>
	lcdPrintf("Time: %4lu ms", testCircles(10, COLOR_WHITE));
 80025c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80025ca:	200a      	movs	r0, #10
 80025cc:	f000 fc81 	bl	8002ed2 <testCircles>
 80025d0:	4603      	mov	r3, r0
 80025d2:	4619      	mov	r1, r3
 80025d4:	4839      	ldr	r0, [pc, #228]	; (80026bc <demoLCD+0x3a0>)
 80025d6:	f7ff fb79 	bl	8001ccc <lcdPrintf>
	HAL_Delay(2000);
 80025da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80025de:	f001 f93d 	bl	800385c <HAL_Delay>

	lcdSetTextFont(&Font16);
 80025e2:	4835      	ldr	r0, [pc, #212]	; (80026b8 <demoLCD+0x39c>)
 80025e4:	f7ff fbfe 	bl	8001de4 <lcdSetTextFont>
	lcdSetCursor(0, lcdGetHeight() - lcdGetTextFont()->Height - 1);
 80025e8:	f7ff fd02 	bl	8001ff0 <lcdGetHeight>
 80025ec:	4603      	mov	r3, r0
 80025ee:	461c      	mov	r4, r3
 80025f0:	f7ff fd16 	bl	8002020 <lcdGetTextFont>
 80025f4:	4603      	mov	r3, r0
 80025f6:	88db      	ldrh	r3, [r3, #6]
 80025f8:	1ae3      	subs	r3, r4, r3
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	3b01      	subs	r3, #1
 80025fe:	b29b      	uxth	r3, r3
 8002600:	4619      	mov	r1, r3
 8002602:	2000      	movs	r0, #0
 8002604:	f7ff fc82 	bl	8001f0c <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 8002608:	2100      	movs	r1, #0
 800260a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800260e:	f7ff fbf9 	bl	8001e04 <lcdSetTextColor>
	lcdPrintf("Time: %4lu ms", testTriangles());
 8002612:	f000 fca2 	bl	8002f5a <testTriangles>
 8002616:	4603      	mov	r3, r0
 8002618:	4619      	mov	r1, r3
 800261a:	4828      	ldr	r0, [pc, #160]	; (80026bc <demoLCD+0x3a0>)
 800261c:	f7ff fb56 	bl	8001ccc <lcdPrintf>
	HAL_Delay(2000);
 8002620:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002624:	f001 f91a 	bl	800385c <HAL_Delay>

	lcdSetTextFont(&Font16);
 8002628:	4823      	ldr	r0, [pc, #140]	; (80026b8 <demoLCD+0x39c>)
 800262a:	f7ff fbdb 	bl	8001de4 <lcdSetTextFont>
	lcdSetCursor(0, lcdGetHeight() - lcdGetTextFont()->Height - 1);
 800262e:	f7ff fcdf 	bl	8001ff0 <lcdGetHeight>
 8002632:	4603      	mov	r3, r0
 8002634:	461c      	mov	r4, r3
 8002636:	f7ff fcf3 	bl	8002020 <lcdGetTextFont>
 800263a:	4603      	mov	r3, r0
 800263c:	88db      	ldrh	r3, [r3, #6]
 800263e:	1ae3      	subs	r3, r4, r3
 8002640:	b29b      	uxth	r3, r3
 8002642:	3b01      	subs	r3, #1
 8002644:	b29b      	uxth	r3, r3
 8002646:	4619      	mov	r1, r3
 8002648:	2000      	movs	r0, #0
 800264a:	f7ff fc5f 	bl	8001f0c <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 800264e:	2100      	movs	r1, #0
 8002650:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002654:	f7ff fbd6 	bl	8001e04 <lcdSetTextColor>
	lcdPrintf("Time: %4lu ms", testFilledTriangles());
 8002658:	f000 fcec 	bl	8003034 <testFilledTriangles>
 800265c:	4603      	mov	r3, r0
 800265e:	4619      	mov	r1, r3
 8002660:	4816      	ldr	r0, [pc, #88]	; (80026bc <demoLCD+0x3a0>)
 8002662:	f7ff fb33 	bl	8001ccc <lcdPrintf>
	HAL_Delay(2000);
 8002666:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800266a:	f001 f8f7 	bl	800385c <HAL_Delay>

	lcdSetTextFont(&Font16);
 800266e:	4812      	ldr	r0, [pc, #72]	; (80026b8 <demoLCD+0x39c>)
 8002670:	f7ff fbb8 	bl	8001de4 <lcdSetTextFont>
	lcdSetCursor(0, lcdGetHeight() - lcdGetTextFont()->Height - 1);
 8002674:	f7ff fcbc 	bl	8001ff0 <lcdGetHeight>
 8002678:	4603      	mov	r3, r0
 800267a:	461c      	mov	r4, r3
 800267c:	f7ff fcd0 	bl	8002020 <lcdGetTextFont>
 8002680:	4603      	mov	r3, r0
 8002682:	88db      	ldrh	r3, [r3, #6]
 8002684:	1ae3      	subs	r3, r4, r3
 8002686:	b29b      	uxth	r3, r3
 8002688:	3b01      	subs	r3, #1
 800268a:	b29b      	uxth	r3, r3
 800268c:	4619      	mov	r1, r3
 800268e:	2000      	movs	r0, #0
 8002690:	f7ff fc3c 	bl	8001f0c <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 8002694:	2100      	movs	r1, #0
 8002696:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800269a:	f7ff fbb3 	bl	8001e04 <lcdSetTextColor>
	lcdPrintf("Time: %4lu ms", testRoundRects());
 800269e:	f000 fd87 	bl	80031b0 <testRoundRects>
 80026a2:	4603      	mov	r3, r0
 80026a4:	4619      	mov	r1, r3
 80026a6:	4805      	ldr	r0, [pc, #20]	; (80026bc <demoLCD+0x3a0>)
 80026a8:	f7ff fb10 	bl	8001ccc <lcdPrintf>
	HAL_Delay(2000);
 80026ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80026b0:	f001 f8d4 	bl	800385c <HAL_Delay>
 80026b4:	e004      	b.n	80026c0 <demoLCD+0x3a4>
 80026b6:	bf00      	nop
 80026b8:	20000008 	.word	0x20000008
 80026bc:	08005938 	.word	0x08005938

	lcdSetTextFont(&Font16);
 80026c0:	4824      	ldr	r0, [pc, #144]	; (8002754 <demoLCD+0x438>)
 80026c2:	f7ff fb8f 	bl	8001de4 <lcdSetTextFont>
	lcdSetCursor(0, lcdGetHeight() - lcdGetTextFont()->Height - 1);
 80026c6:	f7ff fc93 	bl	8001ff0 <lcdGetHeight>
 80026ca:	4603      	mov	r3, r0
 80026cc:	461c      	mov	r4, r3
 80026ce:	f7ff fca7 	bl	8002020 <lcdGetTextFont>
 80026d2:	4603      	mov	r3, r0
 80026d4:	88db      	ldrh	r3, [r3, #6]
 80026d6:	1ae3      	subs	r3, r4, r3
 80026d8:	b29b      	uxth	r3, r3
 80026da:	3b01      	subs	r3, #1
 80026dc:	b29b      	uxth	r3, r3
 80026de:	4619      	mov	r1, r3
 80026e0:	2000      	movs	r0, #0
 80026e2:	f7ff fc13 	bl	8001f0c <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 80026e6:	2100      	movs	r1, #0
 80026e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80026ec:	f7ff fb8a 	bl	8001e04 <lcdSetTextColor>
	lcdPrintf("Time: %4lu ms", testFilledRoundRects());
 80026f0:	f000 fdbf 	bl	8003272 <testFilledRoundRects>
 80026f4:	4603      	mov	r3, r0
 80026f6:	4619      	mov	r1, r3
 80026f8:	4817      	ldr	r0, [pc, #92]	; (8002758 <demoLCD+0x43c>)
 80026fa:	f7ff fae7 	bl	8001ccc <lcdPrintf>
	HAL_Delay(2000);
 80026fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002702:	f001 f8ab 	bl	800385c <HAL_Delay>

	lcdSetTextFont(&Font16);
 8002706:	4813      	ldr	r0, [pc, #76]	; (8002754 <demoLCD+0x438>)
 8002708:	f7ff fb6c 	bl	8001de4 <lcdSetTextFont>
	lcdSetCursor(0, lcdGetHeight() - lcdGetTextFont()->Height - 1);
 800270c:	f7ff fc70 	bl	8001ff0 <lcdGetHeight>
 8002710:	4603      	mov	r3, r0
 8002712:	461c      	mov	r4, r3
 8002714:	f7ff fc84 	bl	8002020 <lcdGetTextFont>
 8002718:	4603      	mov	r3, r0
 800271a:	88db      	ldrh	r3, [r3, #6]
 800271c:	1ae3      	subs	r3, r4, r3
 800271e:	b29b      	uxth	r3, r3
 8002720:	3b01      	subs	r3, #1
 8002722:	b29b      	uxth	r3, r3
 8002724:	4619      	mov	r1, r3
 8002726:	2000      	movs	r0, #0
 8002728:	f7ff fbf0 	bl	8001f0c <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 800272c:	2100      	movs	r1, #0
 800272e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002732:	f7ff fb67 	bl	8001e04 <lcdSetTextColor>
	lcdPrintf("Time: %4lu ms", testDrawImage());
 8002736:	f000 fe05 	bl	8003344 <testDrawImage>
 800273a:	4603      	mov	r3, r0
 800273c:	4619      	mov	r1, r3
 800273e:	4806      	ldr	r0, [pc, #24]	; (8002758 <demoLCD+0x43c>)
 8002740:	f7ff fac4 	bl	8001ccc <lcdPrintf>
	HAL_Delay(2000);
 8002744:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002748:	f001 f888 	bl	800385c <HAL_Delay>
}
 800274c:	bf00      	nop
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	bd90      	pop	{r4, r7, pc}
 8002754:	20000008 	.word	0x20000008
 8002758:	08005938 	.word	0x08005938

0800275c <testFillScreen>:

unsigned long testFillScreen()
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
	unsigned long start = HAL_GetTick(), t = 0;
 8002762:	f001 f86f 	bl	8003844 <HAL_GetTick>
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	2300      	movs	r3, #0
 800276a:	603b      	str	r3, [r7, #0]
	lcdFillRGB(COLOR_BLACK);
 800276c:	2000      	movs	r0, #0
 800276e:	f7fe fa7b 	bl	8000c68 <lcdFillRGB>
	t += HAL_GetTick() - start;
 8002772:	f001 f867 	bl	8003844 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	4413      	add	r3, r2
 8002780:	603b      	str	r3, [r7, #0]
	lcdSetCursor(0, 0);
 8002782:	2100      	movs	r1, #0
 8002784:	2000      	movs	r0, #0
 8002786:	f7ff fbc1 	bl	8001f0c <lcdSetCursor>
	lcdSetTextFont(&Font24);
 800278a:	4843      	ldr	r0, [pc, #268]	; (8002898 <testFillScreen+0x13c>)
 800278c:	f7ff fb2a 	bl	8001de4 <lcdSetTextFont>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 8002790:	2100      	movs	r1, #0
 8002792:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002796:	f7ff fb35 	bl	8001e04 <lcdSetTextColor>
	lcdPrintf("BLACK");
 800279a:	4840      	ldr	r0, [pc, #256]	; (800289c <testFillScreen+0x140>)
 800279c:	f7ff fa96 	bl	8001ccc <lcdPrintf>
	HAL_Delay(1000);
 80027a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027a4:	f001 f85a 	bl	800385c <HAL_Delay>
	start = HAL_GetTick();
 80027a8:	f001 f84c 	bl	8003844 <HAL_GetTick>
 80027ac:	6078      	str	r0, [r7, #4]
	lcdFillRGB(COLOR_RED);
 80027ae:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80027b2:	f7fe fa59 	bl	8000c68 <lcdFillRGB>
	t += HAL_GetTick() - start;
 80027b6:	f001 f845 	bl	8003844 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	4413      	add	r3, r2
 80027c4:	603b      	str	r3, [r7, #0]
	lcdSetCursor(0, 0);
 80027c6:	2100      	movs	r1, #0
 80027c8:	2000      	movs	r0, #0
 80027ca:	f7ff fb9f 	bl	8001f0c <lcdSetCursor>
	lcdSetTextFont(&Font24);
 80027ce:	4832      	ldr	r0, [pc, #200]	; (8002898 <testFillScreen+0x13c>)
 80027d0:	f7ff fb08 	bl	8001de4 <lcdSetTextFont>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 80027d4:	2100      	movs	r1, #0
 80027d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80027da:	f7ff fb13 	bl	8001e04 <lcdSetTextColor>
	lcdPrintf("RED");
 80027de:	4830      	ldr	r0, [pc, #192]	; (80028a0 <testFillScreen+0x144>)
 80027e0:	f7ff fa74 	bl	8001ccc <lcdPrintf>
	HAL_Delay(1000);
 80027e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027e8:	f001 f838 	bl	800385c <HAL_Delay>
	start = HAL_GetTick();
 80027ec:	f001 f82a 	bl	8003844 <HAL_GetTick>
 80027f0:	6078      	str	r0, [r7, #4]
	lcdFillRGB(COLOR_GREEN);
 80027f2:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80027f6:	f7fe fa37 	bl	8000c68 <lcdFillRGB>
	t += HAL_GetTick() - start;
 80027fa:	f001 f823 	bl	8003844 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	4413      	add	r3, r2
 8002808:	603b      	str	r3, [r7, #0]
	lcdSetCursor(0, 0);
 800280a:	2100      	movs	r1, #0
 800280c:	2000      	movs	r0, #0
 800280e:	f7ff fb7d 	bl	8001f0c <lcdSetCursor>
	lcdSetTextFont(&Font24);
 8002812:	4821      	ldr	r0, [pc, #132]	; (8002898 <testFillScreen+0x13c>)
 8002814:	f7ff fae6 	bl	8001de4 <lcdSetTextFont>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 8002818:	2100      	movs	r1, #0
 800281a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800281e:	f7ff faf1 	bl	8001e04 <lcdSetTextColor>
	lcdPrintf("GREEN");
 8002822:	4820      	ldr	r0, [pc, #128]	; (80028a4 <testFillScreen+0x148>)
 8002824:	f7ff fa52 	bl	8001ccc <lcdPrintf>
	HAL_Delay(1000);
 8002828:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800282c:	f001 f816 	bl	800385c <HAL_Delay>
	start = HAL_GetTick();
 8002830:	f001 f808 	bl	8003844 <HAL_GetTick>
 8002834:	6078      	str	r0, [r7, #4]
	lcdFillRGB(COLOR_BLUE);
 8002836:	201f      	movs	r0, #31
 8002838:	f7fe fa16 	bl	8000c68 <lcdFillRGB>
	t += HAL_GetTick() - start;
 800283c:	f001 f802 	bl	8003844 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	4413      	add	r3, r2
 800284a:	603b      	str	r3, [r7, #0]
	lcdSetCursor(0, 0);
 800284c:	2100      	movs	r1, #0
 800284e:	2000      	movs	r0, #0
 8002850:	f7ff fb5c 	bl	8001f0c <lcdSetCursor>
	lcdSetTextFont(&Font24);
 8002854:	4810      	ldr	r0, [pc, #64]	; (8002898 <testFillScreen+0x13c>)
 8002856:	f7ff fac5 	bl	8001de4 <lcdSetTextFont>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 800285a:	2100      	movs	r1, #0
 800285c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002860:	f7ff fad0 	bl	8001e04 <lcdSetTextColor>
	lcdPrintf("BLUE");
 8002864:	4810      	ldr	r0, [pc, #64]	; (80028a8 <testFillScreen+0x14c>)
 8002866:	f7ff fa31 	bl	8001ccc <lcdPrintf>
	HAL_Delay(1000);
 800286a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800286e:	f000 fff5 	bl	800385c <HAL_Delay>
	start = HAL_GetTick();
 8002872:	f000 ffe7 	bl	8003844 <HAL_GetTick>
 8002876:	6078      	str	r0, [r7, #4]
	lcdFillRGB(COLOR_BLACK);
 8002878:	2000      	movs	r0, #0
 800287a:	f7fe f9f5 	bl	8000c68 <lcdFillRGB>
	return t += HAL_GetTick() - start;
 800287e:	f000 ffe1 	bl	8003844 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	4413      	add	r3, r2
 800288c:	603b      	str	r3, [r7, #0]
 800288e:	683b      	ldr	r3, [r7, #0]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20000018 	.word	0x20000018
 800289c:	08005948 	.word	0x08005948
 80028a0:	08005950 	.word	0x08005950
 80028a4:	08005954 	.word	0x08005954
 80028a8:	0800595c 	.word	0x0800595c

080028ac <testText>:

unsigned long testText()
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
	lcdFillRGB(COLOR_BLACK);
 80028b2:	2000      	movs	r0, #0
 80028b4:	f7fe f9d8 	bl	8000c68 <lcdFillRGB>
	unsigned long start = HAL_GetTick();
 80028b8:	f000 ffc4 	bl	8003844 <HAL_GetTick>
 80028bc:	6078      	str	r0, [r7, #4]
	lcdSetCursor(0, 0);
 80028be:	2100      	movs	r1, #0
 80028c0:	2000      	movs	r0, #0
 80028c2:	f7ff fb23 	bl	8001f0c <lcdSetCursor>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 80028c6:	2100      	movs	r1, #0
 80028c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80028cc:	f7ff fa9a 	bl	8001e04 <lcdSetTextColor>
	lcdSetTextFont(&Font8);
 80028d0:	4829      	ldr	r0, [pc, #164]	; (8002978 <testText+0xcc>)
 80028d2:	f7ff fa87 	bl	8001de4 <lcdSetTextFont>
	lcdPrintf("Hello World!\r\n");
 80028d6:	4829      	ldr	r0, [pc, #164]	; (800297c <testText+0xd0>)
 80028d8:	f7ff f9f8 	bl	8001ccc <lcdPrintf>
	lcdSetTextColor(COLOR_YELLOW, COLOR_BLACK);
 80028dc:	2100      	movs	r1, #0
 80028de:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80028e2:	f7ff fa8f 	bl	8001e04 <lcdSetTextColor>
	lcdSetTextFont(&Font12);
 80028e6:	4826      	ldr	r0, [pc, #152]	; (8002980 <testText+0xd4>)
 80028e8:	f7ff fa7c 	bl	8001de4 <lcdSetTextFont>
	lcdPrintf("%i\r\n", 1234567890);
 80028ec:	4925      	ldr	r1, [pc, #148]	; (8002984 <testText+0xd8>)
 80028ee:	4826      	ldr	r0, [pc, #152]	; (8002988 <testText+0xdc>)
 80028f0:	f7ff f9ec 	bl	8001ccc <lcdPrintf>
	lcdSetTextColor(COLOR_RED, COLOR_BLACK);
 80028f4:	2100      	movs	r1, #0
 80028f6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80028fa:	f7ff fa83 	bl	8001e04 <lcdSetTextColor>
	lcdSetTextFont(&Font16);
 80028fe:	4823      	ldr	r0, [pc, #140]	; (800298c <testText+0xe0>)
 8002900:	f7ff fa70 	bl	8001de4 <lcdSetTextFont>
	lcdPrintf("%#X\r\n", 0xDEADBEEF);
 8002904:	4922      	ldr	r1, [pc, #136]	; (8002990 <testText+0xe4>)
 8002906:	4823      	ldr	r0, [pc, #140]	; (8002994 <testText+0xe8>)
 8002908:	f7ff f9e0 	bl	8001ccc <lcdPrintf>
	lcdPrintf("\r\n");
 800290c:	4822      	ldr	r0, [pc, #136]	; (8002998 <testText+0xec>)
 800290e:	f7ff f9dd 	bl	8001ccc <lcdPrintf>
	lcdSetTextColor(COLOR_GREEN, COLOR_BLACK);
 8002912:	2100      	movs	r1, #0
 8002914:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8002918:	f7ff fa74 	bl	8001e04 <lcdSetTextColor>
	lcdSetTextFont(&Font20);
 800291c:	481f      	ldr	r0, [pc, #124]	; (800299c <testText+0xf0>)
 800291e:	f7ff fa61 	bl	8001de4 <lcdSetTextFont>
	lcdPrintf("Groop\r\n");
 8002922:	481f      	ldr	r0, [pc, #124]	; (80029a0 <testText+0xf4>)
 8002924:	f7ff f9d2 	bl	8001ccc <lcdPrintf>
	lcdSetTextFont(&Font12);
 8002928:	4815      	ldr	r0, [pc, #84]	; (8002980 <testText+0xd4>)
 800292a:	f7ff fa5b 	bl	8001de4 <lcdSetTextFont>
	lcdPrintf("I implore thee,\r\n");
 800292e:	481d      	ldr	r0, [pc, #116]	; (80029a4 <testText+0xf8>)
 8002930:	f7ff f9cc 	bl	8001ccc <lcdPrintf>
	lcdSetTextFont(&Font12);
 8002934:	4812      	ldr	r0, [pc, #72]	; (8002980 <testText+0xd4>)
 8002936:	f7ff fa55 	bl	8001de4 <lcdSetTextFont>
	lcdPrintf("my foonting turlingdromes.\r\n");
 800293a:	481b      	ldr	r0, [pc, #108]	; (80029a8 <testText+0xfc>)
 800293c:	f7ff f9c6 	bl	8001ccc <lcdPrintf>
	lcdPrintf("And hooptiously drangle me\r\n");
 8002940:	481a      	ldr	r0, [pc, #104]	; (80029ac <testText+0x100>)
 8002942:	f7ff f9c3 	bl	8001ccc <lcdPrintf>
	lcdPrintf("with crinkly bindlewurdles,\r\n");
 8002946:	481a      	ldr	r0, [pc, #104]	; (80029b0 <testText+0x104>)
 8002948:	f7ff f9c0 	bl	8001ccc <lcdPrintf>
	lcdPrintf("Or I will rend thee\r\n");
 800294c:	4819      	ldr	r0, [pc, #100]	; (80029b4 <testText+0x108>)
 800294e:	f7ff f9bd 	bl	8001ccc <lcdPrintf>
	lcdPrintf("in the gobberwarts\r\n");
 8002952:	4819      	ldr	r0, [pc, #100]	; (80029b8 <testText+0x10c>)
 8002954:	f7ff f9ba 	bl	8001ccc <lcdPrintf>
	lcdPrintf("with my blurglecruncheon,\r\n");
 8002958:	4818      	ldr	r0, [pc, #96]	; (80029bc <testText+0x110>)
 800295a:	f7ff f9b7 	bl	8001ccc <lcdPrintf>
	lcdPrintf("see if I don't!\r\n");
 800295e:	4818      	ldr	r0, [pc, #96]	; (80029c0 <testText+0x114>)
 8002960:	f7ff f9b4 	bl	8001ccc <lcdPrintf>
	return HAL_GetTick() - start;
 8002964:	f000 ff6e 	bl	8003844 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	1ad3      	subs	r3, r2, r3
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	20000020 	.word	0x20000020
 800297c:	08005964 	.word	0x08005964
 8002980:	20000000 	.word	0x20000000
 8002984:	499602d2 	.word	0x499602d2
 8002988:	08005974 	.word	0x08005974
 800298c:	20000008 	.word	0x20000008
 8002990:	deadbeef 	.word	0xdeadbeef
 8002994:	0800597c 	.word	0x0800597c
 8002998:	08005984 	.word	0x08005984
 800299c:	20000010 	.word	0x20000010
 80029a0:	08005988 	.word	0x08005988
 80029a4:	08005990 	.word	0x08005990
 80029a8:	080059a4 	.word	0x080059a4
 80029ac:	080059c4 	.word	0x080059c4
 80029b0:	080059e4 	.word	0x080059e4
 80029b4:	08005a04 	.word	0x08005a04
 80029b8:	08005a1c 	.word	0x08005a1c
 80029bc:	08005a34 	.word	0x08005a34
 80029c0:	08005a50 	.word	0x08005a50

080029c4 <testLines>:

unsigned long testLines(uint16_t color)
{
 80029c4:	b590      	push	{r4, r7, lr}
 80029c6:	b08d      	sub	sp, #52	; 0x34
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	4603      	mov	r3, r0
 80029cc:	80fb      	strh	r3, [r7, #6]
  unsigned long start, t;
  int           x1, y1, x2, y2,
                w = lcdGetWidth(),
 80029ce:	f7ff fb03 	bl	8001fd8 <lcdGetWidth>
 80029d2:	4603      	mov	r3, r0
 80029d4:	61fb      	str	r3, [r7, #28]
                h = lcdGetHeight();
 80029d6:	f7ff fb0b 	bl	8001ff0 <lcdGetHeight>
 80029da:	4603      	mov	r3, r0
 80029dc:	61bb      	str	r3, [r7, #24]

  lcdFillRGB(COLOR_BLACK);
 80029de:	2000      	movs	r0, #0
 80029e0:	f7fe f942 	bl	8000c68 <lcdFillRGB>

  x1 = y1 = 0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	613b      	str	r3, [r7, #16]
  y2    = h - 1;
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	623b      	str	r3, [r7, #32]
  start = HAL_GetTick();
 80029f2:	f000 ff27 	bl	8003844 <HAL_GetTick>
 80029f6:	60f8      	str	r0, [r7, #12]
  for(x2 = 0; x2 < w; x2 += 6) lcdDrawLine(x1, y1, x2, y2, color);
 80029f8:	2300      	movs	r3, #0
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
 80029fc:	e00f      	b.n	8002a1e <testLines+0x5a>
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	b218      	sxth	r0, r3
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	b219      	sxth	r1, r3
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	b21a      	sxth	r2, r3
 8002a0a:	6a3b      	ldr	r3, [r7, #32]
 8002a0c:	b21c      	sxth	r4, r3
 8002a0e:	88fb      	ldrh	r3, [r7, #6]
 8002a10:	9300      	str	r3, [sp, #0]
 8002a12:	4623      	mov	r3, r4
 8002a14:	f7fe fa0c 	bl	8000e30 <lcdDrawLine>
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	3306      	adds	r3, #6
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	dbeb      	blt.n	80029fe <testLines+0x3a>
  x2 = w - 1;
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	627b      	str	r3, [r7, #36]	; 0x24
  for(y2 = 0; y2 < h; y2 += 6) lcdDrawLine(x1, y1, x2, y2, color);
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	623b      	str	r3, [r7, #32]
 8002a30:	e00f      	b.n	8002a52 <testLines+0x8e>
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	b218      	sxth	r0, r3
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	b219      	sxth	r1, r3
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	b21a      	sxth	r2, r3
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	b21c      	sxth	r4, r3
 8002a42:	88fb      	ldrh	r3, [r7, #6]
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	4623      	mov	r3, r4
 8002a48:	f7fe f9f2 	bl	8000e30 <lcdDrawLine>
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	3306      	adds	r3, #6
 8002a50:	623b      	str	r3, [r7, #32]
 8002a52:	6a3a      	ldr	r2, [r7, #32]
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	dbeb      	blt.n	8002a32 <testLines+0x6e>
  t = HAL_GetTick() - start; // fillScreen doesn't count against timing
 8002a5a:	f000 fef3 	bl	8003844 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	60bb      	str	r3, [r7, #8]

  HAL_Delay(1000);
 8002a66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a6a:	f000 fef7 	bl	800385c <HAL_Delay>
  lcdFillRGB(COLOR_BLACK);
 8002a6e:	2000      	movs	r0, #0
 8002a70:	f7fe f8fa 	bl	8000c68 <lcdFillRGB>

  x1 = w - 1;
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	613b      	str	r3, [r7, #16]
  y1 = 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]
  y2 = h - 1;
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	3b01      	subs	r3, #1
 8002a82:	623b      	str	r3, [r7, #32]

  start = HAL_GetTick();
 8002a84:	f000 fede 	bl	8003844 <HAL_GetTick>
 8002a88:	60f8      	str	r0, [r7, #12]

  for(x2 = 0; x2 < w; x2 += 6) lcdDrawLine(x1, y1, x2, y2, color);
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a8e:	e00f      	b.n	8002ab0 <testLines+0xec>
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	b218      	sxth	r0, r3
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	b219      	sxth	r1, r3
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	b21a      	sxth	r2, r3
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
 8002a9e:	b21c      	sxth	r4, r3
 8002aa0:	88fb      	ldrh	r3, [r7, #6]
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	4623      	mov	r3, r4
 8002aa6:	f7fe f9c3 	bl	8000e30 <lcdDrawLine>
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	3306      	adds	r3, #6
 8002aae:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	dbeb      	blt.n	8002a90 <testLines+0xcc>
  x2 = 0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24
  for(y2 = 0; y2 < h; y2 += 6) lcdDrawLine(x1, y1, x2, y2, color);
 8002abc:	2300      	movs	r3, #0
 8002abe:	623b      	str	r3, [r7, #32]
 8002ac0:	e00f      	b.n	8002ae2 <testLines+0x11e>
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	b218      	sxth	r0, r3
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	b219      	sxth	r1, r3
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	b21a      	sxth	r2, r3
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	b21c      	sxth	r4, r3
 8002ad2:	88fb      	ldrh	r3, [r7, #6]
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	4623      	mov	r3, r4
 8002ad8:	f7fe f9aa 	bl	8000e30 <lcdDrawLine>
 8002adc:	6a3b      	ldr	r3, [r7, #32]
 8002ade:	3306      	adds	r3, #6
 8002ae0:	623b      	str	r3, [r7, #32]
 8002ae2:	6a3a      	ldr	r2, [r7, #32]
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	dbeb      	blt.n	8002ac2 <testLines+0xfe>
  t += HAL_GetTick() - start;
 8002aea:	f000 feab 	bl	8003844 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	4413      	add	r3, r2
 8002af8:	60bb      	str	r3, [r7, #8]

  HAL_Delay(1000);
 8002afa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002afe:	f000 fead 	bl	800385c <HAL_Delay>
  lcdFillRGB(COLOR_BLACK);
 8002b02:	2000      	movs	r0, #0
 8002b04:	f7fe f8b0 	bl	8000c68 <lcdFillRGB>

  x1 = 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	613b      	str	r3, [r7, #16]
  y1 = h - 1;
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	617b      	str	r3, [r7, #20]
  y2 = 0;
 8002b12:	2300      	movs	r3, #0
 8002b14:	623b      	str	r3, [r7, #32]
  start = HAL_GetTick();
 8002b16:	f000 fe95 	bl	8003844 <HAL_GetTick>
 8002b1a:	60f8      	str	r0, [r7, #12]

  for(x2 = 0; x2 < w; x2 += 6) lcdDrawLine(x1, y1, x2, y2, color);
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b20:	e00f      	b.n	8002b42 <testLines+0x17e>
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	b218      	sxth	r0, r3
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	b219      	sxth	r1, r3
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	b21a      	sxth	r2, r3
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	b21c      	sxth	r4, r3
 8002b32:	88fb      	ldrh	r3, [r7, #6]
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	4623      	mov	r3, r4
 8002b38:	f7fe f97a 	bl	8000e30 <lcdDrawLine>
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	3306      	adds	r3, #6
 8002b40:	627b      	str	r3, [r7, #36]	; 0x24
 8002b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	dbeb      	blt.n	8002b22 <testLines+0x15e>
  x2 = w - 1;
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	627b      	str	r3, [r7, #36]	; 0x24
  for(y2 = 0; y2 < h; y2 += 6) lcdDrawLine(x1, y1, x2, y2, color);
 8002b50:	2300      	movs	r3, #0
 8002b52:	623b      	str	r3, [r7, #32]
 8002b54:	e00f      	b.n	8002b76 <testLines+0x1b2>
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	b218      	sxth	r0, r3
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	b219      	sxth	r1, r3
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	b21a      	sxth	r2, r3
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	b21c      	sxth	r4, r3
 8002b66:	88fb      	ldrh	r3, [r7, #6]
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	4623      	mov	r3, r4
 8002b6c:	f7fe f960 	bl	8000e30 <lcdDrawLine>
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	3306      	adds	r3, #6
 8002b74:	623b      	str	r3, [r7, #32]
 8002b76:	6a3a      	ldr	r2, [r7, #32]
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	dbeb      	blt.n	8002b56 <testLines+0x192>
  t += HAL_GetTick() - start;
 8002b7e:	f000 fe61 	bl	8003844 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	60bb      	str	r3, [r7, #8]

  HAL_Delay(1000);
 8002b8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b92:	f000 fe63 	bl	800385c <HAL_Delay>
  lcdFillRGB(COLOR_BLACK);
 8002b96:	2000      	movs	r0, #0
 8002b98:	f7fe f866 	bl	8000c68 <lcdFillRGB>

  x1 = w - 1;
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	613b      	str	r3, [r7, #16]
  y1 = h - 1;
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	617b      	str	r3, [r7, #20]
  y2 = 0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	623b      	str	r3, [r7, #32]

  start = HAL_GetTick();
 8002bac:	f000 fe4a 	bl	8003844 <HAL_GetTick>
 8002bb0:	60f8      	str	r0, [r7, #12]

  for(x2 = 0; x2 < w; x2 += 6) lcdDrawLine(x1, y1, x2, y2, color);
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bb6:	e00f      	b.n	8002bd8 <testLines+0x214>
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	b218      	sxth	r0, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	b219      	sxth	r1, r3
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	b21a      	sxth	r2, r3
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	b21c      	sxth	r4, r3
 8002bc8:	88fb      	ldrh	r3, [r7, #6]
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	4623      	mov	r3, r4
 8002bce:	f7fe f92f 	bl	8000e30 <lcdDrawLine>
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	3306      	adds	r3, #6
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	dbeb      	blt.n	8002bb8 <testLines+0x1f4>
  x2 = 0;
 8002be0:	2300      	movs	r3, #0
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
  for(y2 = 0; y2 < h; y2 += 6) lcdDrawLine(x1, y1, x2, y2, color);
 8002be4:	2300      	movs	r3, #0
 8002be6:	623b      	str	r3, [r7, #32]
 8002be8:	e00f      	b.n	8002c0a <testLines+0x246>
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	b218      	sxth	r0, r3
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	b219      	sxth	r1, r3
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	b21a      	sxth	r2, r3
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	b21c      	sxth	r4, r3
 8002bfa:	88fb      	ldrh	r3, [r7, #6]
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	4623      	mov	r3, r4
 8002c00:	f7fe f916 	bl	8000e30 <lcdDrawLine>
 8002c04:	6a3b      	ldr	r3, [r7, #32]
 8002c06:	3306      	adds	r3, #6
 8002c08:	623b      	str	r3, [r7, #32]
 8002c0a:	6a3a      	ldr	r2, [r7, #32]
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	dbeb      	blt.n	8002bea <testLines+0x226>

  return t += HAL_GetTick() - start;
 8002c12:	f000 fe17 	bl	8003844 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	4413      	add	r3, r2
 8002c20:	60bb      	str	r3, [r7, #8]
 8002c22:	68bb      	ldr	r3, [r7, #8]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	372c      	adds	r7, #44	; 0x2c
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd90      	pop	{r4, r7, pc}

08002c2c <testFastLines>:

unsigned long testFastLines(uint16_t color1, uint16_t color2)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b088      	sub	sp, #32
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	4603      	mov	r3, r0
 8002c34:	460a      	mov	r2, r1
 8002c36:	80fb      	strh	r3, [r7, #6]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	80bb      	strh	r3, [r7, #4]
  unsigned long start;
  int x, y, w = lcdGetWidth(), h = lcdGetHeight();
 8002c3c:	f7ff f9cc 	bl	8001fd8 <lcdGetWidth>
 8002c40:	4603      	mov	r3, r0
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	f7ff f9d4 	bl	8001ff0 <lcdGetHeight>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	613b      	str	r3, [r7, #16]

  lcdFillRGB(COLOR_BLACK);
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	f7fe f80b 	bl	8000c68 <lcdFillRGB>
  start = HAL_GetTick();
 8002c52:	f000 fdf7 	bl	8003844 <HAL_GetTick>
 8002c56:	60f8      	str	r0, [r7, #12]
  for(y = 0; y < h; y += 5) lcdDrawHLine(0, w, y, color1);
 8002c58:	2300      	movs	r3, #0
 8002c5a:	61bb      	str	r3, [r7, #24]
 8002c5c:	e00a      	b.n	8002c74 <testFastLines+0x48>
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	b299      	uxth	r1, r3
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	88fb      	ldrh	r3, [r7, #6]
 8002c68:	2000      	movs	r0, #0
 8002c6a:	f7fe f84b 	bl	8000d04 <lcdDrawHLine>
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	3305      	adds	r3, #5
 8002c72:	61bb      	str	r3, [r7, #24]
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	dbf0      	blt.n	8002c5e <testFastLines+0x32>
  for(x = 0; x < w; x += 5) lcdDrawVLine(x, 0, h, color2);
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	61fb      	str	r3, [r7, #28]
 8002c80:	e00a      	b.n	8002c98 <testFastLines+0x6c>
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	b298      	uxth	r0, r3
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	88bb      	ldrh	r3, [r7, #4]
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	f7fe f87f 	bl	8000d90 <lcdDrawVLine>
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3305      	adds	r3, #5
 8002c96:	61fb      	str	r3, [r7, #28]
 8002c98:	69fa      	ldr	r2, [r7, #28]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	dbf0      	blt.n	8002c82 <testFastLines+0x56>

  return HAL_GetTick() - start;
 8002ca0:	f000 fdd0 	bl	8003844 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	1ad3      	subs	r3, r2, r3
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3720      	adds	r7, #32
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <testRects>:

unsigned long testRects(uint16_t color)
{
 8002cb2:	b590      	push	{r4, r7, lr}
 8002cb4:	b08b      	sub	sp, #44	; 0x2c
 8002cb6:	af02      	add	r7, sp, #8
 8002cb8:	4603      	mov	r3, r0
 8002cba:	80fb      	strh	r3, [r7, #6]
  unsigned long start;
  int n, i, i2,
      cx = lcdGetWidth()  / 2,
 8002cbc:	f7ff f98c 	bl	8001fd8 <lcdGetWidth>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	085b      	lsrs	r3, r3, #1
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	61bb      	str	r3, [r7, #24]
      cy = lcdGetHeight() / 2;
 8002cc8:	f7ff f992 	bl	8001ff0 <lcdGetHeight>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	085b      	lsrs	r3, r3, #1
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	617b      	str	r3, [r7, #20]

  lcdFillRGB(COLOR_BLACK);
 8002cd4:	2000      	movs	r0, #0
 8002cd6:	f7fd ffc7 	bl	8000c68 <lcdFillRGB>
  n = min(lcdGetWidth(), lcdGetHeight());
 8002cda:	f7ff f97d 	bl	8001fd8 <lcdGetWidth>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	461c      	mov	r4, r3
 8002ce2:	f7ff f985 	bl	8001ff0 <lcdGetHeight>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	429c      	cmp	r4, r3
 8002cea:	d203      	bcs.n	8002cf4 <testRects+0x42>
 8002cec:	f7ff f974 	bl	8001fd8 <lcdGetWidth>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	e002      	b.n	8002cfa <testRects+0x48>
 8002cf4:	f7ff f97c 	bl	8001ff0 <lcdGetHeight>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	613b      	str	r3, [r7, #16]
  start = HAL_GetTick();
 8002cfc:	f000 fda2 	bl	8003844 <HAL_GetTick>
 8002d00:	60f8      	str	r0, [r7, #12]
  for(i = 2; i < n; i += 6)
 8002d02:	2302      	movs	r3, #2
 8002d04:	61fb      	str	r3, [r7, #28]
 8002d06:	e01e      	b.n	8002d46 <testRects+0x94>
  {
    i2 = i / 2;
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	0fda      	lsrs	r2, r3, #31
 8002d0c:	4413      	add	r3, r2
 8002d0e:	105b      	asrs	r3, r3, #1
 8002d10:	60bb      	str	r3, [r7, #8]
    lcdDrawRect(cx - i2, cy - i2, i, i, color);
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	b218      	sxth	r0, r3
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	b219      	sxth	r1, r3
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	b21a      	sxth	r2, r3
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	b21c      	sxth	r4, r3
 8002d36:	88fb      	ldrh	r3, [r7, #6]
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	4623      	mov	r3, r4
 8002d3c:	f7fe f916 	bl	8000f6c <lcdDrawRect>
  for(i = 2; i < n; i += 6)
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	3306      	adds	r3, #6
 8002d44:	61fb      	str	r3, [r7, #28]
 8002d46:	69fa      	ldr	r2, [r7, #28]
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	dbdc      	blt.n	8002d08 <testRects+0x56>
  }

  return HAL_GetTick() - start;
 8002d4e:	f000 fd79 	bl	8003844 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	1ad3      	subs	r3, r2, r3
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3724      	adds	r7, #36	; 0x24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd90      	pop	{r4, r7, pc}

08002d60 <testFilledRects>:

unsigned long testFilledRects(uint16_t color1, uint16_t color2)
{
 8002d60:	b590      	push	{r4, r7, lr}
 8002d62:	b08d      	sub	sp, #52	; 0x34
 8002d64:	af02      	add	r7, sp, #8
 8002d66:	4603      	mov	r3, r0
 8002d68:	460a      	mov	r2, r1
 8002d6a:	80fb      	strh	r3, [r7, #6]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	80bb      	strh	r3, [r7, #4]
  unsigned long start, t = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
  int n, i, i2,
      cx = lcdGetWidth() / 2 - 1,
 8002d74:	f7ff f930 	bl	8001fd8 <lcdGetWidth>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	085b      	lsrs	r3, r3, #1
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	61fb      	str	r3, [r7, #28]
      cy = lcdGetHeight() / 2 - 1;
 8002d82:	f7ff f935 	bl	8001ff0 <lcdGetHeight>
 8002d86:	4603      	mov	r3, r0
 8002d88:	085b      	lsrs	r3, r3, #1
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	61bb      	str	r3, [r7, #24]

  lcdFillRGB(COLOR_BLACK);
 8002d90:	2000      	movs	r0, #0
 8002d92:	f7fd ff69 	bl	8000c68 <lcdFillRGB>
  n = min(lcdGetWidth(), lcdGetHeight());
 8002d96:	f7ff f91f 	bl	8001fd8 <lcdGetWidth>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	461c      	mov	r4, r3
 8002d9e:	f7ff f927 	bl	8001ff0 <lcdGetHeight>
 8002da2:	4603      	mov	r3, r0
 8002da4:	429c      	cmp	r4, r3
 8002da6:	d203      	bcs.n	8002db0 <testFilledRects+0x50>
 8002da8:	f7ff f916 	bl	8001fd8 <lcdGetWidth>
 8002dac:	4603      	mov	r3, r0
 8002dae:	e002      	b.n	8002db6 <testFilledRects+0x56>
 8002db0:	f7ff f91e 	bl	8001ff0 <lcdGetHeight>
 8002db4:	4603      	mov	r3, r0
 8002db6:	617b      	str	r3, [r7, #20]

  for(i = n; i > 0; i -= 6)
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	623b      	str	r3, [r7, #32]
 8002dbc:	e040      	b.n	8002e40 <testFilledRects+0xe0>
  {
    i2 = i / 2;
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	0fda      	lsrs	r2, r3, #31
 8002dc2:	4413      	add	r3, r2
 8002dc4:	105b      	asrs	r3, r3, #1
 8002dc6:	613b      	str	r3, [r7, #16]
    start = HAL_GetTick();
 8002dc8:	f000 fd3c 	bl	8003844 <HAL_GetTick>
 8002dcc:	60f8      	str	r0, [r7, #12]
    lcdFillRect(cx-i2, cy-i2, i, i, color1);
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	b218      	sxth	r0, r3
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	b219      	sxth	r1, r3
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	b21a      	sxth	r2, r3
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	b21c      	sxth	r4, r3
 8002df2:	88fb      	ldrh	r3, [r7, #6]
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	4623      	mov	r3, r4
 8002df8:	f7fe fc5c 	bl	80016b4 <lcdFillRect>
    t    += HAL_GetTick() - start;
 8002dfc:	f000 fd22 	bl	8003844 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e08:	4413      	add	r3, r2
 8002e0a:	627b      	str	r3, [r7, #36]	; 0x24
    // Outlines are not included in timing results
    lcdDrawRect(cx-i2, cy-i2, i, i, color1);
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	b218      	sxth	r0, r3
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	b219      	sxth	r1, r3
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	b21a      	sxth	r2, r3
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	b21c      	sxth	r4, r3
 8002e30:	88fb      	ldrh	r3, [r7, #6]
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	4623      	mov	r3, r4
 8002e36:	f7fe f899 	bl	8000f6c <lcdDrawRect>
  for(i = n; i > 0; i -= 6)
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	3b06      	subs	r3, #6
 8002e3e:	623b      	str	r3, [r7, #32]
 8002e40:	6a3b      	ldr	r3, [r7, #32]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	dcbb      	bgt.n	8002dbe <testFilledRects+0x5e>
  }

  return t;
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	372c      	adds	r7, #44	; 0x2c
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd90      	pop	{r4, r7, pc}

08002e50 <testFilledCircles>:

unsigned long testFilledCircles(uint8_t radius, uint16_t color)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b088      	sub	sp, #32
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4603      	mov	r3, r0
 8002e58:	460a      	mov	r2, r1
 8002e5a:	71fb      	strb	r3, [r7, #7]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	80bb      	strh	r3, [r7, #4]
  unsigned long start;
  int x, y, w = lcdGetWidth(), h = lcdGetHeight(), r2 = radius * 2;
 8002e60:	f7ff f8ba 	bl	8001fd8 <lcdGetWidth>
 8002e64:	4603      	mov	r3, r0
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	f7ff f8c2 	bl	8001ff0 <lcdGetHeight>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	613b      	str	r3, [r7, #16]
 8002e70:	79fb      	ldrb	r3, [r7, #7]
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	60fb      	str	r3, [r7, #12]

  lcdFillRGB(COLOR_BLACK);
 8002e76:	2000      	movs	r0, #0
 8002e78:	f7fd fef6 	bl	8000c68 <lcdFillRGB>
  start = HAL_GetTick();
 8002e7c:	f000 fce2 	bl	8003844 <HAL_GetTick>
 8002e80:	60b8      	str	r0, [r7, #8]
  for(x = radius; x < w; x += r2)
 8002e82:	79fb      	ldrb	r3, [r7, #7]
 8002e84:	61fb      	str	r3, [r7, #28]
 8002e86:	e017      	b.n	8002eb8 <testFilledCircles+0x68>
  {
    for(y = radius; y < h; y += r2)
 8002e88:	79fb      	ldrb	r3, [r7, #7]
 8002e8a:	61bb      	str	r3, [r7, #24]
 8002e8c:	e00c      	b.n	8002ea8 <testFilledCircles+0x58>
    {
      lcdFillCircle(x, y, radius, color);
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	b218      	sxth	r0, r3
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	b219      	sxth	r1, r3
 8002e96:	79fb      	ldrb	r3, [r7, #7]
 8002e98:	b21a      	sxth	r2, r3
 8002e9a:	88bb      	ldrh	r3, [r7, #4]
 8002e9c:	f7fe fb32 	bl	8001504 <lcdFillCircle>
    for(y = radius; y < h; y += r2)
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	dbee      	blt.n	8002e8e <testFilledCircles+0x3e>
  for(x = radius; x < w; x += r2)
 8002eb0:	69fa      	ldr	r2, [r7, #28]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	61fb      	str	r3, [r7, #28]
 8002eb8:	69fa      	ldr	r2, [r7, #28]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	dbe3      	blt.n	8002e88 <testFilledCircles+0x38>
    }
  }

  return HAL_GetTick() - start;
 8002ec0:	f000 fcc0 	bl	8003844 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	1ad3      	subs	r3, r2, r3
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3720      	adds	r7, #32
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <testCircles>:

unsigned long testCircles(uint8_t radius, uint16_t color)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b088      	sub	sp, #32
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	4603      	mov	r3, r0
 8002eda:	460a      	mov	r2, r1
 8002edc:	71fb      	strb	r3, [r7, #7]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	80bb      	strh	r3, [r7, #4]
  unsigned long start;
  int x, y, r2 = radius * 2,
 8002ee2:	79fb      	ldrb	r3, [r7, #7]
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	617b      	str	r3, [r7, #20]
      w = lcdGetWidth()  + radius,
 8002ee8:	f7ff f876 	bl	8001fd8 <lcdGetWidth>
 8002eec:	4603      	mov	r3, r0
 8002eee:	461a      	mov	r2, r3
 8002ef0:	79fb      	ldrb	r3, [r7, #7]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
      h = lcdGetHeight() + radius;
 8002ef6:	f7ff f87b 	bl	8001ff0 <lcdGetHeight>
 8002efa:	4603      	mov	r3, r0
 8002efc:	461a      	mov	r2, r3
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	4413      	add	r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]

  // Screen is not cleared for this one -- this is
  // intentional and does not affect the reported time.
  start = HAL_GetTick();
 8002f04:	f000 fc9e 	bl	8003844 <HAL_GetTick>
 8002f08:	60b8      	str	r0, [r7, #8]
  for(x = 0; x < w; x += r2)
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61fb      	str	r3, [r7, #28]
 8002f0e:	e017      	b.n	8002f40 <testCircles+0x6e>
  {
    for(y = 0; y < h; y += r2)
 8002f10:	2300      	movs	r3, #0
 8002f12:	61bb      	str	r3, [r7, #24]
 8002f14:	e00c      	b.n	8002f30 <testCircles+0x5e>
    {
      lcdDrawCircle(x, y, radius, color);
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	b218      	sxth	r0, r3
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	b219      	sxth	r1, r3
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	b21a      	sxth	r2, r3
 8002f22:	88bb      	ldrh	r3, [r7, #4]
 8002f24:	f7fe f9e0 	bl	80012e8 <lcdDrawCircle>
    for(y = 0; y < h; y += r2)
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	dbee      	blt.n	8002f16 <testCircles+0x44>
  for(x = 0; x < w; x += r2)
 8002f38:	69fa      	ldr	r2, [r7, #28]
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	61fb      	str	r3, [r7, #28]
 8002f40:	69fa      	ldr	r2, [r7, #28]
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	dbe3      	blt.n	8002f10 <testCircles+0x3e>
    }
  }

  return HAL_GetTick() - start;
 8002f48:	f000 fc7c 	bl	8003844 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	1ad3      	subs	r3, r2, r3
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3720      	adds	r7, #32
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <testTriangles>:

unsigned long testTriangles()
{
 8002f5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f5e:	b08a      	sub	sp, #40	; 0x28
 8002f60:	af04      	add	r7, sp, #16
  unsigned long start;
  int n, i, cx = lcdGetWidth() / 2 - 1,
 8002f62:	f7ff f839 	bl	8001fd8 <lcdGetWidth>
 8002f66:	4603      	mov	r3, r0
 8002f68:	085b      	lsrs	r3, r3, #1
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	613b      	str	r3, [r7, #16]
            cy = lcdGetHeight() / 2 - 1;
 8002f70:	f7ff f83e 	bl	8001ff0 <lcdGetHeight>
 8002f74:	4603      	mov	r3, r0
 8002f76:	085b      	lsrs	r3, r3, #1
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	60fb      	str	r3, [r7, #12]

  lcdFillRGB(COLOR_BLACK);
 8002f7e:	2000      	movs	r0, #0
 8002f80:	f7fd fe72 	bl	8000c68 <lcdFillRGB>
  n = min(cx, cy);
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	bfa8      	it	ge
 8002f8c:	4613      	movge	r3, r2
 8002f8e:	60bb      	str	r3, [r7, #8]
  start = HAL_GetTick();
 8002f90:	f000 fc58 	bl	8003844 <HAL_GetTick>
 8002f94:	6078      	str	r0, [r7, #4]
  for(i = 0; i < n; i += 5)
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]
 8002f9a:	e03d      	b.n	8003018 <testTriangles+0xbe>
  {
    lcdDrawTriangle(
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	b21e      	sxth	r6, r3
      cx    , cy - i, // peak
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	b29b      	uxth	r3, r3
    lcdDrawTriangle(
 8002fac:	fa0f f883 	sxth.w	r8, r3
      cx - i, cy + i, // bottom left
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	b29b      	uxth	r3, r3
    lcdDrawTriangle(
 8002fbc:	fa0f f983 	sxth.w	r9, r3
      cx - i, cy + i, // bottom left
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	4413      	add	r3, r2
 8002fca:	b29b      	uxth	r3, r3
    lcdDrawTriangle(
 8002fcc:	fa0f fa83 	sxth.w	sl, r3
      cx + i, cy + i, // bottom right
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	4413      	add	r3, r2
 8002fda:	b29b      	uxth	r3, r3
    lcdDrawTriangle(
 8002fdc:	b21c      	sxth	r4, r3
      cx + i, cy + i, // bottom right
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	b29b      	uxth	r3, r3
    lcdDrawTriangle(
 8002fea:	b21d      	sxth	r5, r3
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	b2d1      	uxtb	r1, r2
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	b2d2      	uxtb	r2, r2
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff f81d 	bl	8002038 <lcdColor565>
 8002ffe:	4603      	mov	r3, r0
 8003000:	9302      	str	r3, [sp, #8]
 8003002:	9501      	str	r5, [sp, #4]
 8003004:	9400      	str	r4, [sp, #0]
 8003006:	4653      	mov	r3, sl
 8003008:	464a      	mov	r2, r9
 800300a:	4641      	mov	r1, r8
 800300c:	4630      	mov	r0, r6
 800300e:	f7fe fa3f 	bl	8001490 <lcdDrawTriangle>
  for(i = 0; i < n; i += 5)
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	3305      	adds	r3, #5
 8003016:	617b      	str	r3, [r7, #20]
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	429a      	cmp	r2, r3
 800301e:	dbbd      	blt.n	8002f9c <testTriangles+0x42>
      lcdColor565(i, i, i));
  }

  return HAL_GetTick() - start;
 8003020:	f000 fc10 	bl	8003844 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	1ad3      	subs	r3, r2, r3
}
 800302a:	4618      	mov	r0, r3
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003034 <testFilledTriangles>:

unsigned long testFilledTriangles()
{
 8003034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003038:	b08a      	sub	sp, #40	; 0x28
 800303a:	af04      	add	r7, sp, #16
  unsigned long start, t = 0;
 800303c:	2300      	movs	r3, #0
 800303e:	617b      	str	r3, [r7, #20]
  int i, cx = lcdGetWidth() / 2 - 1,
 8003040:	f7fe ffca 	bl	8001fd8 <lcdGetWidth>
 8003044:	4603      	mov	r3, r0
 8003046:	085b      	lsrs	r3, r3, #1
 8003048:	b29b      	uxth	r3, r3
 800304a:	3b01      	subs	r3, #1
 800304c:	60fb      	str	r3, [r7, #12]
         cy = lcdGetHeight() / 2 - 1;
 800304e:	f7fe ffcf 	bl	8001ff0 <lcdGetHeight>
 8003052:	4603      	mov	r3, r0
 8003054:	085b      	lsrs	r3, r3, #1
 8003056:	b29b      	uxth	r3, r3
 8003058:	3b01      	subs	r3, #1
 800305a:	60bb      	str	r3, [r7, #8]

  lcdFillRGB(COLOR_BLACK);
 800305c:	2000      	movs	r0, #0
 800305e:	f7fd fe03 	bl	8000c68 <lcdFillRGB>
  for(i = min(cx, cy); i > 10; i -= 5)
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4293      	cmp	r3, r2
 8003068:	bfa8      	it	ge
 800306a:	4613      	movge	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
 800306e:	e095      	b.n	800319c <testFilledTriangles+0x168>
  {
    start = HAL_GetTick();
 8003070:	f000 fbe8 	bl	8003844 <HAL_GetTick>
 8003074:	6078      	str	r0, [r7, #4]
    lcdFillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, lcdColor565(0, i*10, i*10));
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	b21e      	sxth	r6, r3
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	b29a      	uxth	r2, r3
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	b29b      	uxth	r3, r3
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	b29b      	uxth	r3, r3
 8003086:	fa0f f883 	sxth.w	r8, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	b29a      	uxth	r2, r3
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	b29b      	uxth	r3, r3
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	b29b      	uxth	r3, r3
 8003096:	fa0f f983 	sxth.w	r9, r3
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	b29a      	uxth	r2, r3
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	4413      	add	r3, r2
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	fa0f fa83 	sxth.w	sl, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	4413      	add	r3, r2
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	b21c      	sxth	r4, r3
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	b29b      	uxth	r3, r3
 80030c0:	4413      	add	r3, r2
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	b21d      	sxth	r5, r3
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	0092      	lsls	r2, r2, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	b2d9      	uxtb	r1, r3
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	461a      	mov	r2, r3
 80030da:	0092      	lsls	r2, r2, #2
 80030dc:	4413      	add	r3, r2
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	461a      	mov	r2, r3
 80030e4:	2000      	movs	r0, #0
 80030e6:	f7fe ffa7 	bl	8002038 <lcdColor565>
 80030ea:	4603      	mov	r3, r0
 80030ec:	9302      	str	r3, [sp, #8]
 80030ee:	9501      	str	r5, [sp, #4]
 80030f0:	9400      	str	r4, [sp, #0]
 80030f2:	4653      	mov	r3, sl
 80030f4:	464a      	mov	r2, r9
 80030f6:	4641      	mov	r1, r8
 80030f8:	4630      	mov	r0, r6
 80030fa:	f7fe fb9c 	bl	8001836 <lcdFillTriangle>
    t += HAL_GetTick() - start;
 80030fe:	f000 fba1 	bl	8003844 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	4413      	add	r3, r2
 800310c:	617b      	str	r3, [r7, #20]
    lcdFillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i, lcdColor565(i*10, i*10, 0));
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	b21e      	sxth	r6, r3
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	b29a      	uxth	r2, r3
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	b29b      	uxth	r3, r3
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	b29b      	uxth	r3, r3
 800311e:	fa0f f883 	sxth.w	r8, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	b29a      	uxth	r2, r3
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	b29b      	uxth	r3, r3
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	b29b      	uxth	r3, r3
 800312e:	fa0f f983 	sxth.w	r9, r3
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	b29a      	uxth	r2, r3
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	b29b      	uxth	r3, r3
 800313a:	4413      	add	r3, r2
 800313c:	b29b      	uxth	r3, r3
 800313e:	fa0f fa83 	sxth.w	sl, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	b29a      	uxth	r2, r3
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	b29b      	uxth	r3, r3
 800314a:	4413      	add	r3, r2
 800314c:	b29b      	uxth	r3, r3
 800314e:	b21c      	sxth	r4, r3
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	b29a      	uxth	r2, r3
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	b29b      	uxth	r3, r3
 8003158:	4413      	add	r3, r2
 800315a:	b29b      	uxth	r3, r3
 800315c:	b21d      	sxth	r5, r3
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	b2db      	uxtb	r3, r3
 8003162:	461a      	mov	r2, r3
 8003164:	0092      	lsls	r2, r2, #2
 8003166:	4413      	add	r3, r2
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	b2d8      	uxtb	r0, r3
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	b2db      	uxtb	r3, r3
 8003170:	461a      	mov	r2, r3
 8003172:	0092      	lsls	r2, r2, #2
 8003174:	4413      	add	r3, r2
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2200      	movs	r2, #0
 800317c:	4619      	mov	r1, r3
 800317e:	f7fe ff5b 	bl	8002038 <lcdColor565>
 8003182:	4603      	mov	r3, r0
 8003184:	9302      	str	r3, [sp, #8]
 8003186:	9501      	str	r5, [sp, #4]
 8003188:	9400      	str	r4, [sp, #0]
 800318a:	4653      	mov	r3, sl
 800318c:	464a      	mov	r2, r9
 800318e:	4641      	mov	r1, r8
 8003190:	4630      	mov	r0, r6
 8003192:	f7fe fb50 	bl	8001836 <lcdFillTriangle>
  for(i = min(cx, cy); i > 10; i -= 5)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	3b05      	subs	r3, #5
 800319a:	613b      	str	r3, [r7, #16]
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	2b0a      	cmp	r3, #10
 80031a0:	f73f af66 	bgt.w	8003070 <testFilledTriangles+0x3c>
  }

  return t;
 80031a4:	697b      	ldr	r3, [r7, #20]
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080031b0 <testRoundRects>:

unsigned long testRoundRects()
{
 80031b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031b4:	b089      	sub	sp, #36	; 0x24
 80031b6:	af02      	add	r7, sp, #8
  unsigned long start;
  int w, i, i2,
      cx = lcdGetWidth() / 2 - 1,
 80031b8:	f7fe ff0e 	bl	8001fd8 <lcdGetWidth>
 80031bc:	4603      	mov	r3, r0
 80031be:	085b      	lsrs	r3, r3, #1
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	3b01      	subs	r3, #1
 80031c4:	613b      	str	r3, [r7, #16]
      cy = lcdGetHeight() / 2 - 1;
 80031c6:	f7fe ff13 	bl	8001ff0 <lcdGetHeight>
 80031ca:	4603      	mov	r3, r0
 80031cc:	085b      	lsrs	r3, r3, #1
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	3b01      	subs	r3, #1
 80031d2:	60fb      	str	r3, [r7, #12]

  lcdFillRGB(COLOR_BLACK);
 80031d4:	2000      	movs	r0, #0
 80031d6:	f7fd fd47 	bl	8000c68 <lcdFillRGB>
  w = lcdGetWidth(), lcdGetHeight();
 80031da:	f7fe fefd 	bl	8001fd8 <lcdGetWidth>
 80031de:	4603      	mov	r3, r0
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	f7fe ff05 	bl	8001ff0 <lcdGetHeight>
  start = HAL_GetTick();
 80031e6:	f000 fb2d 	bl	8003844 <HAL_GetTick>
 80031ea:	6078      	str	r0, [r7, #4]
  for(i = 0; i < w; i += 6)
 80031ec:	2300      	movs	r3, #0
 80031ee:	617b      	str	r3, [r7, #20]
 80031f0:	e031      	b.n	8003256 <testRoundRects+0xa6>
  {
    i2 = i / 2;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	0fda      	lsrs	r2, r3, #31
 80031f6:	4413      	add	r3, r2
 80031f8:	105b      	asrs	r3, r3, #1
 80031fa:	603b      	str	r3, [r7, #0]
    lcdDrawRoundRect(cx-i2, cy-i2, i, i, i/8, lcdColor565(i, 0, 0));
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	b29a      	uxth	r2, r3
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	b29b      	uxth	r3, r3
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	b29b      	uxth	r3, r3
 8003208:	b21d      	sxth	r5, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	b29a      	uxth	r2, r3
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	b29b      	uxth	r3, r3
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	b29b      	uxth	r3, r3
 8003216:	b21e      	sxth	r6, r3
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	fa0f f883 	sxth.w	r8, r3
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	fa0f f983 	sxth.w	r9, r3
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	2b00      	cmp	r3, #0
 8003228:	da00      	bge.n	800322c <testRoundRects+0x7c>
 800322a:	3307      	adds	r3, #7
 800322c:	10db      	asrs	r3, r3, #3
 800322e:	b21c      	sxth	r4, r3
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2200      	movs	r2, #0
 8003236:	2100      	movs	r1, #0
 8003238:	4618      	mov	r0, r3
 800323a:	f7fe fefd 	bl	8002038 <lcdColor565>
 800323e:	4603      	mov	r3, r0
 8003240:	9301      	str	r3, [sp, #4]
 8003242:	9400      	str	r4, [sp, #0]
 8003244:	464b      	mov	r3, r9
 8003246:	4642      	mov	r2, r8
 8003248:	4631      	mov	r1, r6
 800324a:	4628      	mov	r0, r5
 800324c:	f7fd fed7 	bl	8000ffe <lcdDrawRoundRect>
  for(i = 0; i < w; i += 6)
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	3306      	adds	r3, #6
 8003254:	617b      	str	r3, [r7, #20]
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	429a      	cmp	r2, r3
 800325c:	dbc9      	blt.n	80031f2 <testRoundRects+0x42>
  }

  return HAL_GetTick() - start;
 800325e:	f000 faf1 	bl	8003844 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	1ad3      	subs	r3, r2, r3
}
 8003268:	4618      	mov	r0, r3
 800326a:	371c      	adds	r7, #28
 800326c:	46bd      	mov	sp, r7
 800326e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003272 <testFilledRoundRects>:

unsigned long testFilledRoundRects()
{
 8003272:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003276:	b089      	sub	sp, #36	; 0x24
 8003278:	af02      	add	r7, sp, #8
  unsigned long start;
  int i, i2,
      cx = lcdGetWidth()  / 2 - 1,
 800327a:	f7fe fead 	bl	8001fd8 <lcdGetWidth>
 800327e:	4603      	mov	r3, r0
 8003280:	085b      	lsrs	r3, r3, #1
 8003282:	b29b      	uxth	r3, r3
 8003284:	3b01      	subs	r3, #1
 8003286:	613b      	str	r3, [r7, #16]
      cy = lcdGetHeight() / 2 - 1;
 8003288:	f7fe feb2 	bl	8001ff0 <lcdGetHeight>
 800328c:	4603      	mov	r3, r0
 800328e:	085b      	lsrs	r3, r3, #1
 8003290:	b29b      	uxth	r3, r3
 8003292:	3b01      	subs	r3, #1
 8003294:	60fb      	str	r3, [r7, #12]

  lcdFillRGB(COLOR_BLACK);
 8003296:	2000      	movs	r0, #0
 8003298:	f7fd fce6 	bl	8000c68 <lcdFillRGB>
  start = HAL_GetTick();
 800329c:	f000 fad2 	bl	8003844 <HAL_GetTick>
 80032a0:	60b8      	str	r0, [r7, #8]
  for(i = min(lcdGetWidth(), lcdGetHeight()); i > 20; i -=6 )
 80032a2:	f7fe fe99 	bl	8001fd8 <lcdGetWidth>
 80032a6:	4603      	mov	r3, r0
 80032a8:	461c      	mov	r4, r3
 80032aa:	f7fe fea1 	bl	8001ff0 <lcdGetHeight>
 80032ae:	4603      	mov	r3, r0
 80032b0:	429c      	cmp	r4, r3
 80032b2:	d203      	bcs.n	80032bc <testFilledRoundRects+0x4a>
 80032b4:	f7fe fe90 	bl	8001fd8 <lcdGetWidth>
 80032b8:	4603      	mov	r3, r0
 80032ba:	e002      	b.n	80032c2 <testFilledRoundRects+0x50>
 80032bc:	f7fe fe98 	bl	8001ff0 <lcdGetHeight>
 80032c0:	4603      	mov	r3, r0
 80032c2:	617b      	str	r3, [r7, #20]
 80032c4:	e031      	b.n	800332a <testFilledRoundRects+0xb8>
  {
    i2 = i / 2;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	0fda      	lsrs	r2, r3, #31
 80032ca:	4413      	add	r3, r2
 80032cc:	105b      	asrs	r3, r3, #1
 80032ce:	607b      	str	r3, [r7, #4]
    lcdFillRoundRect(cx - i2, cy - i2, i, i, i / 8, lcdColor565(0, i, 0));
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	b29b      	uxth	r3, r3
 80032dc:	b21d      	sxth	r5, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	b21e      	sxth	r6, r3
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	fa0f f883 	sxth.w	r8, r3
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	fa0f f983 	sxth.w	r9, r3
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	da00      	bge.n	8003300 <testFilledRoundRects+0x8e>
 80032fe:	3307      	adds	r3, #7
 8003300:	10db      	asrs	r3, r3, #3
 8003302:	b21c      	sxth	r4, r3
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2200      	movs	r2, #0
 800330a:	4619      	mov	r1, r3
 800330c:	2000      	movs	r0, #0
 800330e:	f7fe fe93 	bl	8002038 <lcdColor565>
 8003312:	4603      	mov	r3, r0
 8003314:	9301      	str	r3, [sp, #4]
 8003316:	9400      	str	r4, [sp, #0]
 8003318:	464b      	mov	r3, r9
 800331a:	4642      	mov	r2, r8
 800331c:	4631      	mov	r1, r6
 800331e:	4628      	mov	r0, r5
 8003320:	f7fe fa24 	bl	800176c <lcdFillRoundRect>
  for(i = min(lcdGetWidth(), lcdGetHeight()); i > 20; i -=6 )
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	3b06      	subs	r3, #6
 8003328:	617b      	str	r3, [r7, #20]
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2b14      	cmp	r3, #20
 800332e:	dcca      	bgt.n	80032c6 <testFilledRoundRects+0x54>
  }

  return HAL_GetTick() - start;
 8003330:	f000 fa88 	bl	8003844 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	1ad3      	subs	r3, r2, r3
}
 800333a:	4618      	mov	r0, r3
 800333c:	371c      	adds	r7, #28
 800333e:	46bd      	mov	sp, r7
 8003340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003344 <testDrawImage>:

unsigned long testDrawImage()
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
	unsigned long start;

	lcdFillRGB(COLOR_BLACK);
 800334a:	2000      	movs	r0, #0
 800334c:	f7fd fc8c 	bl	8000c68 <lcdFillRGB>
	start = HAL_GetTick();
 8003350:	f000 fa78 	bl	8003844 <HAL_GetTick>
 8003354:	6078      	str	r0, [r7, #4]
	if (lcdGetOrientation() == LCD_ORIENTATION_LANDSCAPE || lcdGetOrientation() == LCD_ORIENTATION_LANDSCAPE_MIRROR)
 8003356:	f7fe fe57 	bl	8002008 <lcdGetOrientation>
 800335a:	4603      	mov	r3, r0
 800335c:	2b01      	cmp	r3, #1
 800335e:	d004      	beq.n	800336a <testDrawImage+0x26>
 8003360:	f7fe fe52 	bl	8002008 <lcdGetOrientation>
 8003364:	4603      	mov	r3, r0
 8003366:	2b03      	cmp	r3, #3
 8003368:	d110      	bne.n	800338c <testDrawImage+0x48>
	{
		lcdDrawImage((lcdGetWidth() - bmSTLogo.xSize) / 2, 0, &bmSTLogo);
 800336a:	f7fe fe35 	bl	8001fd8 <lcdGetWidth>
 800336e:	4603      	mov	r3, r0
 8003370:	461a      	mov	r2, r3
 8003372:	4b13      	ldr	r3, [pc, #76]	; (80033c0 <testDrawImage+0x7c>)
 8003374:	881b      	ldrh	r3, [r3, #0]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	0fda      	lsrs	r2, r3, #31
 800337a:	4413      	add	r3, r2
 800337c:	105b      	asrs	r3, r3, #1
 800337e:	b29b      	uxth	r3, r3
 8003380:	4a0f      	ldr	r2, [pc, #60]	; (80033c0 <testDrawImage+0x7c>)
 8003382:	2100      	movs	r1, #0
 8003384:	4618      	mov	r0, r3
 8003386:	f7fe fba3 	bl	8001ad0 <lcdDrawImage>
 800338a:	e00f      	b.n	80033ac <testDrawImage+0x68>
	}
	else
	{
		lcdDrawImage(0, (lcdGetHeight() - bmSTLogo.ySize) / 2, &bmSTLogo);
 800338c:	f7fe fe30 	bl	8001ff0 <lcdGetHeight>
 8003390:	4603      	mov	r3, r0
 8003392:	461a      	mov	r2, r3
 8003394:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <testDrawImage+0x7c>)
 8003396:	885b      	ldrh	r3, [r3, #2]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	0fda      	lsrs	r2, r3, #31
 800339c:	4413      	add	r3, r2
 800339e:	105b      	asrs	r3, r3, #1
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	4a07      	ldr	r2, [pc, #28]	; (80033c0 <testDrawImage+0x7c>)
 80033a4:	4619      	mov	r1, r3
 80033a6:	2000      	movs	r0, #0
 80033a8:	f7fe fb92 	bl	8001ad0 <lcdDrawImage>
	}
	return HAL_GetTick() - start;
 80033ac:	f000 fa4a 	bl	8003844 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	1ad3      	subs	r3, r2, r3
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	08021c64 	.word	0x08021c64

080033c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033c8:	b672      	cpsid	i
}
 80033ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033cc:	e7fe      	b.n	80033cc <Error_Handler+0x8>
	...

080033d0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80033d4:	4b17      	ldr	r3, [pc, #92]	; (8003434 <MX_SPI2_Init+0x64>)
 80033d6:	4a18      	ldr	r2, [pc, #96]	; (8003438 <MX_SPI2_Init+0x68>)
 80033d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80033da:	4b16      	ldr	r3, [pc, #88]	; (8003434 <MX_SPI2_Init+0x64>)
 80033dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80033e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80033e2:	4b14      	ldr	r3, [pc, #80]	; (8003434 <MX_SPI2_Init+0x64>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80033e8:	4b12      	ldr	r3, [pc, #72]	; (8003434 <MX_SPI2_Init+0x64>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80033ee:	4b11      	ldr	r3, [pc, #68]	; (8003434 <MX_SPI2_Init+0x64>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80033f4:	4b0f      	ldr	r3, [pc, #60]	; (8003434 <MX_SPI2_Init+0x64>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80033fa:	4b0e      	ldr	r3, [pc, #56]	; (8003434 <MX_SPI2_Init+0x64>)
 80033fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003400:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003402:	4b0c      	ldr	r3, [pc, #48]	; (8003434 <MX_SPI2_Init+0x64>)
 8003404:	2210      	movs	r2, #16
 8003406:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003408:	4b0a      	ldr	r3, [pc, #40]	; (8003434 <MX_SPI2_Init+0x64>)
 800340a:	2200      	movs	r2, #0
 800340c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800340e:	4b09      	ldr	r3, [pc, #36]	; (8003434 <MX_SPI2_Init+0x64>)
 8003410:	2200      	movs	r2, #0
 8003412:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003414:	4b07      	ldr	r3, [pc, #28]	; (8003434 <MX_SPI2_Init+0x64>)
 8003416:	2200      	movs	r2, #0
 8003418:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800341a:	4b06      	ldr	r3, [pc, #24]	; (8003434 <MX_SPI2_Init+0x64>)
 800341c:	220a      	movs	r2, #10
 800341e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003420:	4804      	ldr	r0, [pc, #16]	; (8003434 <MX_SPI2_Init+0x64>)
 8003422:	f001 f973 	bl	800470c <HAL_SPI_Init>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800342c:	f7ff ffca 	bl	80033c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003430:	bf00      	nop
 8003432:	bd80      	pop	{r7, pc}
 8003434:	20000228 	.word	0x20000228
 8003438:	40003800 	.word	0x40003800

0800343c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b08a      	sub	sp, #40	; 0x28
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003444:	f107 0314 	add.w	r3, r7, #20
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	605a      	str	r2, [r3, #4]
 800344e:	609a      	str	r2, [r3, #8]
 8003450:	60da      	str	r2, [r3, #12]
 8003452:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a28      	ldr	r2, [pc, #160]	; (80034fc <HAL_SPI_MspInit+0xc0>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d14a      	bne.n	80034f4 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800345e:	2300      	movs	r3, #0
 8003460:	613b      	str	r3, [r7, #16]
 8003462:	4b27      	ldr	r3, [pc, #156]	; (8003500 <HAL_SPI_MspInit+0xc4>)
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	4a26      	ldr	r2, [pc, #152]	; (8003500 <HAL_SPI_MspInit+0xc4>)
 8003468:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800346c:	6413      	str	r3, [r2, #64]	; 0x40
 800346e:	4b24      	ldr	r3, [pc, #144]	; (8003500 <HAL_SPI_MspInit+0xc4>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003476:	613b      	str	r3, [r7, #16]
 8003478:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800347a:	2300      	movs	r3, #0
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	4b20      	ldr	r3, [pc, #128]	; (8003500 <HAL_SPI_MspInit+0xc4>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	4a1f      	ldr	r2, [pc, #124]	; (8003500 <HAL_SPI_MspInit+0xc4>)
 8003484:	f043 0304 	orr.w	r3, r3, #4
 8003488:	6313      	str	r3, [r2, #48]	; 0x30
 800348a:	4b1d      	ldr	r3, [pc, #116]	; (8003500 <HAL_SPI_MspInit+0xc4>)
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	f003 0304 	and.w	r3, r3, #4
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003496:	2300      	movs	r3, #0
 8003498:	60bb      	str	r3, [r7, #8]
 800349a:	4b19      	ldr	r3, [pc, #100]	; (8003500 <HAL_SPI_MspInit+0xc4>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	4a18      	ldr	r2, [pc, #96]	; (8003500 <HAL_SPI_MspInit+0xc4>)
 80034a0:	f043 0302 	orr.w	r3, r3, #2
 80034a4:	6313      	str	r3, [r2, #48]	; 0x30
 80034a6:	4b16      	ldr	r3, [pc, #88]	; (8003500 <HAL_SPI_MspInit+0xc4>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	60bb      	str	r3, [r7, #8]
 80034b0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80034b2:	230c      	movs	r3, #12
 80034b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b6:	2302      	movs	r3, #2
 80034b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ba:	2300      	movs	r3, #0
 80034bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034be:	2303      	movs	r3, #3
 80034c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034c2:	2305      	movs	r3, #5
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034c6:	f107 0314 	add.w	r3, r7, #20
 80034ca:	4619      	mov	r1, r3
 80034cc:	480d      	ldr	r0, [pc, #52]	; (8003504 <HAL_SPI_MspInit+0xc8>)
 80034ce:	f000 facf 	bl	8003a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d8:	2302      	movs	r3, #2
 80034da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034dc:	2300      	movs	r3, #0
 80034de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034e0:	2303      	movs	r3, #3
 80034e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034e4:	2305      	movs	r3, #5
 80034e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034e8:	f107 0314 	add.w	r3, r7, #20
 80034ec:	4619      	mov	r1, r3
 80034ee:	4806      	ldr	r0, [pc, #24]	; (8003508 <HAL_SPI_MspInit+0xcc>)
 80034f0:	f000 fabe 	bl	8003a70 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80034f4:	bf00      	nop
 80034f6:	3728      	adds	r7, #40	; 0x28
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40003800 	.word	0x40003800
 8003500:	40023800 	.word	0x40023800
 8003504:	40020800 	.word	0x40020800
 8003508:	40020400 	.word	0x40020400

0800350c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	607b      	str	r3, [r7, #4]
 8003516:	4b10      	ldr	r3, [pc, #64]	; (8003558 <HAL_MspInit+0x4c>)
 8003518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351a:	4a0f      	ldr	r2, [pc, #60]	; (8003558 <HAL_MspInit+0x4c>)
 800351c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003520:	6453      	str	r3, [r2, #68]	; 0x44
 8003522:	4b0d      	ldr	r3, [pc, #52]	; (8003558 <HAL_MspInit+0x4c>)
 8003524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800352a:	607b      	str	r3, [r7, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800352e:	2300      	movs	r3, #0
 8003530:	603b      	str	r3, [r7, #0]
 8003532:	4b09      	ldr	r3, [pc, #36]	; (8003558 <HAL_MspInit+0x4c>)
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	4a08      	ldr	r2, [pc, #32]	; (8003558 <HAL_MspInit+0x4c>)
 8003538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800353c:	6413      	str	r3, [r2, #64]	; 0x40
 800353e:	4b06      	ldr	r3, [pc, #24]	; (8003558 <HAL_MspInit+0x4c>)
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003546:	603b      	str	r3, [r7, #0]
 8003548:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40023800 	.word	0x40023800

0800355c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003560:	e7fe      	b.n	8003560 <NMI_Handler+0x4>

08003562 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003562:	b480      	push	{r7}
 8003564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003566:	e7fe      	b.n	8003566 <HardFault_Handler+0x4>

08003568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800356c:	e7fe      	b.n	800356c <MemManage_Handler+0x4>

0800356e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800356e:	b480      	push	{r7}
 8003570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003572:	e7fe      	b.n	8003572 <BusFault_Handler+0x4>

08003574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003578:	e7fe      	b.n	8003578 <UsageFault_Handler+0x4>

0800357a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800357a:	b480      	push	{r7}
 800357c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800357e:	bf00      	nop
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800358c:	bf00      	nop
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003596:	b480      	push	{r7}
 8003598:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800359a:	bf00      	nop
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035a8:	f000 f938 	bl	800381c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035ac:	bf00      	nop
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035b8:	4a14      	ldr	r2, [pc, #80]	; (800360c <_sbrk+0x5c>)
 80035ba:	4b15      	ldr	r3, [pc, #84]	; (8003610 <_sbrk+0x60>)
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035c4:	4b13      	ldr	r3, [pc, #76]	; (8003614 <_sbrk+0x64>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d102      	bne.n	80035d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035cc:	4b11      	ldr	r3, [pc, #68]	; (8003614 <_sbrk+0x64>)
 80035ce:	4a12      	ldr	r2, [pc, #72]	; (8003618 <_sbrk+0x68>)
 80035d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035d2:	4b10      	ldr	r3, [pc, #64]	; (8003614 <_sbrk+0x64>)
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4413      	add	r3, r2
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d207      	bcs.n	80035f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035e0:	f001 fcfe 	bl	8004fe0 <__errno>
 80035e4:	4603      	mov	r3, r0
 80035e6:	220c      	movs	r2, #12
 80035e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035ea:	f04f 33ff 	mov.w	r3, #4294967295
 80035ee:	e009      	b.n	8003604 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035f0:	4b08      	ldr	r3, [pc, #32]	; (8003614 <_sbrk+0x64>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035f6:	4b07      	ldr	r3, [pc, #28]	; (8003614 <_sbrk+0x64>)
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4413      	add	r3, r2
 80035fe:	4a05      	ldr	r2, [pc, #20]	; (8003614 <_sbrk+0x64>)
 8003600:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003602:	68fb      	ldr	r3, [r7, #12]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	20020000 	.word	0x20020000
 8003610:	00000400 	.word	0x00000400
 8003614:	20000280 	.word	0x20000280
 8003618:	200002e0 	.word	0x200002e0

0800361c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003620:	4b06      	ldr	r3, [pc, #24]	; (800363c <SystemInit+0x20>)
 8003622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003626:	4a05      	ldr	r2, [pc, #20]	; (800363c <SystemInit+0x20>)
 8003628:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800362c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003630:	bf00      	nop
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	e000ed00 	.word	0xe000ed00

08003640 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003644:	4b11      	ldr	r3, [pc, #68]	; (800368c <MX_USART1_UART_Init+0x4c>)
 8003646:	4a12      	ldr	r2, [pc, #72]	; (8003690 <MX_USART1_UART_Init+0x50>)
 8003648:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800364a:	4b10      	ldr	r3, [pc, #64]	; (800368c <MX_USART1_UART_Init+0x4c>)
 800364c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003650:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003652:	4b0e      	ldr	r3, [pc, #56]	; (800368c <MX_USART1_UART_Init+0x4c>)
 8003654:	2200      	movs	r2, #0
 8003656:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003658:	4b0c      	ldr	r3, [pc, #48]	; (800368c <MX_USART1_UART_Init+0x4c>)
 800365a:	2200      	movs	r2, #0
 800365c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800365e:	4b0b      	ldr	r3, [pc, #44]	; (800368c <MX_USART1_UART_Init+0x4c>)
 8003660:	2200      	movs	r2, #0
 8003662:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003664:	4b09      	ldr	r3, [pc, #36]	; (800368c <MX_USART1_UART_Init+0x4c>)
 8003666:	220c      	movs	r2, #12
 8003668:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800366a:	4b08      	ldr	r3, [pc, #32]	; (800368c <MX_USART1_UART_Init+0x4c>)
 800366c:	2200      	movs	r2, #0
 800366e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003670:	4b06      	ldr	r3, [pc, #24]	; (800368c <MX_USART1_UART_Init+0x4c>)
 8003672:	2200      	movs	r2, #0
 8003674:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003676:	4805      	ldr	r0, [pc, #20]	; (800368c <MX_USART1_UART_Init+0x4c>)
 8003678:	f001 f919 	bl	80048ae <HAL_UART_Init>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003682:	f7ff fe9f 	bl	80033c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003686:	bf00      	nop
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	20000284 	.word	0x20000284
 8003690:	40011000 	.word	0x40011000

08003694 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b08a      	sub	sp, #40	; 0x28
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800369c:	f107 0314 	add.w	r3, r7, #20
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	605a      	str	r2, [r3, #4]
 80036a6:	609a      	str	r2, [r3, #8]
 80036a8:	60da      	str	r2, [r3, #12]
 80036aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a19      	ldr	r2, [pc, #100]	; (8003718 <HAL_UART_MspInit+0x84>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d12c      	bne.n	8003710 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80036b6:	2300      	movs	r3, #0
 80036b8:	613b      	str	r3, [r7, #16]
 80036ba:	4b18      	ldr	r3, [pc, #96]	; (800371c <HAL_UART_MspInit+0x88>)
 80036bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036be:	4a17      	ldr	r2, [pc, #92]	; (800371c <HAL_UART_MspInit+0x88>)
 80036c0:	f043 0310 	orr.w	r3, r3, #16
 80036c4:	6453      	str	r3, [r2, #68]	; 0x44
 80036c6:	4b15      	ldr	r3, [pc, #84]	; (800371c <HAL_UART_MspInit+0x88>)
 80036c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ca:	f003 0310 	and.w	r3, r3, #16
 80036ce:	613b      	str	r3, [r7, #16]
 80036d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036d2:	2300      	movs	r3, #0
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	4b11      	ldr	r3, [pc, #68]	; (800371c <HAL_UART_MspInit+0x88>)
 80036d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036da:	4a10      	ldr	r2, [pc, #64]	; (800371c <HAL_UART_MspInit+0x88>)
 80036dc:	f043 0301 	orr.w	r3, r3, #1
 80036e0:	6313      	str	r3, [r2, #48]	; 0x30
 80036e2:	4b0e      	ldr	r3, [pc, #56]	; (800371c <HAL_UART_MspInit+0x88>)
 80036e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	60fb      	str	r3, [r7, #12]
 80036ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80036ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80036f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f4:	2302      	movs	r3, #2
 80036f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f8:	2300      	movs	r3, #0
 80036fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036fc:	2303      	movs	r3, #3
 80036fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003700:	2307      	movs	r3, #7
 8003702:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003704:	f107 0314 	add.w	r3, r7, #20
 8003708:	4619      	mov	r1, r3
 800370a:	4805      	ldr	r0, [pc, #20]	; (8003720 <HAL_UART_MspInit+0x8c>)
 800370c:	f000 f9b0 	bl	8003a70 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003710:	bf00      	nop
 8003712:	3728      	adds	r7, #40	; 0x28
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40011000 	.word	0x40011000
 800371c:	40023800 	.word	0x40023800
 8003720:	40020000 	.word	0x40020000

08003724 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003724:	f8df d034 	ldr.w	sp, [pc, #52]	; 800375c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003728:	480d      	ldr	r0, [pc, #52]	; (8003760 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800372a:	490e      	ldr	r1, [pc, #56]	; (8003764 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800372c:	4a0e      	ldr	r2, [pc, #56]	; (8003768 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800372e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003730:	e002      	b.n	8003738 <LoopCopyDataInit>

08003732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003736:	3304      	adds	r3, #4

08003738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800373a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800373c:	d3f9      	bcc.n	8003732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800373e:	4a0b      	ldr	r2, [pc, #44]	; (800376c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003740:	4c0b      	ldr	r4, [pc, #44]	; (8003770 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003744:	e001      	b.n	800374a <LoopFillZerobss>

08003746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003748:	3204      	adds	r2, #4

0800374a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800374a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800374c:	d3fb      	bcc.n	8003746 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800374e:	f7ff ff65 	bl	800361c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003752:	f001 fc4b 	bl	8004fec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003756:	f7fe fd2d 	bl	80021b4 <main>
  bx  lr    
 800375a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800375c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003764:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8003768:	080259a8 	.word	0x080259a8
  ldr r2, =_sbss
 800376c:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8003770:	200002dc 	.word	0x200002dc

08003774 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003774:	e7fe      	b.n	8003774 <ADC_IRQHandler>
	...

08003778 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800377c:	4b0e      	ldr	r3, [pc, #56]	; (80037b8 <HAL_Init+0x40>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a0d      	ldr	r2, [pc, #52]	; (80037b8 <HAL_Init+0x40>)
 8003782:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003786:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003788:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <HAL_Init+0x40>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a0a      	ldr	r2, [pc, #40]	; (80037b8 <HAL_Init+0x40>)
 800378e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003792:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003794:	4b08      	ldr	r3, [pc, #32]	; (80037b8 <HAL_Init+0x40>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a07      	ldr	r2, [pc, #28]	; (80037b8 <HAL_Init+0x40>)
 800379a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800379e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037a0:	2003      	movs	r0, #3
 80037a2:	f000 f931 	bl	8003a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037a6:	200f      	movs	r0, #15
 80037a8:	f000 f808 	bl	80037bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037ac:	f7ff feae 	bl	800350c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40023c00 	.word	0x40023c00

080037bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037c4:	4b12      	ldr	r3, [pc, #72]	; (8003810 <HAL_InitTick+0x54>)
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	4b12      	ldr	r3, [pc, #72]	; (8003814 <HAL_InitTick+0x58>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	4619      	mov	r1, r3
 80037ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80037d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 f93b 	bl	8003a56 <HAL_SYSTICK_Config>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e00e      	b.n	8003808 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b0f      	cmp	r3, #15
 80037ee:	d80a      	bhi.n	8003806 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037f0:	2200      	movs	r2, #0
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	f04f 30ff 	mov.w	r0, #4294967295
 80037f8:	f000 f911 	bl	8003a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037fc:	4a06      	ldr	r2, [pc, #24]	; (8003818 <HAL_InitTick+0x5c>)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003802:	2300      	movs	r3, #0
 8003804:	e000      	b.n	8003808 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
}
 8003808:	4618      	mov	r0, r3
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	20000040 	.word	0x20000040
 8003814:	20000048 	.word	0x20000048
 8003818:	20000044 	.word	0x20000044

0800381c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003820:	4b06      	ldr	r3, [pc, #24]	; (800383c <HAL_IncTick+0x20>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	461a      	mov	r2, r3
 8003826:	4b06      	ldr	r3, [pc, #24]	; (8003840 <HAL_IncTick+0x24>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4413      	add	r3, r2
 800382c:	4a04      	ldr	r2, [pc, #16]	; (8003840 <HAL_IncTick+0x24>)
 800382e:	6013      	str	r3, [r2, #0]
}
 8003830:	bf00      	nop
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	20000048 	.word	0x20000048
 8003840:	200002c8 	.word	0x200002c8

08003844 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  return uwTick;
 8003848:	4b03      	ldr	r3, [pc, #12]	; (8003858 <HAL_GetTick+0x14>)
 800384a:	681b      	ldr	r3, [r3, #0]
}
 800384c:	4618      	mov	r0, r3
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	200002c8 	.word	0x200002c8

0800385c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003864:	f7ff ffee 	bl	8003844 <HAL_GetTick>
 8003868:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003874:	d005      	beq.n	8003882 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003876:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <HAL_Delay+0x44>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	461a      	mov	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4413      	add	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003882:	bf00      	nop
 8003884:	f7ff ffde 	bl	8003844 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	429a      	cmp	r2, r3
 8003892:	d8f7      	bhi.n	8003884 <HAL_Delay+0x28>
  {
  }
}
 8003894:	bf00      	nop
 8003896:	bf00      	nop
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20000048 	.word	0x20000048

080038a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038b4:	4b0c      	ldr	r3, [pc, #48]	; (80038e8 <__NVIC_SetPriorityGrouping+0x44>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038c0:	4013      	ands	r3, r2
 80038c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038d6:	4a04      	ldr	r2, [pc, #16]	; (80038e8 <__NVIC_SetPriorityGrouping+0x44>)
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	60d3      	str	r3, [r2, #12]
}
 80038dc:	bf00      	nop
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr
 80038e8:	e000ed00 	.word	0xe000ed00

080038ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038f0:	4b04      	ldr	r3, [pc, #16]	; (8003904 <__NVIC_GetPriorityGrouping+0x18>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	0a1b      	lsrs	r3, r3, #8
 80038f6:	f003 0307 	and.w	r3, r3, #7
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	e000ed00 	.word	0xe000ed00

08003908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	4603      	mov	r3, r0
 8003910:	6039      	str	r1, [r7, #0]
 8003912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003918:	2b00      	cmp	r3, #0
 800391a:	db0a      	blt.n	8003932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	b2da      	uxtb	r2, r3
 8003920:	490c      	ldr	r1, [pc, #48]	; (8003954 <__NVIC_SetPriority+0x4c>)
 8003922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003926:	0112      	lsls	r2, r2, #4
 8003928:	b2d2      	uxtb	r2, r2
 800392a:	440b      	add	r3, r1
 800392c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003930:	e00a      	b.n	8003948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	b2da      	uxtb	r2, r3
 8003936:	4908      	ldr	r1, [pc, #32]	; (8003958 <__NVIC_SetPriority+0x50>)
 8003938:	79fb      	ldrb	r3, [r7, #7]
 800393a:	f003 030f 	and.w	r3, r3, #15
 800393e:	3b04      	subs	r3, #4
 8003940:	0112      	lsls	r2, r2, #4
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	440b      	add	r3, r1
 8003946:	761a      	strb	r2, [r3, #24]
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	e000e100 	.word	0xe000e100
 8003958:	e000ed00 	.word	0xe000ed00

0800395c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800395c:	b480      	push	{r7}
 800395e:	b089      	sub	sp, #36	; 0x24
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f1c3 0307 	rsb	r3, r3, #7
 8003976:	2b04      	cmp	r3, #4
 8003978:	bf28      	it	cs
 800397a:	2304      	movcs	r3, #4
 800397c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	3304      	adds	r3, #4
 8003982:	2b06      	cmp	r3, #6
 8003984:	d902      	bls.n	800398c <NVIC_EncodePriority+0x30>
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	3b03      	subs	r3, #3
 800398a:	e000      	b.n	800398e <NVIC_EncodePriority+0x32>
 800398c:	2300      	movs	r3, #0
 800398e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003990:	f04f 32ff 	mov.w	r2, #4294967295
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	43da      	mvns	r2, r3
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	401a      	ands	r2, r3
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039a4:	f04f 31ff 	mov.w	r1, #4294967295
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	fa01 f303 	lsl.w	r3, r1, r3
 80039ae:	43d9      	mvns	r1, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039b4:	4313      	orrs	r3, r2
         );
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3724      	adds	r7, #36	; 0x24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
	...

080039c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3b01      	subs	r3, #1
 80039d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039d4:	d301      	bcc.n	80039da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039d6:	2301      	movs	r3, #1
 80039d8:	e00f      	b.n	80039fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039da:	4a0a      	ldr	r2, [pc, #40]	; (8003a04 <SysTick_Config+0x40>)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3b01      	subs	r3, #1
 80039e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039e2:	210f      	movs	r1, #15
 80039e4:	f04f 30ff 	mov.w	r0, #4294967295
 80039e8:	f7ff ff8e 	bl	8003908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039ec:	4b05      	ldr	r3, [pc, #20]	; (8003a04 <SysTick_Config+0x40>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039f2:	4b04      	ldr	r3, [pc, #16]	; (8003a04 <SysTick_Config+0x40>)
 80039f4:	2207      	movs	r2, #7
 80039f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	e000e010 	.word	0xe000e010

08003a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7ff ff47 	bl	80038a4 <__NVIC_SetPriorityGrouping>
}
 8003a16:	bf00      	nop
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b086      	sub	sp, #24
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	4603      	mov	r3, r0
 8003a26:	60b9      	str	r1, [r7, #8]
 8003a28:	607a      	str	r2, [r7, #4]
 8003a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a30:	f7ff ff5c 	bl	80038ec <__NVIC_GetPriorityGrouping>
 8003a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	68b9      	ldr	r1, [r7, #8]
 8003a3a:	6978      	ldr	r0, [r7, #20]
 8003a3c:	f7ff ff8e 	bl	800395c <NVIC_EncodePriority>
 8003a40:	4602      	mov	r2, r0
 8003a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a46:	4611      	mov	r1, r2
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7ff ff5d 	bl	8003908 <__NVIC_SetPriority>
}
 8003a4e:	bf00      	nop
 8003a50:	3718      	adds	r7, #24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b082      	sub	sp, #8
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff ffb0 	bl	80039c4 <SysTick_Config>
 8003a64:	4603      	mov	r3, r0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
	...

08003a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b089      	sub	sp, #36	; 0x24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a86:	2300      	movs	r3, #0
 8003a88:	61fb      	str	r3, [r7, #28]
 8003a8a:	e16b      	b.n	8003d64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	f040 815a 	bne.w	8003d5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d005      	beq.n	8003ac2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d130      	bne.n	8003b24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	2203      	movs	r2, #3
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	43db      	mvns	r3, r3
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	68da      	ldr	r2, [r3, #12]
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003af8:	2201      	movs	r2, #1
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	43db      	mvns	r3, r3
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	4013      	ands	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	091b      	lsrs	r3, r3, #4
 8003b0e:	f003 0201 	and.w	r2, r3, #1
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f003 0303 	and.w	r3, r3, #3
 8003b2c:	2b03      	cmp	r3, #3
 8003b2e:	d017      	beq.n	8003b60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	2203      	movs	r2, #3
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	43db      	mvns	r3, r3
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	4013      	ands	r3, r2
 8003b46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f003 0303 	and.w	r3, r3, #3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d123      	bne.n	8003bb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	08da      	lsrs	r2, r3, #3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3208      	adds	r2, #8
 8003b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	f003 0307 	and.w	r3, r3, #7
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	220f      	movs	r2, #15
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	691a      	ldr	r2, [r3, #16]
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	f003 0307 	and.w	r3, r3, #7
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	08da      	lsrs	r2, r3, #3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	3208      	adds	r2, #8
 8003bae:	69b9      	ldr	r1, [r7, #24]
 8003bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	2203      	movs	r2, #3
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f003 0203 	and.w	r2, r3, #3
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 80b4 	beq.w	8003d5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60fb      	str	r3, [r7, #12]
 8003bfa:	4b60      	ldr	r3, [pc, #384]	; (8003d7c <HAL_GPIO_Init+0x30c>)
 8003bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfe:	4a5f      	ldr	r2, [pc, #380]	; (8003d7c <HAL_GPIO_Init+0x30c>)
 8003c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c04:	6453      	str	r3, [r2, #68]	; 0x44
 8003c06:	4b5d      	ldr	r3, [pc, #372]	; (8003d7c <HAL_GPIO_Init+0x30c>)
 8003c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c12:	4a5b      	ldr	r2, [pc, #364]	; (8003d80 <HAL_GPIO_Init+0x310>)
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	089b      	lsrs	r3, r3, #2
 8003c18:	3302      	adds	r3, #2
 8003c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	220f      	movs	r2, #15
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4013      	ands	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a52      	ldr	r2, [pc, #328]	; (8003d84 <HAL_GPIO_Init+0x314>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d02b      	beq.n	8003c96 <HAL_GPIO_Init+0x226>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a51      	ldr	r2, [pc, #324]	; (8003d88 <HAL_GPIO_Init+0x318>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d025      	beq.n	8003c92 <HAL_GPIO_Init+0x222>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a50      	ldr	r2, [pc, #320]	; (8003d8c <HAL_GPIO_Init+0x31c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d01f      	beq.n	8003c8e <HAL_GPIO_Init+0x21e>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a4f      	ldr	r2, [pc, #316]	; (8003d90 <HAL_GPIO_Init+0x320>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d019      	beq.n	8003c8a <HAL_GPIO_Init+0x21a>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a4e      	ldr	r2, [pc, #312]	; (8003d94 <HAL_GPIO_Init+0x324>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d013      	beq.n	8003c86 <HAL_GPIO_Init+0x216>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a4d      	ldr	r2, [pc, #308]	; (8003d98 <HAL_GPIO_Init+0x328>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d00d      	beq.n	8003c82 <HAL_GPIO_Init+0x212>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a4c      	ldr	r2, [pc, #304]	; (8003d9c <HAL_GPIO_Init+0x32c>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d007      	beq.n	8003c7e <HAL_GPIO_Init+0x20e>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a4b      	ldr	r2, [pc, #300]	; (8003da0 <HAL_GPIO_Init+0x330>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d101      	bne.n	8003c7a <HAL_GPIO_Init+0x20a>
 8003c76:	2307      	movs	r3, #7
 8003c78:	e00e      	b.n	8003c98 <HAL_GPIO_Init+0x228>
 8003c7a:	2308      	movs	r3, #8
 8003c7c:	e00c      	b.n	8003c98 <HAL_GPIO_Init+0x228>
 8003c7e:	2306      	movs	r3, #6
 8003c80:	e00a      	b.n	8003c98 <HAL_GPIO_Init+0x228>
 8003c82:	2305      	movs	r3, #5
 8003c84:	e008      	b.n	8003c98 <HAL_GPIO_Init+0x228>
 8003c86:	2304      	movs	r3, #4
 8003c88:	e006      	b.n	8003c98 <HAL_GPIO_Init+0x228>
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e004      	b.n	8003c98 <HAL_GPIO_Init+0x228>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	e002      	b.n	8003c98 <HAL_GPIO_Init+0x228>
 8003c92:	2301      	movs	r3, #1
 8003c94:	e000      	b.n	8003c98 <HAL_GPIO_Init+0x228>
 8003c96:	2300      	movs	r3, #0
 8003c98:	69fa      	ldr	r2, [r7, #28]
 8003c9a:	f002 0203 	and.w	r2, r2, #3
 8003c9e:	0092      	lsls	r2, r2, #2
 8003ca0:	4093      	lsls	r3, r2
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ca8:	4935      	ldr	r1, [pc, #212]	; (8003d80 <HAL_GPIO_Init+0x310>)
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	089b      	lsrs	r3, r3, #2
 8003cae:	3302      	adds	r3, #2
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cb6:	4b3b      	ldr	r3, [pc, #236]	; (8003da4 <HAL_GPIO_Init+0x334>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	43db      	mvns	r3, r3
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cda:	4a32      	ldr	r2, [pc, #200]	; (8003da4 <HAL_GPIO_Init+0x334>)
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ce0:	4b30      	ldr	r3, [pc, #192]	; (8003da4 <HAL_GPIO_Init+0x334>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	43db      	mvns	r3, r3
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	4013      	ands	r3, r2
 8003cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d04:	4a27      	ldr	r2, [pc, #156]	; (8003da4 <HAL_GPIO_Init+0x334>)
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d0a:	4b26      	ldr	r3, [pc, #152]	; (8003da4 <HAL_GPIO_Init+0x334>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	43db      	mvns	r3, r3
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	4013      	ands	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d2e:	4a1d      	ldr	r2, [pc, #116]	; (8003da4 <HAL_GPIO_Init+0x334>)
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d34:	4b1b      	ldr	r3, [pc, #108]	; (8003da4 <HAL_GPIO_Init+0x334>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	43db      	mvns	r3, r3
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	4013      	ands	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d003      	beq.n	8003d58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d58:	4a12      	ldr	r2, [pc, #72]	; (8003da4 <HAL_GPIO_Init+0x334>)
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	3301      	adds	r3, #1
 8003d62:	61fb      	str	r3, [r7, #28]
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	2b0f      	cmp	r3, #15
 8003d68:	f67f ae90 	bls.w	8003a8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d6c:	bf00      	nop
 8003d6e:	bf00      	nop
 8003d70:	3724      	adds	r7, #36	; 0x24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	40013800 	.word	0x40013800
 8003d84:	40020000 	.word	0x40020000
 8003d88:	40020400 	.word	0x40020400
 8003d8c:	40020800 	.word	0x40020800
 8003d90:	40020c00 	.word	0x40020c00
 8003d94:	40021000 	.word	0x40021000
 8003d98:	40021400 	.word	0x40021400
 8003d9c:	40021800 	.word	0x40021800
 8003da0:	40021c00 	.word	0x40021c00
 8003da4:	40013c00 	.word	0x40013c00

08003da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	460b      	mov	r3, r1
 8003db2:	807b      	strh	r3, [r7, #2]
 8003db4:	4613      	mov	r3, r2
 8003db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003db8:	787b      	ldrb	r3, [r7, #1]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dbe:	887a      	ldrh	r2, [r7, #2]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003dc4:	e003      	b.n	8003dce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dc6:	887b      	ldrh	r3, [r7, #2]
 8003dc8:	041a      	lsls	r2, r3, #16
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	619a      	str	r2, [r3, #24]
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
	...

08003ddc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e267      	b.n	80042be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d075      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dfa:	4b88      	ldr	r3, [pc, #544]	; (800401c <HAL_RCC_OscConfig+0x240>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 030c 	and.w	r3, r3, #12
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	d00c      	beq.n	8003e20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e06:	4b85      	ldr	r3, [pc, #532]	; (800401c <HAL_RCC_OscConfig+0x240>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e0e:	2b08      	cmp	r3, #8
 8003e10:	d112      	bne.n	8003e38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e12:	4b82      	ldr	r3, [pc, #520]	; (800401c <HAL_RCC_OscConfig+0x240>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e1e:	d10b      	bne.n	8003e38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e20:	4b7e      	ldr	r3, [pc, #504]	; (800401c <HAL_RCC_OscConfig+0x240>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d05b      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x108>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d157      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e242      	b.n	80042be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e40:	d106      	bne.n	8003e50 <HAL_RCC_OscConfig+0x74>
 8003e42:	4b76      	ldr	r3, [pc, #472]	; (800401c <HAL_RCC_OscConfig+0x240>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a75      	ldr	r2, [pc, #468]	; (800401c <HAL_RCC_OscConfig+0x240>)
 8003e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	e01d      	b.n	8003e8c <HAL_RCC_OscConfig+0xb0>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e58:	d10c      	bne.n	8003e74 <HAL_RCC_OscConfig+0x98>
 8003e5a:	4b70      	ldr	r3, [pc, #448]	; (800401c <HAL_RCC_OscConfig+0x240>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a6f      	ldr	r2, [pc, #444]	; (800401c <HAL_RCC_OscConfig+0x240>)
 8003e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	4b6d      	ldr	r3, [pc, #436]	; (800401c <HAL_RCC_OscConfig+0x240>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a6c      	ldr	r2, [pc, #432]	; (800401c <HAL_RCC_OscConfig+0x240>)
 8003e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e70:	6013      	str	r3, [r2, #0]
 8003e72:	e00b      	b.n	8003e8c <HAL_RCC_OscConfig+0xb0>
 8003e74:	4b69      	ldr	r3, [pc, #420]	; (800401c <HAL_RCC_OscConfig+0x240>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a68      	ldr	r2, [pc, #416]	; (800401c <HAL_RCC_OscConfig+0x240>)
 8003e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e7e:	6013      	str	r3, [r2, #0]
 8003e80:	4b66      	ldr	r3, [pc, #408]	; (800401c <HAL_RCC_OscConfig+0x240>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a65      	ldr	r2, [pc, #404]	; (800401c <HAL_RCC_OscConfig+0x240>)
 8003e86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d013      	beq.n	8003ebc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e94:	f7ff fcd6 	bl	8003844 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e9c:	f7ff fcd2 	bl	8003844 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b64      	cmp	r3, #100	; 0x64
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e207      	b.n	80042be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eae:	4b5b      	ldr	r3, [pc, #364]	; (800401c <HAL_RCC_OscConfig+0x240>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0f0      	beq.n	8003e9c <HAL_RCC_OscConfig+0xc0>
 8003eba:	e014      	b.n	8003ee6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ebc:	f7ff fcc2 	bl	8003844 <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ec4:	f7ff fcbe 	bl	8003844 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b64      	cmp	r3, #100	; 0x64
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e1f3      	b.n	80042be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ed6:	4b51      	ldr	r3, [pc, #324]	; (800401c <HAL_RCC_OscConfig+0x240>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1f0      	bne.n	8003ec4 <HAL_RCC_OscConfig+0xe8>
 8003ee2:	e000      	b.n	8003ee6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d063      	beq.n	8003fba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ef2:	4b4a      	ldr	r3, [pc, #296]	; (800401c <HAL_RCC_OscConfig+0x240>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00b      	beq.n	8003f16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003efe:	4b47      	ldr	r3, [pc, #284]	; (800401c <HAL_RCC_OscConfig+0x240>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f06:	2b08      	cmp	r3, #8
 8003f08:	d11c      	bne.n	8003f44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f0a:	4b44      	ldr	r3, [pc, #272]	; (800401c <HAL_RCC_OscConfig+0x240>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d116      	bne.n	8003f44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f16:	4b41      	ldr	r3, [pc, #260]	; (800401c <HAL_RCC_OscConfig+0x240>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d005      	beq.n	8003f2e <HAL_RCC_OscConfig+0x152>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d001      	beq.n	8003f2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e1c7      	b.n	80042be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f2e:	4b3b      	ldr	r3, [pc, #236]	; (800401c <HAL_RCC_OscConfig+0x240>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	4937      	ldr	r1, [pc, #220]	; (800401c <HAL_RCC_OscConfig+0x240>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f42:	e03a      	b.n	8003fba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d020      	beq.n	8003f8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f4c:	4b34      	ldr	r3, [pc, #208]	; (8004020 <HAL_RCC_OscConfig+0x244>)
 8003f4e:	2201      	movs	r2, #1
 8003f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f52:	f7ff fc77 	bl	8003844 <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f5a:	f7ff fc73 	bl	8003844 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e1a8      	b.n	80042be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f6c:	4b2b      	ldr	r3, [pc, #172]	; (800401c <HAL_RCC_OscConfig+0x240>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0f0      	beq.n	8003f5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f78:	4b28      	ldr	r3, [pc, #160]	; (800401c <HAL_RCC_OscConfig+0x240>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	4925      	ldr	r1, [pc, #148]	; (800401c <HAL_RCC_OscConfig+0x240>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	600b      	str	r3, [r1, #0]
 8003f8c:	e015      	b.n	8003fba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f8e:	4b24      	ldr	r3, [pc, #144]	; (8004020 <HAL_RCC_OscConfig+0x244>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f94:	f7ff fc56 	bl	8003844 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f9c:	f7ff fc52 	bl	8003844 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e187      	b.n	80042be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fae:	4b1b      	ldr	r3, [pc, #108]	; (800401c <HAL_RCC_OscConfig+0x240>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f0      	bne.n	8003f9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0308 	and.w	r3, r3, #8
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d036      	beq.n	8004034 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d016      	beq.n	8003ffc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fce:	4b15      	ldr	r3, [pc, #84]	; (8004024 <HAL_RCC_OscConfig+0x248>)
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd4:	f7ff fc36 	bl	8003844 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fdc:	f7ff fc32 	bl	8003844 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e167      	b.n	80042be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fee:	4b0b      	ldr	r3, [pc, #44]	; (800401c <HAL_RCC_OscConfig+0x240>)
 8003ff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0f0      	beq.n	8003fdc <HAL_RCC_OscConfig+0x200>
 8003ffa:	e01b      	b.n	8004034 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ffc:	4b09      	ldr	r3, [pc, #36]	; (8004024 <HAL_RCC_OscConfig+0x248>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004002:	f7ff fc1f 	bl	8003844 <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004008:	e00e      	b.n	8004028 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800400a:	f7ff fc1b 	bl	8003844 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d907      	bls.n	8004028 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e150      	b.n	80042be <HAL_RCC_OscConfig+0x4e2>
 800401c:	40023800 	.word	0x40023800
 8004020:	42470000 	.word	0x42470000
 8004024:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004028:	4b88      	ldr	r3, [pc, #544]	; (800424c <HAL_RCC_OscConfig+0x470>)
 800402a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1ea      	bne.n	800400a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 8097 	beq.w	8004170 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004042:	2300      	movs	r3, #0
 8004044:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004046:	4b81      	ldr	r3, [pc, #516]	; (800424c <HAL_RCC_OscConfig+0x470>)
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10f      	bne.n	8004072 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004052:	2300      	movs	r3, #0
 8004054:	60bb      	str	r3, [r7, #8]
 8004056:	4b7d      	ldr	r3, [pc, #500]	; (800424c <HAL_RCC_OscConfig+0x470>)
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	4a7c      	ldr	r2, [pc, #496]	; (800424c <HAL_RCC_OscConfig+0x470>)
 800405c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004060:	6413      	str	r3, [r2, #64]	; 0x40
 8004062:	4b7a      	ldr	r3, [pc, #488]	; (800424c <HAL_RCC_OscConfig+0x470>)
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800406a:	60bb      	str	r3, [r7, #8]
 800406c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800406e:	2301      	movs	r3, #1
 8004070:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004072:	4b77      	ldr	r3, [pc, #476]	; (8004250 <HAL_RCC_OscConfig+0x474>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407a:	2b00      	cmp	r3, #0
 800407c:	d118      	bne.n	80040b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800407e:	4b74      	ldr	r3, [pc, #464]	; (8004250 <HAL_RCC_OscConfig+0x474>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a73      	ldr	r2, [pc, #460]	; (8004250 <HAL_RCC_OscConfig+0x474>)
 8004084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004088:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800408a:	f7ff fbdb 	bl	8003844 <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004092:	f7ff fbd7 	bl	8003844 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e10c      	b.n	80042be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a4:	4b6a      	ldr	r3, [pc, #424]	; (8004250 <HAL_RCC_OscConfig+0x474>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0f0      	beq.n	8004092 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d106      	bne.n	80040c6 <HAL_RCC_OscConfig+0x2ea>
 80040b8:	4b64      	ldr	r3, [pc, #400]	; (800424c <HAL_RCC_OscConfig+0x470>)
 80040ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040bc:	4a63      	ldr	r2, [pc, #396]	; (800424c <HAL_RCC_OscConfig+0x470>)
 80040be:	f043 0301 	orr.w	r3, r3, #1
 80040c2:	6713      	str	r3, [r2, #112]	; 0x70
 80040c4:	e01c      	b.n	8004100 <HAL_RCC_OscConfig+0x324>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	2b05      	cmp	r3, #5
 80040cc:	d10c      	bne.n	80040e8 <HAL_RCC_OscConfig+0x30c>
 80040ce:	4b5f      	ldr	r3, [pc, #380]	; (800424c <HAL_RCC_OscConfig+0x470>)
 80040d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d2:	4a5e      	ldr	r2, [pc, #376]	; (800424c <HAL_RCC_OscConfig+0x470>)
 80040d4:	f043 0304 	orr.w	r3, r3, #4
 80040d8:	6713      	str	r3, [r2, #112]	; 0x70
 80040da:	4b5c      	ldr	r3, [pc, #368]	; (800424c <HAL_RCC_OscConfig+0x470>)
 80040dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040de:	4a5b      	ldr	r2, [pc, #364]	; (800424c <HAL_RCC_OscConfig+0x470>)
 80040e0:	f043 0301 	orr.w	r3, r3, #1
 80040e4:	6713      	str	r3, [r2, #112]	; 0x70
 80040e6:	e00b      	b.n	8004100 <HAL_RCC_OscConfig+0x324>
 80040e8:	4b58      	ldr	r3, [pc, #352]	; (800424c <HAL_RCC_OscConfig+0x470>)
 80040ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ec:	4a57      	ldr	r2, [pc, #348]	; (800424c <HAL_RCC_OscConfig+0x470>)
 80040ee:	f023 0301 	bic.w	r3, r3, #1
 80040f2:	6713      	str	r3, [r2, #112]	; 0x70
 80040f4:	4b55      	ldr	r3, [pc, #340]	; (800424c <HAL_RCC_OscConfig+0x470>)
 80040f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f8:	4a54      	ldr	r2, [pc, #336]	; (800424c <HAL_RCC_OscConfig+0x470>)
 80040fa:	f023 0304 	bic.w	r3, r3, #4
 80040fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d015      	beq.n	8004134 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004108:	f7ff fb9c 	bl	8003844 <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410e:	e00a      	b.n	8004126 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004110:	f7ff fb98 	bl	8003844 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	f241 3288 	movw	r2, #5000	; 0x1388
 800411e:	4293      	cmp	r3, r2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e0cb      	b.n	80042be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004126:	4b49      	ldr	r3, [pc, #292]	; (800424c <HAL_RCC_OscConfig+0x470>)
 8004128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0ee      	beq.n	8004110 <HAL_RCC_OscConfig+0x334>
 8004132:	e014      	b.n	800415e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004134:	f7ff fb86 	bl	8003844 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800413a:	e00a      	b.n	8004152 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800413c:	f7ff fb82 	bl	8003844 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	f241 3288 	movw	r2, #5000	; 0x1388
 800414a:	4293      	cmp	r3, r2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e0b5      	b.n	80042be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004152:	4b3e      	ldr	r3, [pc, #248]	; (800424c <HAL_RCC_OscConfig+0x470>)
 8004154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1ee      	bne.n	800413c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800415e:	7dfb      	ldrb	r3, [r7, #23]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d105      	bne.n	8004170 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004164:	4b39      	ldr	r3, [pc, #228]	; (800424c <HAL_RCC_OscConfig+0x470>)
 8004166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004168:	4a38      	ldr	r2, [pc, #224]	; (800424c <HAL_RCC_OscConfig+0x470>)
 800416a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800416e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 80a1 	beq.w	80042bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800417a:	4b34      	ldr	r3, [pc, #208]	; (800424c <HAL_RCC_OscConfig+0x470>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 030c 	and.w	r3, r3, #12
 8004182:	2b08      	cmp	r3, #8
 8004184:	d05c      	beq.n	8004240 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	2b02      	cmp	r3, #2
 800418c:	d141      	bne.n	8004212 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800418e:	4b31      	ldr	r3, [pc, #196]	; (8004254 <HAL_RCC_OscConfig+0x478>)
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004194:	f7ff fb56 	bl	8003844 <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800419c:	f7ff fb52 	bl	8003844 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e087      	b.n	80042be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ae:	4b27      	ldr	r3, [pc, #156]	; (800424c <HAL_RCC_OscConfig+0x470>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1f0      	bne.n	800419c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	69da      	ldr	r2, [r3, #28]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	019b      	lsls	r3, r3, #6
 80041ca:	431a      	orrs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d0:	085b      	lsrs	r3, r3, #1
 80041d2:	3b01      	subs	r3, #1
 80041d4:	041b      	lsls	r3, r3, #16
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041dc:	061b      	lsls	r3, r3, #24
 80041de:	491b      	ldr	r1, [pc, #108]	; (800424c <HAL_RCC_OscConfig+0x470>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041e4:	4b1b      	ldr	r3, [pc, #108]	; (8004254 <HAL_RCC_OscConfig+0x478>)
 80041e6:	2201      	movs	r2, #1
 80041e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ea:	f7ff fb2b 	bl	8003844 <HAL_GetTick>
 80041ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041f0:	e008      	b.n	8004204 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041f2:	f7ff fb27 	bl	8003844 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d901      	bls.n	8004204 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e05c      	b.n	80042be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004204:	4b11      	ldr	r3, [pc, #68]	; (800424c <HAL_RCC_OscConfig+0x470>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d0f0      	beq.n	80041f2 <HAL_RCC_OscConfig+0x416>
 8004210:	e054      	b.n	80042bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004212:	4b10      	ldr	r3, [pc, #64]	; (8004254 <HAL_RCC_OscConfig+0x478>)
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004218:	f7ff fb14 	bl	8003844 <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004220:	f7ff fb10 	bl	8003844 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e045      	b.n	80042be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004232:	4b06      	ldr	r3, [pc, #24]	; (800424c <HAL_RCC_OscConfig+0x470>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1f0      	bne.n	8004220 <HAL_RCC_OscConfig+0x444>
 800423e:	e03d      	b.n	80042bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d107      	bne.n	8004258 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e038      	b.n	80042be <HAL_RCC_OscConfig+0x4e2>
 800424c:	40023800 	.word	0x40023800
 8004250:	40007000 	.word	0x40007000
 8004254:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004258:	4b1b      	ldr	r3, [pc, #108]	; (80042c8 <HAL_RCC_OscConfig+0x4ec>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d028      	beq.n	80042b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004270:	429a      	cmp	r2, r3
 8004272:	d121      	bne.n	80042b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800427e:	429a      	cmp	r2, r3
 8004280:	d11a      	bne.n	80042b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004288:	4013      	ands	r3, r2
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800428e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004290:	4293      	cmp	r3, r2
 8004292:	d111      	bne.n	80042b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429e:	085b      	lsrs	r3, r3, #1
 80042a0:	3b01      	subs	r3, #1
 80042a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d107      	bne.n	80042b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d001      	beq.n	80042bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e000      	b.n	80042be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	40023800 	.word	0x40023800

080042cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e0cc      	b.n	800447a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042e0:	4b68      	ldr	r3, [pc, #416]	; (8004484 <HAL_RCC_ClockConfig+0x1b8>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d90c      	bls.n	8004308 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ee:	4b65      	ldr	r3, [pc, #404]	; (8004484 <HAL_RCC_ClockConfig+0x1b8>)
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	b2d2      	uxtb	r2, r2
 80042f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042f6:	4b63      	ldr	r3, [pc, #396]	; (8004484 <HAL_RCC_ClockConfig+0x1b8>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0307 	and.w	r3, r3, #7
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	429a      	cmp	r2, r3
 8004302:	d001      	beq.n	8004308 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e0b8      	b.n	800447a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d020      	beq.n	8004356 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d005      	beq.n	800432c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004320:	4b59      	ldr	r3, [pc, #356]	; (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	4a58      	ldr	r2, [pc, #352]	; (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 8004326:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800432a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0308 	and.w	r3, r3, #8
 8004334:	2b00      	cmp	r3, #0
 8004336:	d005      	beq.n	8004344 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004338:	4b53      	ldr	r3, [pc, #332]	; (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	4a52      	ldr	r2, [pc, #328]	; (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 800433e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004342:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004344:	4b50      	ldr	r3, [pc, #320]	; (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	494d      	ldr	r1, [pc, #308]	; (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 8004352:	4313      	orrs	r3, r2
 8004354:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d044      	beq.n	80043ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d107      	bne.n	800437a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800436a:	4b47      	ldr	r3, [pc, #284]	; (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d119      	bne.n	80043aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e07f      	b.n	800447a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	2b02      	cmp	r3, #2
 8004380:	d003      	beq.n	800438a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004386:	2b03      	cmp	r3, #3
 8004388:	d107      	bne.n	800439a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800438a:	4b3f      	ldr	r3, [pc, #252]	; (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d109      	bne.n	80043aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e06f      	b.n	800447a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800439a:	4b3b      	ldr	r3, [pc, #236]	; (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e067      	b.n	800447a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043aa:	4b37      	ldr	r3, [pc, #220]	; (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f023 0203 	bic.w	r2, r3, #3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	4934      	ldr	r1, [pc, #208]	; (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043bc:	f7ff fa42 	bl	8003844 <HAL_GetTick>
 80043c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043c2:	e00a      	b.n	80043da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043c4:	f7ff fa3e 	bl	8003844 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e04f      	b.n	800447a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043da:	4b2b      	ldr	r3, [pc, #172]	; (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 020c 	and.w	r2, r3, #12
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d1eb      	bne.n	80043c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043ec:	4b25      	ldr	r3, [pc, #148]	; (8004484 <HAL_RCC_ClockConfig+0x1b8>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0307 	and.w	r3, r3, #7
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d20c      	bcs.n	8004414 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043fa:	4b22      	ldr	r3, [pc, #136]	; (8004484 <HAL_RCC_ClockConfig+0x1b8>)
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	b2d2      	uxtb	r2, r2
 8004400:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004402:	4b20      	ldr	r3, [pc, #128]	; (8004484 <HAL_RCC_ClockConfig+0x1b8>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	429a      	cmp	r2, r3
 800440e:	d001      	beq.n	8004414 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e032      	b.n	800447a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0304 	and.w	r3, r3, #4
 800441c:	2b00      	cmp	r3, #0
 800441e:	d008      	beq.n	8004432 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004420:	4b19      	ldr	r3, [pc, #100]	; (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	4916      	ldr	r1, [pc, #88]	; (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 800442e:	4313      	orrs	r3, r2
 8004430:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0308 	and.w	r3, r3, #8
 800443a:	2b00      	cmp	r3, #0
 800443c:	d009      	beq.n	8004452 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800443e:	4b12      	ldr	r3, [pc, #72]	; (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	490e      	ldr	r1, [pc, #56]	; (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 800444e:	4313      	orrs	r3, r2
 8004450:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004452:	f000 f821 	bl	8004498 <HAL_RCC_GetSysClockFreq>
 8004456:	4602      	mov	r2, r0
 8004458:	4b0b      	ldr	r3, [pc, #44]	; (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	091b      	lsrs	r3, r3, #4
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	490a      	ldr	r1, [pc, #40]	; (800448c <HAL_RCC_ClockConfig+0x1c0>)
 8004464:	5ccb      	ldrb	r3, [r1, r3]
 8004466:	fa22 f303 	lsr.w	r3, r2, r3
 800446a:	4a09      	ldr	r2, [pc, #36]	; (8004490 <HAL_RCC_ClockConfig+0x1c4>)
 800446c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800446e:	4b09      	ldr	r3, [pc, #36]	; (8004494 <HAL_RCC_ClockConfig+0x1c8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff f9a2 	bl	80037bc <HAL_InitTick>

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	40023c00 	.word	0x40023c00
 8004488:	40023800 	.word	0x40023800
 800448c:	0802594c 	.word	0x0802594c
 8004490:	20000040 	.word	0x20000040
 8004494:	20000044 	.word	0x20000044

08004498 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800449c:	b094      	sub	sp, #80	; 0x50
 800449e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	647b      	str	r3, [r7, #68]	; 0x44
 80044a4:	2300      	movs	r3, #0
 80044a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044a8:	2300      	movs	r3, #0
 80044aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044b0:	4b79      	ldr	r3, [pc, #484]	; (8004698 <HAL_RCC_GetSysClockFreq+0x200>)
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f003 030c 	and.w	r3, r3, #12
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d00d      	beq.n	80044d8 <HAL_RCC_GetSysClockFreq+0x40>
 80044bc:	2b08      	cmp	r3, #8
 80044be:	f200 80e1 	bhi.w	8004684 <HAL_RCC_GetSysClockFreq+0x1ec>
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <HAL_RCC_GetSysClockFreq+0x34>
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d003      	beq.n	80044d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80044ca:	e0db      	b.n	8004684 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044cc:	4b73      	ldr	r3, [pc, #460]	; (800469c <HAL_RCC_GetSysClockFreq+0x204>)
 80044ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80044d0:	e0db      	b.n	800468a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044d2:	4b73      	ldr	r3, [pc, #460]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80044d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044d6:	e0d8      	b.n	800468a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044d8:	4b6f      	ldr	r3, [pc, #444]	; (8004698 <HAL_RCC_GetSysClockFreq+0x200>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044e2:	4b6d      	ldr	r3, [pc, #436]	; (8004698 <HAL_RCC_GetSysClockFreq+0x200>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d063      	beq.n	80045b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ee:	4b6a      	ldr	r3, [pc, #424]	; (8004698 <HAL_RCC_GetSysClockFreq+0x200>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	099b      	lsrs	r3, r3, #6
 80044f4:	2200      	movs	r2, #0
 80044f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80044f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80044fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004500:	633b      	str	r3, [r7, #48]	; 0x30
 8004502:	2300      	movs	r3, #0
 8004504:	637b      	str	r3, [r7, #52]	; 0x34
 8004506:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800450a:	4622      	mov	r2, r4
 800450c:	462b      	mov	r3, r5
 800450e:	f04f 0000 	mov.w	r0, #0
 8004512:	f04f 0100 	mov.w	r1, #0
 8004516:	0159      	lsls	r1, r3, #5
 8004518:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800451c:	0150      	lsls	r0, r2, #5
 800451e:	4602      	mov	r2, r0
 8004520:	460b      	mov	r3, r1
 8004522:	4621      	mov	r1, r4
 8004524:	1a51      	subs	r1, r2, r1
 8004526:	6139      	str	r1, [r7, #16]
 8004528:	4629      	mov	r1, r5
 800452a:	eb63 0301 	sbc.w	r3, r3, r1
 800452e:	617b      	str	r3, [r7, #20]
 8004530:	f04f 0200 	mov.w	r2, #0
 8004534:	f04f 0300 	mov.w	r3, #0
 8004538:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800453c:	4659      	mov	r1, fp
 800453e:	018b      	lsls	r3, r1, #6
 8004540:	4651      	mov	r1, sl
 8004542:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004546:	4651      	mov	r1, sl
 8004548:	018a      	lsls	r2, r1, #6
 800454a:	4651      	mov	r1, sl
 800454c:	ebb2 0801 	subs.w	r8, r2, r1
 8004550:	4659      	mov	r1, fp
 8004552:	eb63 0901 	sbc.w	r9, r3, r1
 8004556:	f04f 0200 	mov.w	r2, #0
 800455a:	f04f 0300 	mov.w	r3, #0
 800455e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004562:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004566:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800456a:	4690      	mov	r8, r2
 800456c:	4699      	mov	r9, r3
 800456e:	4623      	mov	r3, r4
 8004570:	eb18 0303 	adds.w	r3, r8, r3
 8004574:	60bb      	str	r3, [r7, #8]
 8004576:	462b      	mov	r3, r5
 8004578:	eb49 0303 	adc.w	r3, r9, r3
 800457c:	60fb      	str	r3, [r7, #12]
 800457e:	f04f 0200 	mov.w	r2, #0
 8004582:	f04f 0300 	mov.w	r3, #0
 8004586:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800458a:	4629      	mov	r1, r5
 800458c:	024b      	lsls	r3, r1, #9
 800458e:	4621      	mov	r1, r4
 8004590:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004594:	4621      	mov	r1, r4
 8004596:	024a      	lsls	r2, r1, #9
 8004598:	4610      	mov	r0, r2
 800459a:	4619      	mov	r1, r3
 800459c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800459e:	2200      	movs	r2, #0
 80045a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80045a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045a8:	f7fb fe62 	bl	8000270 <__aeabi_uldivmod>
 80045ac:	4602      	mov	r2, r0
 80045ae:	460b      	mov	r3, r1
 80045b0:	4613      	mov	r3, r2
 80045b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045b4:	e058      	b.n	8004668 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045b6:	4b38      	ldr	r3, [pc, #224]	; (8004698 <HAL_RCC_GetSysClockFreq+0x200>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	099b      	lsrs	r3, r3, #6
 80045bc:	2200      	movs	r2, #0
 80045be:	4618      	mov	r0, r3
 80045c0:	4611      	mov	r1, r2
 80045c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045c6:	623b      	str	r3, [r7, #32]
 80045c8:	2300      	movs	r3, #0
 80045ca:	627b      	str	r3, [r7, #36]	; 0x24
 80045cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045d0:	4642      	mov	r2, r8
 80045d2:	464b      	mov	r3, r9
 80045d4:	f04f 0000 	mov.w	r0, #0
 80045d8:	f04f 0100 	mov.w	r1, #0
 80045dc:	0159      	lsls	r1, r3, #5
 80045de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045e2:	0150      	lsls	r0, r2, #5
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	4641      	mov	r1, r8
 80045ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80045ee:	4649      	mov	r1, r9
 80045f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80045f4:	f04f 0200 	mov.w	r2, #0
 80045f8:	f04f 0300 	mov.w	r3, #0
 80045fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004600:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004604:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004608:	ebb2 040a 	subs.w	r4, r2, sl
 800460c:	eb63 050b 	sbc.w	r5, r3, fp
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	f04f 0300 	mov.w	r3, #0
 8004618:	00eb      	lsls	r3, r5, #3
 800461a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800461e:	00e2      	lsls	r2, r4, #3
 8004620:	4614      	mov	r4, r2
 8004622:	461d      	mov	r5, r3
 8004624:	4643      	mov	r3, r8
 8004626:	18e3      	adds	r3, r4, r3
 8004628:	603b      	str	r3, [r7, #0]
 800462a:	464b      	mov	r3, r9
 800462c:	eb45 0303 	adc.w	r3, r5, r3
 8004630:	607b      	str	r3, [r7, #4]
 8004632:	f04f 0200 	mov.w	r2, #0
 8004636:	f04f 0300 	mov.w	r3, #0
 800463a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800463e:	4629      	mov	r1, r5
 8004640:	028b      	lsls	r3, r1, #10
 8004642:	4621      	mov	r1, r4
 8004644:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004648:	4621      	mov	r1, r4
 800464a:	028a      	lsls	r2, r1, #10
 800464c:	4610      	mov	r0, r2
 800464e:	4619      	mov	r1, r3
 8004650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004652:	2200      	movs	r2, #0
 8004654:	61bb      	str	r3, [r7, #24]
 8004656:	61fa      	str	r2, [r7, #28]
 8004658:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800465c:	f7fb fe08 	bl	8000270 <__aeabi_uldivmod>
 8004660:	4602      	mov	r2, r0
 8004662:	460b      	mov	r3, r1
 8004664:	4613      	mov	r3, r2
 8004666:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004668:	4b0b      	ldr	r3, [pc, #44]	; (8004698 <HAL_RCC_GetSysClockFreq+0x200>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	0c1b      	lsrs	r3, r3, #16
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	3301      	adds	r3, #1
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004678:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800467a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800467c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004680:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004682:	e002      	b.n	800468a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004684:	4b05      	ldr	r3, [pc, #20]	; (800469c <HAL_RCC_GetSysClockFreq+0x204>)
 8004686:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004688:	bf00      	nop
    }
  }
  return sysclockfreq;
 800468a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800468c:	4618      	mov	r0, r3
 800468e:	3750      	adds	r7, #80	; 0x50
 8004690:	46bd      	mov	sp, r7
 8004692:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004696:	bf00      	nop
 8004698:	40023800 	.word	0x40023800
 800469c:	00f42400 	.word	0x00f42400
 80046a0:	007a1200 	.word	0x007a1200

080046a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046a4:	b480      	push	{r7}
 80046a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046a8:	4b03      	ldr	r3, [pc, #12]	; (80046b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80046aa:	681b      	ldr	r3, [r3, #0]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	20000040 	.word	0x20000040

080046bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046c0:	f7ff fff0 	bl	80046a4 <HAL_RCC_GetHCLKFreq>
 80046c4:	4602      	mov	r2, r0
 80046c6:	4b05      	ldr	r3, [pc, #20]	; (80046dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	0a9b      	lsrs	r3, r3, #10
 80046cc:	f003 0307 	and.w	r3, r3, #7
 80046d0:	4903      	ldr	r1, [pc, #12]	; (80046e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046d2:	5ccb      	ldrb	r3, [r1, r3]
 80046d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046d8:	4618      	mov	r0, r3
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	40023800 	.word	0x40023800
 80046e0:	0802595c 	.word	0x0802595c

080046e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046e8:	f7ff ffdc 	bl	80046a4 <HAL_RCC_GetHCLKFreq>
 80046ec:	4602      	mov	r2, r0
 80046ee:	4b05      	ldr	r3, [pc, #20]	; (8004704 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	0b5b      	lsrs	r3, r3, #13
 80046f4:	f003 0307 	and.w	r3, r3, #7
 80046f8:	4903      	ldr	r1, [pc, #12]	; (8004708 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046fa:	5ccb      	ldrb	r3, [r1, r3]
 80046fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004700:	4618      	mov	r0, r3
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40023800 	.word	0x40023800
 8004708:	0802595c 	.word	0x0802595c

0800470c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e07b      	b.n	8004816 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	2b00      	cmp	r3, #0
 8004724:	d108      	bne.n	8004738 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800472e:	d009      	beq.n	8004744 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	61da      	str	r2, [r3, #28]
 8004736:	e005      	b.n	8004744 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d106      	bne.n	8004764 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7fe fe6c 	bl	800343c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800477a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800478c:	431a      	orrs	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	431a      	orrs	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047b4:	431a      	orrs	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047be:	431a      	orrs	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c8:	ea42 0103 	orr.w	r1, r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	0c1b      	lsrs	r3, r3, #16
 80047e2:	f003 0104 	and.w	r1, r3, #4
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	f003 0210 	and.w	r2, r3, #16
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	69da      	ldr	r2, [r3, #28]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004804:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b084      	sub	sp, #16
 8004822:	af00      	add	r7, sp, #0
 8004824:	60f8      	str	r0, [r7, #12]
 8004826:	60b9      	str	r1, [r7, #8]
 8004828:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e038      	b.n	80048a6 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	d106      	bne.n	800484e <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f7fb ff3f 	bl	80006cc <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	3308      	adds	r3, #8
 8004856:	4619      	mov	r1, r3
 8004858:	4610      	mov	r0, r2
 800485a:	f000 fae9 	bl	8004e30 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6818      	ldr	r0, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	461a      	mov	r2, r3
 8004868:	68b9      	ldr	r1, [r7, #8]
 800486a:	f000 fb4b 	bl	8004f04 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6858      	ldr	r0, [r3, #4]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	689a      	ldr	r2, [r3, #8]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487a:	6879      	ldr	r1, [r7, #4]
 800487c:	f000 fb78 	bl	8004f70 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	6892      	ldr	r2, [r2, #8]
 8004888:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	6892      	ldr	r2, [r2, #8]
 8004894:	f041 0101 	orr.w	r1, r1, #1
 8004898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b082      	sub	sp, #8
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e03f      	b.n	8004940 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d106      	bne.n	80048da <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7fe fedd 	bl	8003694 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2224      	movs	r2, #36	; 0x24
 80048de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68da      	ldr	r2, [r3, #12]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048f0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f828 	bl	8004948 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	691a      	ldr	r2, [r3, #16]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004906:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	695a      	ldr	r2, [r3, #20]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004916:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68da      	ldr	r2, [r3, #12]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004926:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2220      	movs	r2, #32
 8004932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2220      	movs	r2, #32
 800493a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3708      	adds	r7, #8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800494c:	b0c0      	sub	sp, #256	; 0x100
 800494e:	af00      	add	r7, sp, #0
 8004950:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004964:	68d9      	ldr	r1, [r3, #12]
 8004966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	ea40 0301 	orr.w	r3, r0, r1
 8004970:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	431a      	orrs	r2, r3
 8004980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	431a      	orrs	r2, r3
 8004988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80049a0:	f021 010c 	bic.w	r1, r1, #12
 80049a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049ae:	430b      	orrs	r3, r1
 80049b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80049be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c2:	6999      	ldr	r1, [r3, #24]
 80049c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	ea40 0301 	orr.w	r3, r0, r1
 80049ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	4b8f      	ldr	r3, [pc, #572]	; (8004c14 <UART_SetConfig+0x2cc>)
 80049d8:	429a      	cmp	r2, r3
 80049da:	d005      	beq.n	80049e8 <UART_SetConfig+0xa0>
 80049dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	4b8d      	ldr	r3, [pc, #564]	; (8004c18 <UART_SetConfig+0x2d0>)
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d104      	bne.n	80049f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049e8:	f7ff fe7c 	bl	80046e4 <HAL_RCC_GetPCLK2Freq>
 80049ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80049f0:	e003      	b.n	80049fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049f2:	f7ff fe63 	bl	80046bc <HAL_RCC_GetPCLK1Freq>
 80049f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049fe:	69db      	ldr	r3, [r3, #28]
 8004a00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a04:	f040 810c 	bne.w	8004c20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a1a:	4622      	mov	r2, r4
 8004a1c:	462b      	mov	r3, r5
 8004a1e:	1891      	adds	r1, r2, r2
 8004a20:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a22:	415b      	adcs	r3, r3
 8004a24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a2a:	4621      	mov	r1, r4
 8004a2c:	eb12 0801 	adds.w	r8, r2, r1
 8004a30:	4629      	mov	r1, r5
 8004a32:	eb43 0901 	adc.w	r9, r3, r1
 8004a36:	f04f 0200 	mov.w	r2, #0
 8004a3a:	f04f 0300 	mov.w	r3, #0
 8004a3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a4a:	4690      	mov	r8, r2
 8004a4c:	4699      	mov	r9, r3
 8004a4e:	4623      	mov	r3, r4
 8004a50:	eb18 0303 	adds.w	r3, r8, r3
 8004a54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a58:	462b      	mov	r3, r5
 8004a5a:	eb49 0303 	adc.w	r3, r9, r3
 8004a5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a76:	460b      	mov	r3, r1
 8004a78:	18db      	adds	r3, r3, r3
 8004a7a:	653b      	str	r3, [r7, #80]	; 0x50
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	eb42 0303 	adc.w	r3, r2, r3
 8004a82:	657b      	str	r3, [r7, #84]	; 0x54
 8004a84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a8c:	f7fb fbf0 	bl	8000270 <__aeabi_uldivmod>
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	4b61      	ldr	r3, [pc, #388]	; (8004c1c <UART_SetConfig+0x2d4>)
 8004a96:	fba3 2302 	umull	r2, r3, r3, r2
 8004a9a:	095b      	lsrs	r3, r3, #5
 8004a9c:	011c      	lsls	r4, r3, #4
 8004a9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004aa8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004aac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ab0:	4642      	mov	r2, r8
 8004ab2:	464b      	mov	r3, r9
 8004ab4:	1891      	adds	r1, r2, r2
 8004ab6:	64b9      	str	r1, [r7, #72]	; 0x48
 8004ab8:	415b      	adcs	r3, r3
 8004aba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004abc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ac0:	4641      	mov	r1, r8
 8004ac2:	eb12 0a01 	adds.w	sl, r2, r1
 8004ac6:	4649      	mov	r1, r9
 8004ac8:	eb43 0b01 	adc.w	fp, r3, r1
 8004acc:	f04f 0200 	mov.w	r2, #0
 8004ad0:	f04f 0300 	mov.w	r3, #0
 8004ad4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ad8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004adc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ae0:	4692      	mov	sl, r2
 8004ae2:	469b      	mov	fp, r3
 8004ae4:	4643      	mov	r3, r8
 8004ae6:	eb1a 0303 	adds.w	r3, sl, r3
 8004aea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004aee:	464b      	mov	r3, r9
 8004af0:	eb4b 0303 	adc.w	r3, fp, r3
 8004af4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b04:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	18db      	adds	r3, r3, r3
 8004b10:	643b      	str	r3, [r7, #64]	; 0x40
 8004b12:	4613      	mov	r3, r2
 8004b14:	eb42 0303 	adc.w	r3, r2, r3
 8004b18:	647b      	str	r3, [r7, #68]	; 0x44
 8004b1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b22:	f7fb fba5 	bl	8000270 <__aeabi_uldivmod>
 8004b26:	4602      	mov	r2, r0
 8004b28:	460b      	mov	r3, r1
 8004b2a:	4611      	mov	r1, r2
 8004b2c:	4b3b      	ldr	r3, [pc, #236]	; (8004c1c <UART_SetConfig+0x2d4>)
 8004b2e:	fba3 2301 	umull	r2, r3, r3, r1
 8004b32:	095b      	lsrs	r3, r3, #5
 8004b34:	2264      	movs	r2, #100	; 0x64
 8004b36:	fb02 f303 	mul.w	r3, r2, r3
 8004b3a:	1acb      	subs	r3, r1, r3
 8004b3c:	00db      	lsls	r3, r3, #3
 8004b3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b42:	4b36      	ldr	r3, [pc, #216]	; (8004c1c <UART_SetConfig+0x2d4>)
 8004b44:	fba3 2302 	umull	r2, r3, r3, r2
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	005b      	lsls	r3, r3, #1
 8004b4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b50:	441c      	add	r4, r3
 8004b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b56:	2200      	movs	r2, #0
 8004b58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b5c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b64:	4642      	mov	r2, r8
 8004b66:	464b      	mov	r3, r9
 8004b68:	1891      	adds	r1, r2, r2
 8004b6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b6c:	415b      	adcs	r3, r3
 8004b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b74:	4641      	mov	r1, r8
 8004b76:	1851      	adds	r1, r2, r1
 8004b78:	6339      	str	r1, [r7, #48]	; 0x30
 8004b7a:	4649      	mov	r1, r9
 8004b7c:	414b      	adcs	r3, r1
 8004b7e:	637b      	str	r3, [r7, #52]	; 0x34
 8004b80:	f04f 0200 	mov.w	r2, #0
 8004b84:	f04f 0300 	mov.w	r3, #0
 8004b88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b8c:	4659      	mov	r1, fp
 8004b8e:	00cb      	lsls	r3, r1, #3
 8004b90:	4651      	mov	r1, sl
 8004b92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b96:	4651      	mov	r1, sl
 8004b98:	00ca      	lsls	r2, r1, #3
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	4642      	mov	r2, r8
 8004ba2:	189b      	adds	r3, r3, r2
 8004ba4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ba8:	464b      	mov	r3, r9
 8004baa:	460a      	mov	r2, r1
 8004bac:	eb42 0303 	adc.w	r3, r2, r3
 8004bb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004bc0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004bc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004bc8:	460b      	mov	r3, r1
 8004bca:	18db      	adds	r3, r3, r3
 8004bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bce:	4613      	mov	r3, r2
 8004bd0:	eb42 0303 	adc.w	r3, r2, r3
 8004bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004bde:	f7fb fb47 	bl	8000270 <__aeabi_uldivmod>
 8004be2:	4602      	mov	r2, r0
 8004be4:	460b      	mov	r3, r1
 8004be6:	4b0d      	ldr	r3, [pc, #52]	; (8004c1c <UART_SetConfig+0x2d4>)
 8004be8:	fba3 1302 	umull	r1, r3, r3, r2
 8004bec:	095b      	lsrs	r3, r3, #5
 8004bee:	2164      	movs	r1, #100	; 0x64
 8004bf0:	fb01 f303 	mul.w	r3, r1, r3
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	3332      	adds	r3, #50	; 0x32
 8004bfa:	4a08      	ldr	r2, [pc, #32]	; (8004c1c <UART_SetConfig+0x2d4>)
 8004bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004c00:	095b      	lsrs	r3, r3, #5
 8004c02:	f003 0207 	and.w	r2, r3, #7
 8004c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4422      	add	r2, r4
 8004c0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c10:	e105      	b.n	8004e1e <UART_SetConfig+0x4d6>
 8004c12:	bf00      	nop
 8004c14:	40011000 	.word	0x40011000
 8004c18:	40011400 	.word	0x40011400
 8004c1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c24:	2200      	movs	r2, #0
 8004c26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c2a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c32:	4642      	mov	r2, r8
 8004c34:	464b      	mov	r3, r9
 8004c36:	1891      	adds	r1, r2, r2
 8004c38:	6239      	str	r1, [r7, #32]
 8004c3a:	415b      	adcs	r3, r3
 8004c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c42:	4641      	mov	r1, r8
 8004c44:	1854      	adds	r4, r2, r1
 8004c46:	4649      	mov	r1, r9
 8004c48:	eb43 0501 	adc.w	r5, r3, r1
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	f04f 0300 	mov.w	r3, #0
 8004c54:	00eb      	lsls	r3, r5, #3
 8004c56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c5a:	00e2      	lsls	r2, r4, #3
 8004c5c:	4614      	mov	r4, r2
 8004c5e:	461d      	mov	r5, r3
 8004c60:	4643      	mov	r3, r8
 8004c62:	18e3      	adds	r3, r4, r3
 8004c64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c68:	464b      	mov	r3, r9
 8004c6a:	eb45 0303 	adc.w	r3, r5, r3
 8004c6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c82:	f04f 0200 	mov.w	r2, #0
 8004c86:	f04f 0300 	mov.w	r3, #0
 8004c8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c8e:	4629      	mov	r1, r5
 8004c90:	008b      	lsls	r3, r1, #2
 8004c92:	4621      	mov	r1, r4
 8004c94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c98:	4621      	mov	r1, r4
 8004c9a:	008a      	lsls	r2, r1, #2
 8004c9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ca0:	f7fb fae6 	bl	8000270 <__aeabi_uldivmod>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	4b60      	ldr	r3, [pc, #384]	; (8004e2c <UART_SetConfig+0x4e4>)
 8004caa:	fba3 2302 	umull	r2, r3, r3, r2
 8004cae:	095b      	lsrs	r3, r3, #5
 8004cb0:	011c      	lsls	r4, r3, #4
 8004cb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004cbc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004cc0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004cc4:	4642      	mov	r2, r8
 8004cc6:	464b      	mov	r3, r9
 8004cc8:	1891      	adds	r1, r2, r2
 8004cca:	61b9      	str	r1, [r7, #24]
 8004ccc:	415b      	adcs	r3, r3
 8004cce:	61fb      	str	r3, [r7, #28]
 8004cd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cd4:	4641      	mov	r1, r8
 8004cd6:	1851      	adds	r1, r2, r1
 8004cd8:	6139      	str	r1, [r7, #16]
 8004cda:	4649      	mov	r1, r9
 8004cdc:	414b      	adcs	r3, r1
 8004cde:	617b      	str	r3, [r7, #20]
 8004ce0:	f04f 0200 	mov.w	r2, #0
 8004ce4:	f04f 0300 	mov.w	r3, #0
 8004ce8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cec:	4659      	mov	r1, fp
 8004cee:	00cb      	lsls	r3, r1, #3
 8004cf0:	4651      	mov	r1, sl
 8004cf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cf6:	4651      	mov	r1, sl
 8004cf8:	00ca      	lsls	r2, r1, #3
 8004cfa:	4610      	mov	r0, r2
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	4603      	mov	r3, r0
 8004d00:	4642      	mov	r2, r8
 8004d02:	189b      	adds	r3, r3, r2
 8004d04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d08:	464b      	mov	r3, r9
 8004d0a:	460a      	mov	r2, r1
 8004d0c:	eb42 0303 	adc.w	r3, r2, r3
 8004d10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d1e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d20:	f04f 0200 	mov.w	r2, #0
 8004d24:	f04f 0300 	mov.w	r3, #0
 8004d28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004d2c:	4649      	mov	r1, r9
 8004d2e:	008b      	lsls	r3, r1, #2
 8004d30:	4641      	mov	r1, r8
 8004d32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d36:	4641      	mov	r1, r8
 8004d38:	008a      	lsls	r2, r1, #2
 8004d3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d3e:	f7fb fa97 	bl	8000270 <__aeabi_uldivmod>
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	4b39      	ldr	r3, [pc, #228]	; (8004e2c <UART_SetConfig+0x4e4>)
 8004d48:	fba3 1302 	umull	r1, r3, r3, r2
 8004d4c:	095b      	lsrs	r3, r3, #5
 8004d4e:	2164      	movs	r1, #100	; 0x64
 8004d50:	fb01 f303 	mul.w	r3, r1, r3
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	011b      	lsls	r3, r3, #4
 8004d58:	3332      	adds	r3, #50	; 0x32
 8004d5a:	4a34      	ldr	r2, [pc, #208]	; (8004e2c <UART_SetConfig+0x4e4>)
 8004d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d60:	095b      	lsrs	r3, r3, #5
 8004d62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d66:	441c      	add	r4, r3
 8004d68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	673b      	str	r3, [r7, #112]	; 0x70
 8004d70:	677a      	str	r2, [r7, #116]	; 0x74
 8004d72:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d76:	4642      	mov	r2, r8
 8004d78:	464b      	mov	r3, r9
 8004d7a:	1891      	adds	r1, r2, r2
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	415b      	adcs	r3, r3
 8004d80:	60fb      	str	r3, [r7, #12]
 8004d82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d86:	4641      	mov	r1, r8
 8004d88:	1851      	adds	r1, r2, r1
 8004d8a:	6039      	str	r1, [r7, #0]
 8004d8c:	4649      	mov	r1, r9
 8004d8e:	414b      	adcs	r3, r1
 8004d90:	607b      	str	r3, [r7, #4]
 8004d92:	f04f 0200 	mov.w	r2, #0
 8004d96:	f04f 0300 	mov.w	r3, #0
 8004d9a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d9e:	4659      	mov	r1, fp
 8004da0:	00cb      	lsls	r3, r1, #3
 8004da2:	4651      	mov	r1, sl
 8004da4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004da8:	4651      	mov	r1, sl
 8004daa:	00ca      	lsls	r2, r1, #3
 8004dac:	4610      	mov	r0, r2
 8004dae:	4619      	mov	r1, r3
 8004db0:	4603      	mov	r3, r0
 8004db2:	4642      	mov	r2, r8
 8004db4:	189b      	adds	r3, r3, r2
 8004db6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004db8:	464b      	mov	r3, r9
 8004dba:	460a      	mov	r2, r1
 8004dbc:	eb42 0303 	adc.w	r3, r2, r3
 8004dc0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	663b      	str	r3, [r7, #96]	; 0x60
 8004dcc:	667a      	str	r2, [r7, #100]	; 0x64
 8004dce:	f04f 0200 	mov.w	r2, #0
 8004dd2:	f04f 0300 	mov.w	r3, #0
 8004dd6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004dda:	4649      	mov	r1, r9
 8004ddc:	008b      	lsls	r3, r1, #2
 8004dde:	4641      	mov	r1, r8
 8004de0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004de4:	4641      	mov	r1, r8
 8004de6:	008a      	lsls	r2, r1, #2
 8004de8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004dec:	f7fb fa40 	bl	8000270 <__aeabi_uldivmod>
 8004df0:	4602      	mov	r2, r0
 8004df2:	460b      	mov	r3, r1
 8004df4:	4b0d      	ldr	r3, [pc, #52]	; (8004e2c <UART_SetConfig+0x4e4>)
 8004df6:	fba3 1302 	umull	r1, r3, r3, r2
 8004dfa:	095b      	lsrs	r3, r3, #5
 8004dfc:	2164      	movs	r1, #100	; 0x64
 8004dfe:	fb01 f303 	mul.w	r3, r1, r3
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	011b      	lsls	r3, r3, #4
 8004e06:	3332      	adds	r3, #50	; 0x32
 8004e08:	4a08      	ldr	r2, [pc, #32]	; (8004e2c <UART_SetConfig+0x4e4>)
 8004e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0e:	095b      	lsrs	r3, r3, #5
 8004e10:	f003 020f 	and.w	r2, r3, #15
 8004e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4422      	add	r2, r4
 8004e1c:	609a      	str	r2, [r3, #8]
}
 8004e1e:	bf00      	nop
 8004e20:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004e24:	46bd      	mov	sp, r7
 8004e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e2a:	bf00      	nop
 8004e2c:	51eb851f 	.word	0x51eb851f

08004e30 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b087      	sub	sp, #28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	6812      	ldr	r2, [r2, #0]
 8004e48:	f023 0101 	bic.w	r1, r3, #1
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	2b08      	cmp	r3, #8
 8004e58:	d102      	bne.n	8004e60 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004e5a:	2340      	movs	r3, #64	; 0x40
 8004e5c:	617b      	str	r3, [r7, #20]
 8004e5e:	e001      	b.n	8004e64 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8004e60:	2300      	movs	r3, #0
 8004e62:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8004e70:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8004e76:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8004e7c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8004e82:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8004e88:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8004e8e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8004e94:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8004e9a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8004ea0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8004ebe:	4b10      	ldr	r3, [pc, #64]	; (8004f00 <FSMC_NORSRAM_Init+0xd0>)
 8004ec0:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ec8:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8004ed0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	43db      	mvns	r3, r3
 8004ee0:	ea02 0103 	and.w	r1, r2, r3
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	4319      	orrs	r1, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	371c      	adds	r7, #28
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr
 8004f00:	0008fb7f 	.word	0x0008fb7f

08004f04 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	1c5a      	adds	r2, r3, #1
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f1a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	011b      	lsls	r3, r3, #4
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	021b      	lsls	r3, r3, #8
 8004f30:	431a      	orrs	r2, r3
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	041b      	lsls	r3, r3, #16
 8004f38:	431a      	orrs	r2, r3
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	051b      	lsls	r3, r3, #20
 8004f42:	431a      	orrs	r2, r3
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	3b02      	subs	r3, #2
 8004f4a:	061b      	lsls	r3, r3, #24
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	3201      	adds	r2, #1
 8004f58:	4319      	orrs	r1, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
	...

08004f70 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
 8004f7c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f84:	d11d      	bne.n	8004fc2 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004f8e:	4b13      	ldr	r3, [pc, #76]	; (8004fdc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8004f90:	4013      	ands	r3, r2
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	6811      	ldr	r1, [r2, #0]
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	6852      	ldr	r2, [r2, #4]
 8004f9a:	0112      	lsls	r2, r2, #4
 8004f9c:	4311      	orrs	r1, r2
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	6892      	ldr	r2, [r2, #8]
 8004fa2:	0212      	lsls	r2, r2, #8
 8004fa4:	4311      	orrs	r1, r2
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	6992      	ldr	r2, [r2, #24]
 8004faa:	4311      	orrs	r1, r2
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	68d2      	ldr	r2, [r2, #12]
 8004fb0:	0412      	lsls	r2, r2, #16
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	ea43 0102 	orr.w	r1, r3, r2
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004fc0:	e005      	b.n	8004fce <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004fca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3714      	adds	r7, #20
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	cff00000 	.word	0xcff00000

08004fe0 <__errno>:
 8004fe0:	4b01      	ldr	r3, [pc, #4]	; (8004fe8 <__errno+0x8>)
 8004fe2:	6818      	ldr	r0, [r3, #0]
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	2000004c 	.word	0x2000004c

08004fec <__libc_init_array>:
 8004fec:	b570      	push	{r4, r5, r6, lr}
 8004fee:	4d0d      	ldr	r5, [pc, #52]	; (8005024 <__libc_init_array+0x38>)
 8004ff0:	4c0d      	ldr	r4, [pc, #52]	; (8005028 <__libc_init_array+0x3c>)
 8004ff2:	1b64      	subs	r4, r4, r5
 8004ff4:	10a4      	asrs	r4, r4, #2
 8004ff6:	2600      	movs	r6, #0
 8004ff8:	42a6      	cmp	r6, r4
 8004ffa:	d109      	bne.n	8005010 <__libc_init_array+0x24>
 8004ffc:	4d0b      	ldr	r5, [pc, #44]	; (800502c <__libc_init_array+0x40>)
 8004ffe:	4c0c      	ldr	r4, [pc, #48]	; (8005030 <__libc_init_array+0x44>)
 8005000:	f000 fc8e 	bl	8005920 <_init>
 8005004:	1b64      	subs	r4, r4, r5
 8005006:	10a4      	asrs	r4, r4, #2
 8005008:	2600      	movs	r6, #0
 800500a:	42a6      	cmp	r6, r4
 800500c:	d105      	bne.n	800501a <__libc_init_array+0x2e>
 800500e:	bd70      	pop	{r4, r5, r6, pc}
 8005010:	f855 3b04 	ldr.w	r3, [r5], #4
 8005014:	4798      	blx	r3
 8005016:	3601      	adds	r6, #1
 8005018:	e7ee      	b.n	8004ff8 <__libc_init_array+0xc>
 800501a:	f855 3b04 	ldr.w	r3, [r5], #4
 800501e:	4798      	blx	r3
 8005020:	3601      	adds	r6, #1
 8005022:	e7f2      	b.n	800500a <__libc_init_array+0x1e>
 8005024:	080259a0 	.word	0x080259a0
 8005028:	080259a0 	.word	0x080259a0
 800502c:	080259a0 	.word	0x080259a0
 8005030:	080259a4 	.word	0x080259a4

08005034 <memset>:
 8005034:	4402      	add	r2, r0
 8005036:	4603      	mov	r3, r0
 8005038:	4293      	cmp	r3, r2
 800503a:	d100      	bne.n	800503e <memset+0xa>
 800503c:	4770      	bx	lr
 800503e:	f803 1b01 	strb.w	r1, [r3], #1
 8005042:	e7f9      	b.n	8005038 <memset+0x4>

08005044 <_vsiprintf_r>:
 8005044:	b500      	push	{lr}
 8005046:	b09b      	sub	sp, #108	; 0x6c
 8005048:	9100      	str	r1, [sp, #0]
 800504a:	9104      	str	r1, [sp, #16]
 800504c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005050:	9105      	str	r1, [sp, #20]
 8005052:	9102      	str	r1, [sp, #8]
 8005054:	4905      	ldr	r1, [pc, #20]	; (800506c <_vsiprintf_r+0x28>)
 8005056:	9103      	str	r1, [sp, #12]
 8005058:	4669      	mov	r1, sp
 800505a:	f000 f86f 	bl	800513c <_svfiprintf_r>
 800505e:	9b00      	ldr	r3, [sp, #0]
 8005060:	2200      	movs	r2, #0
 8005062:	701a      	strb	r2, [r3, #0]
 8005064:	b01b      	add	sp, #108	; 0x6c
 8005066:	f85d fb04 	ldr.w	pc, [sp], #4
 800506a:	bf00      	nop
 800506c:	ffff0208 	.word	0xffff0208

08005070 <vsiprintf>:
 8005070:	4613      	mov	r3, r2
 8005072:	460a      	mov	r2, r1
 8005074:	4601      	mov	r1, r0
 8005076:	4802      	ldr	r0, [pc, #8]	; (8005080 <vsiprintf+0x10>)
 8005078:	6800      	ldr	r0, [r0, #0]
 800507a:	f7ff bfe3 	b.w	8005044 <_vsiprintf_r>
 800507e:	bf00      	nop
 8005080:	2000004c 	.word	0x2000004c

08005084 <__ssputs_r>:
 8005084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005088:	688e      	ldr	r6, [r1, #8]
 800508a:	429e      	cmp	r6, r3
 800508c:	4682      	mov	sl, r0
 800508e:	460c      	mov	r4, r1
 8005090:	4690      	mov	r8, r2
 8005092:	461f      	mov	r7, r3
 8005094:	d838      	bhi.n	8005108 <__ssputs_r+0x84>
 8005096:	898a      	ldrh	r2, [r1, #12]
 8005098:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800509c:	d032      	beq.n	8005104 <__ssputs_r+0x80>
 800509e:	6825      	ldr	r5, [r4, #0]
 80050a0:	6909      	ldr	r1, [r1, #16]
 80050a2:	eba5 0901 	sub.w	r9, r5, r1
 80050a6:	6965      	ldr	r5, [r4, #20]
 80050a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80050b0:	3301      	adds	r3, #1
 80050b2:	444b      	add	r3, r9
 80050b4:	106d      	asrs	r5, r5, #1
 80050b6:	429d      	cmp	r5, r3
 80050b8:	bf38      	it	cc
 80050ba:	461d      	movcc	r5, r3
 80050bc:	0553      	lsls	r3, r2, #21
 80050be:	d531      	bpl.n	8005124 <__ssputs_r+0xa0>
 80050c0:	4629      	mov	r1, r5
 80050c2:	f000 fb63 	bl	800578c <_malloc_r>
 80050c6:	4606      	mov	r6, r0
 80050c8:	b950      	cbnz	r0, 80050e0 <__ssputs_r+0x5c>
 80050ca:	230c      	movs	r3, #12
 80050cc:	f8ca 3000 	str.w	r3, [sl]
 80050d0:	89a3      	ldrh	r3, [r4, #12]
 80050d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050d6:	81a3      	strh	r3, [r4, #12]
 80050d8:	f04f 30ff 	mov.w	r0, #4294967295
 80050dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050e0:	6921      	ldr	r1, [r4, #16]
 80050e2:	464a      	mov	r2, r9
 80050e4:	f000 fabe 	bl	8005664 <memcpy>
 80050e8:	89a3      	ldrh	r3, [r4, #12]
 80050ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80050ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f2:	81a3      	strh	r3, [r4, #12]
 80050f4:	6126      	str	r6, [r4, #16]
 80050f6:	6165      	str	r5, [r4, #20]
 80050f8:	444e      	add	r6, r9
 80050fa:	eba5 0509 	sub.w	r5, r5, r9
 80050fe:	6026      	str	r6, [r4, #0]
 8005100:	60a5      	str	r5, [r4, #8]
 8005102:	463e      	mov	r6, r7
 8005104:	42be      	cmp	r6, r7
 8005106:	d900      	bls.n	800510a <__ssputs_r+0x86>
 8005108:	463e      	mov	r6, r7
 800510a:	6820      	ldr	r0, [r4, #0]
 800510c:	4632      	mov	r2, r6
 800510e:	4641      	mov	r1, r8
 8005110:	f000 fab6 	bl	8005680 <memmove>
 8005114:	68a3      	ldr	r3, [r4, #8]
 8005116:	1b9b      	subs	r3, r3, r6
 8005118:	60a3      	str	r3, [r4, #8]
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	4433      	add	r3, r6
 800511e:	6023      	str	r3, [r4, #0]
 8005120:	2000      	movs	r0, #0
 8005122:	e7db      	b.n	80050dc <__ssputs_r+0x58>
 8005124:	462a      	mov	r2, r5
 8005126:	f000 fba5 	bl	8005874 <_realloc_r>
 800512a:	4606      	mov	r6, r0
 800512c:	2800      	cmp	r0, #0
 800512e:	d1e1      	bne.n	80050f4 <__ssputs_r+0x70>
 8005130:	6921      	ldr	r1, [r4, #16]
 8005132:	4650      	mov	r0, sl
 8005134:	f000 fabe 	bl	80056b4 <_free_r>
 8005138:	e7c7      	b.n	80050ca <__ssputs_r+0x46>
	...

0800513c <_svfiprintf_r>:
 800513c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005140:	4698      	mov	r8, r3
 8005142:	898b      	ldrh	r3, [r1, #12]
 8005144:	061b      	lsls	r3, r3, #24
 8005146:	b09d      	sub	sp, #116	; 0x74
 8005148:	4607      	mov	r7, r0
 800514a:	460d      	mov	r5, r1
 800514c:	4614      	mov	r4, r2
 800514e:	d50e      	bpl.n	800516e <_svfiprintf_r+0x32>
 8005150:	690b      	ldr	r3, [r1, #16]
 8005152:	b963      	cbnz	r3, 800516e <_svfiprintf_r+0x32>
 8005154:	2140      	movs	r1, #64	; 0x40
 8005156:	f000 fb19 	bl	800578c <_malloc_r>
 800515a:	6028      	str	r0, [r5, #0]
 800515c:	6128      	str	r0, [r5, #16]
 800515e:	b920      	cbnz	r0, 800516a <_svfiprintf_r+0x2e>
 8005160:	230c      	movs	r3, #12
 8005162:	603b      	str	r3, [r7, #0]
 8005164:	f04f 30ff 	mov.w	r0, #4294967295
 8005168:	e0d1      	b.n	800530e <_svfiprintf_r+0x1d2>
 800516a:	2340      	movs	r3, #64	; 0x40
 800516c:	616b      	str	r3, [r5, #20]
 800516e:	2300      	movs	r3, #0
 8005170:	9309      	str	r3, [sp, #36]	; 0x24
 8005172:	2320      	movs	r3, #32
 8005174:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005178:	f8cd 800c 	str.w	r8, [sp, #12]
 800517c:	2330      	movs	r3, #48	; 0x30
 800517e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005328 <_svfiprintf_r+0x1ec>
 8005182:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005186:	f04f 0901 	mov.w	r9, #1
 800518a:	4623      	mov	r3, r4
 800518c:	469a      	mov	sl, r3
 800518e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005192:	b10a      	cbz	r2, 8005198 <_svfiprintf_r+0x5c>
 8005194:	2a25      	cmp	r2, #37	; 0x25
 8005196:	d1f9      	bne.n	800518c <_svfiprintf_r+0x50>
 8005198:	ebba 0b04 	subs.w	fp, sl, r4
 800519c:	d00b      	beq.n	80051b6 <_svfiprintf_r+0x7a>
 800519e:	465b      	mov	r3, fp
 80051a0:	4622      	mov	r2, r4
 80051a2:	4629      	mov	r1, r5
 80051a4:	4638      	mov	r0, r7
 80051a6:	f7ff ff6d 	bl	8005084 <__ssputs_r>
 80051aa:	3001      	adds	r0, #1
 80051ac:	f000 80aa 	beq.w	8005304 <_svfiprintf_r+0x1c8>
 80051b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051b2:	445a      	add	r2, fp
 80051b4:	9209      	str	r2, [sp, #36]	; 0x24
 80051b6:	f89a 3000 	ldrb.w	r3, [sl]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 80a2 	beq.w	8005304 <_svfiprintf_r+0x1c8>
 80051c0:	2300      	movs	r3, #0
 80051c2:	f04f 32ff 	mov.w	r2, #4294967295
 80051c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051ca:	f10a 0a01 	add.w	sl, sl, #1
 80051ce:	9304      	str	r3, [sp, #16]
 80051d0:	9307      	str	r3, [sp, #28]
 80051d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051d6:	931a      	str	r3, [sp, #104]	; 0x68
 80051d8:	4654      	mov	r4, sl
 80051da:	2205      	movs	r2, #5
 80051dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051e0:	4851      	ldr	r0, [pc, #324]	; (8005328 <_svfiprintf_r+0x1ec>)
 80051e2:	f7fa fff5 	bl	80001d0 <memchr>
 80051e6:	9a04      	ldr	r2, [sp, #16]
 80051e8:	b9d8      	cbnz	r0, 8005222 <_svfiprintf_r+0xe6>
 80051ea:	06d0      	lsls	r0, r2, #27
 80051ec:	bf44      	itt	mi
 80051ee:	2320      	movmi	r3, #32
 80051f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051f4:	0711      	lsls	r1, r2, #28
 80051f6:	bf44      	itt	mi
 80051f8:	232b      	movmi	r3, #43	; 0x2b
 80051fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051fe:	f89a 3000 	ldrb.w	r3, [sl]
 8005202:	2b2a      	cmp	r3, #42	; 0x2a
 8005204:	d015      	beq.n	8005232 <_svfiprintf_r+0xf6>
 8005206:	9a07      	ldr	r2, [sp, #28]
 8005208:	4654      	mov	r4, sl
 800520a:	2000      	movs	r0, #0
 800520c:	f04f 0c0a 	mov.w	ip, #10
 8005210:	4621      	mov	r1, r4
 8005212:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005216:	3b30      	subs	r3, #48	; 0x30
 8005218:	2b09      	cmp	r3, #9
 800521a:	d94e      	bls.n	80052ba <_svfiprintf_r+0x17e>
 800521c:	b1b0      	cbz	r0, 800524c <_svfiprintf_r+0x110>
 800521e:	9207      	str	r2, [sp, #28]
 8005220:	e014      	b.n	800524c <_svfiprintf_r+0x110>
 8005222:	eba0 0308 	sub.w	r3, r0, r8
 8005226:	fa09 f303 	lsl.w	r3, r9, r3
 800522a:	4313      	orrs	r3, r2
 800522c:	9304      	str	r3, [sp, #16]
 800522e:	46a2      	mov	sl, r4
 8005230:	e7d2      	b.n	80051d8 <_svfiprintf_r+0x9c>
 8005232:	9b03      	ldr	r3, [sp, #12]
 8005234:	1d19      	adds	r1, r3, #4
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	9103      	str	r1, [sp, #12]
 800523a:	2b00      	cmp	r3, #0
 800523c:	bfbb      	ittet	lt
 800523e:	425b      	neglt	r3, r3
 8005240:	f042 0202 	orrlt.w	r2, r2, #2
 8005244:	9307      	strge	r3, [sp, #28]
 8005246:	9307      	strlt	r3, [sp, #28]
 8005248:	bfb8      	it	lt
 800524a:	9204      	strlt	r2, [sp, #16]
 800524c:	7823      	ldrb	r3, [r4, #0]
 800524e:	2b2e      	cmp	r3, #46	; 0x2e
 8005250:	d10c      	bne.n	800526c <_svfiprintf_r+0x130>
 8005252:	7863      	ldrb	r3, [r4, #1]
 8005254:	2b2a      	cmp	r3, #42	; 0x2a
 8005256:	d135      	bne.n	80052c4 <_svfiprintf_r+0x188>
 8005258:	9b03      	ldr	r3, [sp, #12]
 800525a:	1d1a      	adds	r2, r3, #4
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	9203      	str	r2, [sp, #12]
 8005260:	2b00      	cmp	r3, #0
 8005262:	bfb8      	it	lt
 8005264:	f04f 33ff 	movlt.w	r3, #4294967295
 8005268:	3402      	adds	r4, #2
 800526a:	9305      	str	r3, [sp, #20]
 800526c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005338 <_svfiprintf_r+0x1fc>
 8005270:	7821      	ldrb	r1, [r4, #0]
 8005272:	2203      	movs	r2, #3
 8005274:	4650      	mov	r0, sl
 8005276:	f7fa ffab 	bl	80001d0 <memchr>
 800527a:	b140      	cbz	r0, 800528e <_svfiprintf_r+0x152>
 800527c:	2340      	movs	r3, #64	; 0x40
 800527e:	eba0 000a 	sub.w	r0, r0, sl
 8005282:	fa03 f000 	lsl.w	r0, r3, r0
 8005286:	9b04      	ldr	r3, [sp, #16]
 8005288:	4303      	orrs	r3, r0
 800528a:	3401      	adds	r4, #1
 800528c:	9304      	str	r3, [sp, #16]
 800528e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005292:	4826      	ldr	r0, [pc, #152]	; (800532c <_svfiprintf_r+0x1f0>)
 8005294:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005298:	2206      	movs	r2, #6
 800529a:	f7fa ff99 	bl	80001d0 <memchr>
 800529e:	2800      	cmp	r0, #0
 80052a0:	d038      	beq.n	8005314 <_svfiprintf_r+0x1d8>
 80052a2:	4b23      	ldr	r3, [pc, #140]	; (8005330 <_svfiprintf_r+0x1f4>)
 80052a4:	bb1b      	cbnz	r3, 80052ee <_svfiprintf_r+0x1b2>
 80052a6:	9b03      	ldr	r3, [sp, #12]
 80052a8:	3307      	adds	r3, #7
 80052aa:	f023 0307 	bic.w	r3, r3, #7
 80052ae:	3308      	adds	r3, #8
 80052b0:	9303      	str	r3, [sp, #12]
 80052b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052b4:	4433      	add	r3, r6
 80052b6:	9309      	str	r3, [sp, #36]	; 0x24
 80052b8:	e767      	b.n	800518a <_svfiprintf_r+0x4e>
 80052ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80052be:	460c      	mov	r4, r1
 80052c0:	2001      	movs	r0, #1
 80052c2:	e7a5      	b.n	8005210 <_svfiprintf_r+0xd4>
 80052c4:	2300      	movs	r3, #0
 80052c6:	3401      	adds	r4, #1
 80052c8:	9305      	str	r3, [sp, #20]
 80052ca:	4619      	mov	r1, r3
 80052cc:	f04f 0c0a 	mov.w	ip, #10
 80052d0:	4620      	mov	r0, r4
 80052d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052d6:	3a30      	subs	r2, #48	; 0x30
 80052d8:	2a09      	cmp	r2, #9
 80052da:	d903      	bls.n	80052e4 <_svfiprintf_r+0x1a8>
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d0c5      	beq.n	800526c <_svfiprintf_r+0x130>
 80052e0:	9105      	str	r1, [sp, #20]
 80052e2:	e7c3      	b.n	800526c <_svfiprintf_r+0x130>
 80052e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80052e8:	4604      	mov	r4, r0
 80052ea:	2301      	movs	r3, #1
 80052ec:	e7f0      	b.n	80052d0 <_svfiprintf_r+0x194>
 80052ee:	ab03      	add	r3, sp, #12
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	462a      	mov	r2, r5
 80052f4:	4b0f      	ldr	r3, [pc, #60]	; (8005334 <_svfiprintf_r+0x1f8>)
 80052f6:	a904      	add	r1, sp, #16
 80052f8:	4638      	mov	r0, r7
 80052fa:	f3af 8000 	nop.w
 80052fe:	1c42      	adds	r2, r0, #1
 8005300:	4606      	mov	r6, r0
 8005302:	d1d6      	bne.n	80052b2 <_svfiprintf_r+0x176>
 8005304:	89ab      	ldrh	r3, [r5, #12]
 8005306:	065b      	lsls	r3, r3, #25
 8005308:	f53f af2c 	bmi.w	8005164 <_svfiprintf_r+0x28>
 800530c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800530e:	b01d      	add	sp, #116	; 0x74
 8005310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005314:	ab03      	add	r3, sp, #12
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	462a      	mov	r2, r5
 800531a:	4b06      	ldr	r3, [pc, #24]	; (8005334 <_svfiprintf_r+0x1f8>)
 800531c:	a904      	add	r1, sp, #16
 800531e:	4638      	mov	r0, r7
 8005320:	f000 f87a 	bl	8005418 <_printf_i>
 8005324:	e7eb      	b.n	80052fe <_svfiprintf_r+0x1c2>
 8005326:	bf00      	nop
 8005328:	08025964 	.word	0x08025964
 800532c:	0802596e 	.word	0x0802596e
 8005330:	00000000 	.word	0x00000000
 8005334:	08005085 	.word	0x08005085
 8005338:	0802596a 	.word	0x0802596a

0800533c <_printf_common>:
 800533c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005340:	4616      	mov	r6, r2
 8005342:	4699      	mov	r9, r3
 8005344:	688a      	ldr	r2, [r1, #8]
 8005346:	690b      	ldr	r3, [r1, #16]
 8005348:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800534c:	4293      	cmp	r3, r2
 800534e:	bfb8      	it	lt
 8005350:	4613      	movlt	r3, r2
 8005352:	6033      	str	r3, [r6, #0]
 8005354:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005358:	4607      	mov	r7, r0
 800535a:	460c      	mov	r4, r1
 800535c:	b10a      	cbz	r2, 8005362 <_printf_common+0x26>
 800535e:	3301      	adds	r3, #1
 8005360:	6033      	str	r3, [r6, #0]
 8005362:	6823      	ldr	r3, [r4, #0]
 8005364:	0699      	lsls	r1, r3, #26
 8005366:	bf42      	ittt	mi
 8005368:	6833      	ldrmi	r3, [r6, #0]
 800536a:	3302      	addmi	r3, #2
 800536c:	6033      	strmi	r3, [r6, #0]
 800536e:	6825      	ldr	r5, [r4, #0]
 8005370:	f015 0506 	ands.w	r5, r5, #6
 8005374:	d106      	bne.n	8005384 <_printf_common+0x48>
 8005376:	f104 0a19 	add.w	sl, r4, #25
 800537a:	68e3      	ldr	r3, [r4, #12]
 800537c:	6832      	ldr	r2, [r6, #0]
 800537e:	1a9b      	subs	r3, r3, r2
 8005380:	42ab      	cmp	r3, r5
 8005382:	dc26      	bgt.n	80053d2 <_printf_common+0x96>
 8005384:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005388:	1e13      	subs	r3, r2, #0
 800538a:	6822      	ldr	r2, [r4, #0]
 800538c:	bf18      	it	ne
 800538e:	2301      	movne	r3, #1
 8005390:	0692      	lsls	r2, r2, #26
 8005392:	d42b      	bmi.n	80053ec <_printf_common+0xb0>
 8005394:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005398:	4649      	mov	r1, r9
 800539a:	4638      	mov	r0, r7
 800539c:	47c0      	blx	r8
 800539e:	3001      	adds	r0, #1
 80053a0:	d01e      	beq.n	80053e0 <_printf_common+0xa4>
 80053a2:	6823      	ldr	r3, [r4, #0]
 80053a4:	68e5      	ldr	r5, [r4, #12]
 80053a6:	6832      	ldr	r2, [r6, #0]
 80053a8:	f003 0306 	and.w	r3, r3, #6
 80053ac:	2b04      	cmp	r3, #4
 80053ae:	bf08      	it	eq
 80053b0:	1aad      	subeq	r5, r5, r2
 80053b2:	68a3      	ldr	r3, [r4, #8]
 80053b4:	6922      	ldr	r2, [r4, #16]
 80053b6:	bf0c      	ite	eq
 80053b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053bc:	2500      	movne	r5, #0
 80053be:	4293      	cmp	r3, r2
 80053c0:	bfc4      	itt	gt
 80053c2:	1a9b      	subgt	r3, r3, r2
 80053c4:	18ed      	addgt	r5, r5, r3
 80053c6:	2600      	movs	r6, #0
 80053c8:	341a      	adds	r4, #26
 80053ca:	42b5      	cmp	r5, r6
 80053cc:	d11a      	bne.n	8005404 <_printf_common+0xc8>
 80053ce:	2000      	movs	r0, #0
 80053d0:	e008      	b.n	80053e4 <_printf_common+0xa8>
 80053d2:	2301      	movs	r3, #1
 80053d4:	4652      	mov	r2, sl
 80053d6:	4649      	mov	r1, r9
 80053d8:	4638      	mov	r0, r7
 80053da:	47c0      	blx	r8
 80053dc:	3001      	adds	r0, #1
 80053de:	d103      	bne.n	80053e8 <_printf_common+0xac>
 80053e0:	f04f 30ff 	mov.w	r0, #4294967295
 80053e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053e8:	3501      	adds	r5, #1
 80053ea:	e7c6      	b.n	800537a <_printf_common+0x3e>
 80053ec:	18e1      	adds	r1, r4, r3
 80053ee:	1c5a      	adds	r2, r3, #1
 80053f0:	2030      	movs	r0, #48	; 0x30
 80053f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053f6:	4422      	add	r2, r4
 80053f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005400:	3302      	adds	r3, #2
 8005402:	e7c7      	b.n	8005394 <_printf_common+0x58>
 8005404:	2301      	movs	r3, #1
 8005406:	4622      	mov	r2, r4
 8005408:	4649      	mov	r1, r9
 800540a:	4638      	mov	r0, r7
 800540c:	47c0      	blx	r8
 800540e:	3001      	adds	r0, #1
 8005410:	d0e6      	beq.n	80053e0 <_printf_common+0xa4>
 8005412:	3601      	adds	r6, #1
 8005414:	e7d9      	b.n	80053ca <_printf_common+0x8e>
	...

08005418 <_printf_i>:
 8005418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800541c:	7e0f      	ldrb	r7, [r1, #24]
 800541e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005420:	2f78      	cmp	r7, #120	; 0x78
 8005422:	4691      	mov	r9, r2
 8005424:	4680      	mov	r8, r0
 8005426:	460c      	mov	r4, r1
 8005428:	469a      	mov	sl, r3
 800542a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800542e:	d807      	bhi.n	8005440 <_printf_i+0x28>
 8005430:	2f62      	cmp	r7, #98	; 0x62
 8005432:	d80a      	bhi.n	800544a <_printf_i+0x32>
 8005434:	2f00      	cmp	r7, #0
 8005436:	f000 80d8 	beq.w	80055ea <_printf_i+0x1d2>
 800543a:	2f58      	cmp	r7, #88	; 0x58
 800543c:	f000 80a3 	beq.w	8005586 <_printf_i+0x16e>
 8005440:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005444:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005448:	e03a      	b.n	80054c0 <_printf_i+0xa8>
 800544a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800544e:	2b15      	cmp	r3, #21
 8005450:	d8f6      	bhi.n	8005440 <_printf_i+0x28>
 8005452:	a101      	add	r1, pc, #4	; (adr r1, 8005458 <_printf_i+0x40>)
 8005454:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005458:	080054b1 	.word	0x080054b1
 800545c:	080054c5 	.word	0x080054c5
 8005460:	08005441 	.word	0x08005441
 8005464:	08005441 	.word	0x08005441
 8005468:	08005441 	.word	0x08005441
 800546c:	08005441 	.word	0x08005441
 8005470:	080054c5 	.word	0x080054c5
 8005474:	08005441 	.word	0x08005441
 8005478:	08005441 	.word	0x08005441
 800547c:	08005441 	.word	0x08005441
 8005480:	08005441 	.word	0x08005441
 8005484:	080055d1 	.word	0x080055d1
 8005488:	080054f5 	.word	0x080054f5
 800548c:	080055b3 	.word	0x080055b3
 8005490:	08005441 	.word	0x08005441
 8005494:	08005441 	.word	0x08005441
 8005498:	080055f3 	.word	0x080055f3
 800549c:	08005441 	.word	0x08005441
 80054a0:	080054f5 	.word	0x080054f5
 80054a4:	08005441 	.word	0x08005441
 80054a8:	08005441 	.word	0x08005441
 80054ac:	080055bb 	.word	0x080055bb
 80054b0:	682b      	ldr	r3, [r5, #0]
 80054b2:	1d1a      	adds	r2, r3, #4
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	602a      	str	r2, [r5, #0]
 80054b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054c0:	2301      	movs	r3, #1
 80054c2:	e0a3      	b.n	800560c <_printf_i+0x1f4>
 80054c4:	6820      	ldr	r0, [r4, #0]
 80054c6:	6829      	ldr	r1, [r5, #0]
 80054c8:	0606      	lsls	r6, r0, #24
 80054ca:	f101 0304 	add.w	r3, r1, #4
 80054ce:	d50a      	bpl.n	80054e6 <_printf_i+0xce>
 80054d0:	680e      	ldr	r6, [r1, #0]
 80054d2:	602b      	str	r3, [r5, #0]
 80054d4:	2e00      	cmp	r6, #0
 80054d6:	da03      	bge.n	80054e0 <_printf_i+0xc8>
 80054d8:	232d      	movs	r3, #45	; 0x2d
 80054da:	4276      	negs	r6, r6
 80054dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054e0:	485e      	ldr	r0, [pc, #376]	; (800565c <_printf_i+0x244>)
 80054e2:	230a      	movs	r3, #10
 80054e4:	e019      	b.n	800551a <_printf_i+0x102>
 80054e6:	680e      	ldr	r6, [r1, #0]
 80054e8:	602b      	str	r3, [r5, #0]
 80054ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80054ee:	bf18      	it	ne
 80054f0:	b236      	sxthne	r6, r6
 80054f2:	e7ef      	b.n	80054d4 <_printf_i+0xbc>
 80054f4:	682b      	ldr	r3, [r5, #0]
 80054f6:	6820      	ldr	r0, [r4, #0]
 80054f8:	1d19      	adds	r1, r3, #4
 80054fa:	6029      	str	r1, [r5, #0]
 80054fc:	0601      	lsls	r1, r0, #24
 80054fe:	d501      	bpl.n	8005504 <_printf_i+0xec>
 8005500:	681e      	ldr	r6, [r3, #0]
 8005502:	e002      	b.n	800550a <_printf_i+0xf2>
 8005504:	0646      	lsls	r6, r0, #25
 8005506:	d5fb      	bpl.n	8005500 <_printf_i+0xe8>
 8005508:	881e      	ldrh	r6, [r3, #0]
 800550a:	4854      	ldr	r0, [pc, #336]	; (800565c <_printf_i+0x244>)
 800550c:	2f6f      	cmp	r7, #111	; 0x6f
 800550e:	bf0c      	ite	eq
 8005510:	2308      	moveq	r3, #8
 8005512:	230a      	movne	r3, #10
 8005514:	2100      	movs	r1, #0
 8005516:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800551a:	6865      	ldr	r5, [r4, #4]
 800551c:	60a5      	str	r5, [r4, #8]
 800551e:	2d00      	cmp	r5, #0
 8005520:	bfa2      	ittt	ge
 8005522:	6821      	ldrge	r1, [r4, #0]
 8005524:	f021 0104 	bicge.w	r1, r1, #4
 8005528:	6021      	strge	r1, [r4, #0]
 800552a:	b90e      	cbnz	r6, 8005530 <_printf_i+0x118>
 800552c:	2d00      	cmp	r5, #0
 800552e:	d04d      	beq.n	80055cc <_printf_i+0x1b4>
 8005530:	4615      	mov	r5, r2
 8005532:	fbb6 f1f3 	udiv	r1, r6, r3
 8005536:	fb03 6711 	mls	r7, r3, r1, r6
 800553a:	5dc7      	ldrb	r7, [r0, r7]
 800553c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005540:	4637      	mov	r7, r6
 8005542:	42bb      	cmp	r3, r7
 8005544:	460e      	mov	r6, r1
 8005546:	d9f4      	bls.n	8005532 <_printf_i+0x11a>
 8005548:	2b08      	cmp	r3, #8
 800554a:	d10b      	bne.n	8005564 <_printf_i+0x14c>
 800554c:	6823      	ldr	r3, [r4, #0]
 800554e:	07de      	lsls	r6, r3, #31
 8005550:	d508      	bpl.n	8005564 <_printf_i+0x14c>
 8005552:	6923      	ldr	r3, [r4, #16]
 8005554:	6861      	ldr	r1, [r4, #4]
 8005556:	4299      	cmp	r1, r3
 8005558:	bfde      	ittt	le
 800555a:	2330      	movle	r3, #48	; 0x30
 800555c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005560:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005564:	1b52      	subs	r2, r2, r5
 8005566:	6122      	str	r2, [r4, #16]
 8005568:	f8cd a000 	str.w	sl, [sp]
 800556c:	464b      	mov	r3, r9
 800556e:	aa03      	add	r2, sp, #12
 8005570:	4621      	mov	r1, r4
 8005572:	4640      	mov	r0, r8
 8005574:	f7ff fee2 	bl	800533c <_printf_common>
 8005578:	3001      	adds	r0, #1
 800557a:	d14c      	bne.n	8005616 <_printf_i+0x1fe>
 800557c:	f04f 30ff 	mov.w	r0, #4294967295
 8005580:	b004      	add	sp, #16
 8005582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005586:	4835      	ldr	r0, [pc, #212]	; (800565c <_printf_i+0x244>)
 8005588:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800558c:	6829      	ldr	r1, [r5, #0]
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	f851 6b04 	ldr.w	r6, [r1], #4
 8005594:	6029      	str	r1, [r5, #0]
 8005596:	061d      	lsls	r5, r3, #24
 8005598:	d514      	bpl.n	80055c4 <_printf_i+0x1ac>
 800559a:	07df      	lsls	r7, r3, #31
 800559c:	bf44      	itt	mi
 800559e:	f043 0320 	orrmi.w	r3, r3, #32
 80055a2:	6023      	strmi	r3, [r4, #0]
 80055a4:	b91e      	cbnz	r6, 80055ae <_printf_i+0x196>
 80055a6:	6823      	ldr	r3, [r4, #0]
 80055a8:	f023 0320 	bic.w	r3, r3, #32
 80055ac:	6023      	str	r3, [r4, #0]
 80055ae:	2310      	movs	r3, #16
 80055b0:	e7b0      	b.n	8005514 <_printf_i+0xfc>
 80055b2:	6823      	ldr	r3, [r4, #0]
 80055b4:	f043 0320 	orr.w	r3, r3, #32
 80055b8:	6023      	str	r3, [r4, #0]
 80055ba:	2378      	movs	r3, #120	; 0x78
 80055bc:	4828      	ldr	r0, [pc, #160]	; (8005660 <_printf_i+0x248>)
 80055be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80055c2:	e7e3      	b.n	800558c <_printf_i+0x174>
 80055c4:	0659      	lsls	r1, r3, #25
 80055c6:	bf48      	it	mi
 80055c8:	b2b6      	uxthmi	r6, r6
 80055ca:	e7e6      	b.n	800559a <_printf_i+0x182>
 80055cc:	4615      	mov	r5, r2
 80055ce:	e7bb      	b.n	8005548 <_printf_i+0x130>
 80055d0:	682b      	ldr	r3, [r5, #0]
 80055d2:	6826      	ldr	r6, [r4, #0]
 80055d4:	6961      	ldr	r1, [r4, #20]
 80055d6:	1d18      	adds	r0, r3, #4
 80055d8:	6028      	str	r0, [r5, #0]
 80055da:	0635      	lsls	r5, r6, #24
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	d501      	bpl.n	80055e4 <_printf_i+0x1cc>
 80055e0:	6019      	str	r1, [r3, #0]
 80055e2:	e002      	b.n	80055ea <_printf_i+0x1d2>
 80055e4:	0670      	lsls	r0, r6, #25
 80055e6:	d5fb      	bpl.n	80055e0 <_printf_i+0x1c8>
 80055e8:	8019      	strh	r1, [r3, #0]
 80055ea:	2300      	movs	r3, #0
 80055ec:	6123      	str	r3, [r4, #16]
 80055ee:	4615      	mov	r5, r2
 80055f0:	e7ba      	b.n	8005568 <_printf_i+0x150>
 80055f2:	682b      	ldr	r3, [r5, #0]
 80055f4:	1d1a      	adds	r2, r3, #4
 80055f6:	602a      	str	r2, [r5, #0]
 80055f8:	681d      	ldr	r5, [r3, #0]
 80055fa:	6862      	ldr	r2, [r4, #4]
 80055fc:	2100      	movs	r1, #0
 80055fe:	4628      	mov	r0, r5
 8005600:	f7fa fde6 	bl	80001d0 <memchr>
 8005604:	b108      	cbz	r0, 800560a <_printf_i+0x1f2>
 8005606:	1b40      	subs	r0, r0, r5
 8005608:	6060      	str	r0, [r4, #4]
 800560a:	6863      	ldr	r3, [r4, #4]
 800560c:	6123      	str	r3, [r4, #16]
 800560e:	2300      	movs	r3, #0
 8005610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005614:	e7a8      	b.n	8005568 <_printf_i+0x150>
 8005616:	6923      	ldr	r3, [r4, #16]
 8005618:	462a      	mov	r2, r5
 800561a:	4649      	mov	r1, r9
 800561c:	4640      	mov	r0, r8
 800561e:	47d0      	blx	sl
 8005620:	3001      	adds	r0, #1
 8005622:	d0ab      	beq.n	800557c <_printf_i+0x164>
 8005624:	6823      	ldr	r3, [r4, #0]
 8005626:	079b      	lsls	r3, r3, #30
 8005628:	d413      	bmi.n	8005652 <_printf_i+0x23a>
 800562a:	68e0      	ldr	r0, [r4, #12]
 800562c:	9b03      	ldr	r3, [sp, #12]
 800562e:	4298      	cmp	r0, r3
 8005630:	bfb8      	it	lt
 8005632:	4618      	movlt	r0, r3
 8005634:	e7a4      	b.n	8005580 <_printf_i+0x168>
 8005636:	2301      	movs	r3, #1
 8005638:	4632      	mov	r2, r6
 800563a:	4649      	mov	r1, r9
 800563c:	4640      	mov	r0, r8
 800563e:	47d0      	blx	sl
 8005640:	3001      	adds	r0, #1
 8005642:	d09b      	beq.n	800557c <_printf_i+0x164>
 8005644:	3501      	adds	r5, #1
 8005646:	68e3      	ldr	r3, [r4, #12]
 8005648:	9903      	ldr	r1, [sp, #12]
 800564a:	1a5b      	subs	r3, r3, r1
 800564c:	42ab      	cmp	r3, r5
 800564e:	dcf2      	bgt.n	8005636 <_printf_i+0x21e>
 8005650:	e7eb      	b.n	800562a <_printf_i+0x212>
 8005652:	2500      	movs	r5, #0
 8005654:	f104 0619 	add.w	r6, r4, #25
 8005658:	e7f5      	b.n	8005646 <_printf_i+0x22e>
 800565a:	bf00      	nop
 800565c:	08025975 	.word	0x08025975
 8005660:	08025986 	.word	0x08025986

08005664 <memcpy>:
 8005664:	440a      	add	r2, r1
 8005666:	4291      	cmp	r1, r2
 8005668:	f100 33ff 	add.w	r3, r0, #4294967295
 800566c:	d100      	bne.n	8005670 <memcpy+0xc>
 800566e:	4770      	bx	lr
 8005670:	b510      	push	{r4, lr}
 8005672:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005676:	f803 4f01 	strb.w	r4, [r3, #1]!
 800567a:	4291      	cmp	r1, r2
 800567c:	d1f9      	bne.n	8005672 <memcpy+0xe>
 800567e:	bd10      	pop	{r4, pc}

08005680 <memmove>:
 8005680:	4288      	cmp	r0, r1
 8005682:	b510      	push	{r4, lr}
 8005684:	eb01 0402 	add.w	r4, r1, r2
 8005688:	d902      	bls.n	8005690 <memmove+0x10>
 800568a:	4284      	cmp	r4, r0
 800568c:	4623      	mov	r3, r4
 800568e:	d807      	bhi.n	80056a0 <memmove+0x20>
 8005690:	1e43      	subs	r3, r0, #1
 8005692:	42a1      	cmp	r1, r4
 8005694:	d008      	beq.n	80056a8 <memmove+0x28>
 8005696:	f811 2b01 	ldrb.w	r2, [r1], #1
 800569a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800569e:	e7f8      	b.n	8005692 <memmove+0x12>
 80056a0:	4402      	add	r2, r0
 80056a2:	4601      	mov	r1, r0
 80056a4:	428a      	cmp	r2, r1
 80056a6:	d100      	bne.n	80056aa <memmove+0x2a>
 80056a8:	bd10      	pop	{r4, pc}
 80056aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80056b2:	e7f7      	b.n	80056a4 <memmove+0x24>

080056b4 <_free_r>:
 80056b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056b6:	2900      	cmp	r1, #0
 80056b8:	d044      	beq.n	8005744 <_free_r+0x90>
 80056ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056be:	9001      	str	r0, [sp, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f1a1 0404 	sub.w	r4, r1, #4
 80056c6:	bfb8      	it	lt
 80056c8:	18e4      	addlt	r4, r4, r3
 80056ca:	f000 f913 	bl	80058f4 <__malloc_lock>
 80056ce:	4a1e      	ldr	r2, [pc, #120]	; (8005748 <_free_r+0x94>)
 80056d0:	9801      	ldr	r0, [sp, #4]
 80056d2:	6813      	ldr	r3, [r2, #0]
 80056d4:	b933      	cbnz	r3, 80056e4 <_free_r+0x30>
 80056d6:	6063      	str	r3, [r4, #4]
 80056d8:	6014      	str	r4, [r2, #0]
 80056da:	b003      	add	sp, #12
 80056dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056e0:	f000 b90e 	b.w	8005900 <__malloc_unlock>
 80056e4:	42a3      	cmp	r3, r4
 80056e6:	d908      	bls.n	80056fa <_free_r+0x46>
 80056e8:	6825      	ldr	r5, [r4, #0]
 80056ea:	1961      	adds	r1, r4, r5
 80056ec:	428b      	cmp	r3, r1
 80056ee:	bf01      	itttt	eq
 80056f0:	6819      	ldreq	r1, [r3, #0]
 80056f2:	685b      	ldreq	r3, [r3, #4]
 80056f4:	1949      	addeq	r1, r1, r5
 80056f6:	6021      	streq	r1, [r4, #0]
 80056f8:	e7ed      	b.n	80056d6 <_free_r+0x22>
 80056fa:	461a      	mov	r2, r3
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	b10b      	cbz	r3, 8005704 <_free_r+0x50>
 8005700:	42a3      	cmp	r3, r4
 8005702:	d9fa      	bls.n	80056fa <_free_r+0x46>
 8005704:	6811      	ldr	r1, [r2, #0]
 8005706:	1855      	adds	r5, r2, r1
 8005708:	42a5      	cmp	r5, r4
 800570a:	d10b      	bne.n	8005724 <_free_r+0x70>
 800570c:	6824      	ldr	r4, [r4, #0]
 800570e:	4421      	add	r1, r4
 8005710:	1854      	adds	r4, r2, r1
 8005712:	42a3      	cmp	r3, r4
 8005714:	6011      	str	r1, [r2, #0]
 8005716:	d1e0      	bne.n	80056da <_free_r+0x26>
 8005718:	681c      	ldr	r4, [r3, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	6053      	str	r3, [r2, #4]
 800571e:	4421      	add	r1, r4
 8005720:	6011      	str	r1, [r2, #0]
 8005722:	e7da      	b.n	80056da <_free_r+0x26>
 8005724:	d902      	bls.n	800572c <_free_r+0x78>
 8005726:	230c      	movs	r3, #12
 8005728:	6003      	str	r3, [r0, #0]
 800572a:	e7d6      	b.n	80056da <_free_r+0x26>
 800572c:	6825      	ldr	r5, [r4, #0]
 800572e:	1961      	adds	r1, r4, r5
 8005730:	428b      	cmp	r3, r1
 8005732:	bf04      	itt	eq
 8005734:	6819      	ldreq	r1, [r3, #0]
 8005736:	685b      	ldreq	r3, [r3, #4]
 8005738:	6063      	str	r3, [r4, #4]
 800573a:	bf04      	itt	eq
 800573c:	1949      	addeq	r1, r1, r5
 800573e:	6021      	streq	r1, [r4, #0]
 8005740:	6054      	str	r4, [r2, #4]
 8005742:	e7ca      	b.n	80056da <_free_r+0x26>
 8005744:	b003      	add	sp, #12
 8005746:	bd30      	pop	{r4, r5, pc}
 8005748:	200002cc 	.word	0x200002cc

0800574c <sbrk_aligned>:
 800574c:	b570      	push	{r4, r5, r6, lr}
 800574e:	4e0e      	ldr	r6, [pc, #56]	; (8005788 <sbrk_aligned+0x3c>)
 8005750:	460c      	mov	r4, r1
 8005752:	6831      	ldr	r1, [r6, #0]
 8005754:	4605      	mov	r5, r0
 8005756:	b911      	cbnz	r1, 800575e <sbrk_aligned+0x12>
 8005758:	f000 f8bc 	bl	80058d4 <_sbrk_r>
 800575c:	6030      	str	r0, [r6, #0]
 800575e:	4621      	mov	r1, r4
 8005760:	4628      	mov	r0, r5
 8005762:	f000 f8b7 	bl	80058d4 <_sbrk_r>
 8005766:	1c43      	adds	r3, r0, #1
 8005768:	d00a      	beq.n	8005780 <sbrk_aligned+0x34>
 800576a:	1cc4      	adds	r4, r0, #3
 800576c:	f024 0403 	bic.w	r4, r4, #3
 8005770:	42a0      	cmp	r0, r4
 8005772:	d007      	beq.n	8005784 <sbrk_aligned+0x38>
 8005774:	1a21      	subs	r1, r4, r0
 8005776:	4628      	mov	r0, r5
 8005778:	f000 f8ac 	bl	80058d4 <_sbrk_r>
 800577c:	3001      	adds	r0, #1
 800577e:	d101      	bne.n	8005784 <sbrk_aligned+0x38>
 8005780:	f04f 34ff 	mov.w	r4, #4294967295
 8005784:	4620      	mov	r0, r4
 8005786:	bd70      	pop	{r4, r5, r6, pc}
 8005788:	200002d0 	.word	0x200002d0

0800578c <_malloc_r>:
 800578c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005790:	1ccd      	adds	r5, r1, #3
 8005792:	f025 0503 	bic.w	r5, r5, #3
 8005796:	3508      	adds	r5, #8
 8005798:	2d0c      	cmp	r5, #12
 800579a:	bf38      	it	cc
 800579c:	250c      	movcc	r5, #12
 800579e:	2d00      	cmp	r5, #0
 80057a0:	4607      	mov	r7, r0
 80057a2:	db01      	blt.n	80057a8 <_malloc_r+0x1c>
 80057a4:	42a9      	cmp	r1, r5
 80057a6:	d905      	bls.n	80057b4 <_malloc_r+0x28>
 80057a8:	230c      	movs	r3, #12
 80057aa:	603b      	str	r3, [r7, #0]
 80057ac:	2600      	movs	r6, #0
 80057ae:	4630      	mov	r0, r6
 80057b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057b4:	4e2e      	ldr	r6, [pc, #184]	; (8005870 <_malloc_r+0xe4>)
 80057b6:	f000 f89d 	bl	80058f4 <__malloc_lock>
 80057ba:	6833      	ldr	r3, [r6, #0]
 80057bc:	461c      	mov	r4, r3
 80057be:	bb34      	cbnz	r4, 800580e <_malloc_r+0x82>
 80057c0:	4629      	mov	r1, r5
 80057c2:	4638      	mov	r0, r7
 80057c4:	f7ff ffc2 	bl	800574c <sbrk_aligned>
 80057c8:	1c43      	adds	r3, r0, #1
 80057ca:	4604      	mov	r4, r0
 80057cc:	d14d      	bne.n	800586a <_malloc_r+0xde>
 80057ce:	6834      	ldr	r4, [r6, #0]
 80057d0:	4626      	mov	r6, r4
 80057d2:	2e00      	cmp	r6, #0
 80057d4:	d140      	bne.n	8005858 <_malloc_r+0xcc>
 80057d6:	6823      	ldr	r3, [r4, #0]
 80057d8:	4631      	mov	r1, r6
 80057da:	4638      	mov	r0, r7
 80057dc:	eb04 0803 	add.w	r8, r4, r3
 80057e0:	f000 f878 	bl	80058d4 <_sbrk_r>
 80057e4:	4580      	cmp	r8, r0
 80057e6:	d13a      	bne.n	800585e <_malloc_r+0xd2>
 80057e8:	6821      	ldr	r1, [r4, #0]
 80057ea:	3503      	adds	r5, #3
 80057ec:	1a6d      	subs	r5, r5, r1
 80057ee:	f025 0503 	bic.w	r5, r5, #3
 80057f2:	3508      	adds	r5, #8
 80057f4:	2d0c      	cmp	r5, #12
 80057f6:	bf38      	it	cc
 80057f8:	250c      	movcc	r5, #12
 80057fa:	4629      	mov	r1, r5
 80057fc:	4638      	mov	r0, r7
 80057fe:	f7ff ffa5 	bl	800574c <sbrk_aligned>
 8005802:	3001      	adds	r0, #1
 8005804:	d02b      	beq.n	800585e <_malloc_r+0xd2>
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	442b      	add	r3, r5
 800580a:	6023      	str	r3, [r4, #0]
 800580c:	e00e      	b.n	800582c <_malloc_r+0xa0>
 800580e:	6822      	ldr	r2, [r4, #0]
 8005810:	1b52      	subs	r2, r2, r5
 8005812:	d41e      	bmi.n	8005852 <_malloc_r+0xc6>
 8005814:	2a0b      	cmp	r2, #11
 8005816:	d916      	bls.n	8005846 <_malloc_r+0xba>
 8005818:	1961      	adds	r1, r4, r5
 800581a:	42a3      	cmp	r3, r4
 800581c:	6025      	str	r5, [r4, #0]
 800581e:	bf18      	it	ne
 8005820:	6059      	strne	r1, [r3, #4]
 8005822:	6863      	ldr	r3, [r4, #4]
 8005824:	bf08      	it	eq
 8005826:	6031      	streq	r1, [r6, #0]
 8005828:	5162      	str	r2, [r4, r5]
 800582a:	604b      	str	r3, [r1, #4]
 800582c:	4638      	mov	r0, r7
 800582e:	f104 060b 	add.w	r6, r4, #11
 8005832:	f000 f865 	bl	8005900 <__malloc_unlock>
 8005836:	f026 0607 	bic.w	r6, r6, #7
 800583a:	1d23      	adds	r3, r4, #4
 800583c:	1af2      	subs	r2, r6, r3
 800583e:	d0b6      	beq.n	80057ae <_malloc_r+0x22>
 8005840:	1b9b      	subs	r3, r3, r6
 8005842:	50a3      	str	r3, [r4, r2]
 8005844:	e7b3      	b.n	80057ae <_malloc_r+0x22>
 8005846:	6862      	ldr	r2, [r4, #4]
 8005848:	42a3      	cmp	r3, r4
 800584a:	bf0c      	ite	eq
 800584c:	6032      	streq	r2, [r6, #0]
 800584e:	605a      	strne	r2, [r3, #4]
 8005850:	e7ec      	b.n	800582c <_malloc_r+0xa0>
 8005852:	4623      	mov	r3, r4
 8005854:	6864      	ldr	r4, [r4, #4]
 8005856:	e7b2      	b.n	80057be <_malloc_r+0x32>
 8005858:	4634      	mov	r4, r6
 800585a:	6876      	ldr	r6, [r6, #4]
 800585c:	e7b9      	b.n	80057d2 <_malloc_r+0x46>
 800585e:	230c      	movs	r3, #12
 8005860:	603b      	str	r3, [r7, #0]
 8005862:	4638      	mov	r0, r7
 8005864:	f000 f84c 	bl	8005900 <__malloc_unlock>
 8005868:	e7a1      	b.n	80057ae <_malloc_r+0x22>
 800586a:	6025      	str	r5, [r4, #0]
 800586c:	e7de      	b.n	800582c <_malloc_r+0xa0>
 800586e:	bf00      	nop
 8005870:	200002cc 	.word	0x200002cc

08005874 <_realloc_r>:
 8005874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005878:	4680      	mov	r8, r0
 800587a:	4614      	mov	r4, r2
 800587c:	460e      	mov	r6, r1
 800587e:	b921      	cbnz	r1, 800588a <_realloc_r+0x16>
 8005880:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005884:	4611      	mov	r1, r2
 8005886:	f7ff bf81 	b.w	800578c <_malloc_r>
 800588a:	b92a      	cbnz	r2, 8005898 <_realloc_r+0x24>
 800588c:	f7ff ff12 	bl	80056b4 <_free_r>
 8005890:	4625      	mov	r5, r4
 8005892:	4628      	mov	r0, r5
 8005894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005898:	f000 f838 	bl	800590c <_malloc_usable_size_r>
 800589c:	4284      	cmp	r4, r0
 800589e:	4607      	mov	r7, r0
 80058a0:	d802      	bhi.n	80058a8 <_realloc_r+0x34>
 80058a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80058a6:	d812      	bhi.n	80058ce <_realloc_r+0x5a>
 80058a8:	4621      	mov	r1, r4
 80058aa:	4640      	mov	r0, r8
 80058ac:	f7ff ff6e 	bl	800578c <_malloc_r>
 80058b0:	4605      	mov	r5, r0
 80058b2:	2800      	cmp	r0, #0
 80058b4:	d0ed      	beq.n	8005892 <_realloc_r+0x1e>
 80058b6:	42bc      	cmp	r4, r7
 80058b8:	4622      	mov	r2, r4
 80058ba:	4631      	mov	r1, r6
 80058bc:	bf28      	it	cs
 80058be:	463a      	movcs	r2, r7
 80058c0:	f7ff fed0 	bl	8005664 <memcpy>
 80058c4:	4631      	mov	r1, r6
 80058c6:	4640      	mov	r0, r8
 80058c8:	f7ff fef4 	bl	80056b4 <_free_r>
 80058cc:	e7e1      	b.n	8005892 <_realloc_r+0x1e>
 80058ce:	4635      	mov	r5, r6
 80058d0:	e7df      	b.n	8005892 <_realloc_r+0x1e>
	...

080058d4 <_sbrk_r>:
 80058d4:	b538      	push	{r3, r4, r5, lr}
 80058d6:	4d06      	ldr	r5, [pc, #24]	; (80058f0 <_sbrk_r+0x1c>)
 80058d8:	2300      	movs	r3, #0
 80058da:	4604      	mov	r4, r0
 80058dc:	4608      	mov	r0, r1
 80058de:	602b      	str	r3, [r5, #0]
 80058e0:	f7fd fe66 	bl	80035b0 <_sbrk>
 80058e4:	1c43      	adds	r3, r0, #1
 80058e6:	d102      	bne.n	80058ee <_sbrk_r+0x1a>
 80058e8:	682b      	ldr	r3, [r5, #0]
 80058ea:	b103      	cbz	r3, 80058ee <_sbrk_r+0x1a>
 80058ec:	6023      	str	r3, [r4, #0]
 80058ee:	bd38      	pop	{r3, r4, r5, pc}
 80058f0:	200002d4 	.word	0x200002d4

080058f4 <__malloc_lock>:
 80058f4:	4801      	ldr	r0, [pc, #4]	; (80058fc <__malloc_lock+0x8>)
 80058f6:	f000 b811 	b.w	800591c <__retarget_lock_acquire_recursive>
 80058fa:	bf00      	nop
 80058fc:	200002d8 	.word	0x200002d8

08005900 <__malloc_unlock>:
 8005900:	4801      	ldr	r0, [pc, #4]	; (8005908 <__malloc_unlock+0x8>)
 8005902:	f000 b80c 	b.w	800591e <__retarget_lock_release_recursive>
 8005906:	bf00      	nop
 8005908:	200002d8 	.word	0x200002d8

0800590c <_malloc_usable_size_r>:
 800590c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005910:	1f18      	subs	r0, r3, #4
 8005912:	2b00      	cmp	r3, #0
 8005914:	bfbc      	itt	lt
 8005916:	580b      	ldrlt	r3, [r1, r0]
 8005918:	18c0      	addlt	r0, r0, r3
 800591a:	4770      	bx	lr

0800591c <__retarget_lock_acquire_recursive>:
 800591c:	4770      	bx	lr

0800591e <__retarget_lock_release_recursive>:
 800591e:	4770      	bx	lr

08005920 <_init>:
 8005920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005922:	bf00      	nop
 8005924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005926:	bc08      	pop	{r3}
 8005928:	469e      	mov	lr, r3
 800592a:	4770      	bx	lr

0800592c <_fini>:
 800592c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800592e:	bf00      	nop
 8005930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005932:	bc08      	pop	{r3}
 8005934:	469e      	mov	lr, r3
 8005936:	4770      	bx	lr
